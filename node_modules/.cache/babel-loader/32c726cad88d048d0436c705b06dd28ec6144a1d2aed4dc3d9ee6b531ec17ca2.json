{"ast":null,"code":"import { slicedToArray as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { useState as n, useRef as o, useContext as t, useEffect as i, useCallback as r } from \"react\";\nimport { GridKeyboardNavigationContext as u } from \"../../components/GridKeyboardNavigationContext/GridKeyboardNavigationContext.js\";\nimport a from \"../useFullKeyboardListeners.js\";\nimport c from \"../useEventListener/index.js\";\nimport { getActiveIndexFromInboundNavigation as s, calcActiveIndexAfterArrowNavigation as f } from \"./gridKeyboardNavigationHelper.js\";\nimport { useLastNavigationDirection as d } from \"../../components/Menu/Menu/hooks/useLastNavigationDirection.js\";\nfunction l(l) {\n  var m = l.ref,\n    v = l.itemsCount,\n    b = l.numberOfItemsInLine,\n    I = l.onItemClicked,\n    p = l.getItemByIndex,\n    x = void 0 === p ? function (e) {} : p,\n    g = l.focusOnMount,\n    N = void 0 !== g && g,\n    O = l.focusItemIndexOnMount,\n    y = void 0 === O ? -1 : O,\n    j = l.disabledIndexes,\n    C = void 0 === j ? [] : j,\n    L = n(N && -1 !== y),\n    k = e(L, 2),\n    K = k[0],\n    M = k[1],\n    A = o(!1),\n    S = n(K ? y : -1),\n    h = e(S, 2),\n    w = h[0],\n    B = h[1],\n    D = n(!0),\n    E = e(D, 2),\n    G = E[0],\n    H = E[1],\n    _ = t(u);\n  i(function () {\n    A.current ? M(!1) : A.current = !0;\n  }, [w]);\n  var F = r(function () {\n      var e;\n      return null === (e = m.current) || void 0 === e ? void 0 : e.blur();\n    }, [m]),\n    P = d().lastNavigationDirectionRef,\n    R = r(function () {\n      var e = P.current;\n      if (e) {\n        if (-1 === w) {\n          var n = s({\n            direction: e,\n            numberOfItemsInLine: b,\n            itemsCount: v\n          });\n          B(n);\n        }\n        H(!0);\n      } else -1 === w && B(0);\n    }, [w, v, P, b]),\n    T = r(function () {\n      H(!1);\n    }, [H]),\n    q = r(function () {\n      H(!0), B(-1);\n    }, [B]);\n  c({\n    eventName: \"focus\",\n    callback: R,\n    ref: m\n  }), c({\n    eventName: \"mousedown\",\n    callback: T,\n    ref: m\n  }), c({\n    eventName: \"blur\",\n    callback: q,\n    ref: m\n  }), i(function () {\n    var e;\n    w > -1 && (null === (e = m.current) || void 0 === e || e.focus());\n  }, [w, m]);\n  var z = r(function (e) {\n      var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];\n      H(n), B(e), I(x(e), e);\n    }, [B, I, x]),\n    J = r(function () {\n      if (G) return z(w, !0);\n    }, [G, z, w]);\n  return a({\n    ref: m,\n    onSelectionKey: J,\n    onArrowNavigation: function (e) {\n      if (H(!0), -1 !== w) {\n        var n = f({\n            activeIndex: w,\n            itemsCount: v,\n            numberOfItemsInLine: b,\n            direction: e,\n            disabledIndexes: C\n          }),\n          o = n.nextIndex;\n        n.isOutbound ? null == _ || _.onOutboundNavigation(m, e) : B(o);\n      } else B(0);\n    },\n    onEscape: F,\n    focusOnMount: N\n  }), {\n    activeIndex: G ? w : -1,\n    onSelectionAction: z,\n    isInitialActiveState: K\n  };\n}\nexport { l as default };","map":{"version":3,"names":["l","m","ref","v","itemsCount","b","numberOfItemsInLine","I","onItemClicked","p","getItemByIndex","x","e","g","focusOnMount","N","O","focusItemIndexOnMount","y","j","disabledIndexes","C","L","n","k","K","M","A","o","S","h","w","B","D","E","G","H","_","t","u","i","current","F","r","blur","P","d","lastNavigationDirectionRef","R","s","direction","T","q","c","eventName","callback","focus","z","arguments","length","J","a","onSelectionKey","onArrowNavigation","f","activeIndex","nextIndex","isOutbound","onOutboundNavigation","onEscape","onSelectionAction","isInitialActiveState","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/hooks/useGridKeyboardNavigation/useGridKeyboardNavigation.ts"],"sourcesContent":["import { MutableRefObject, ReactElement, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { GridKeyboardNavigationContext } from \"../../components/GridKeyboardNavigationContext/GridKeyboardNavigationContext\";\nimport useFullKeyboardListeners, { NavDirections } from \"../../hooks/useFullKeyboardListeners\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport {\n  calcActiveIndexAfterArrowNavigation,\n  getActiveIndexFromInboundNavigation\n} from \"./gridKeyboardNavigationHelper\";\nimport { useLastNavigationDirection } from \"../../components/Menu/Menu/hooks/useLastNavigationDirection\";\n\nconst NO_ACTIVE_INDEX = -1;\n\n/**\n * A hook which is used for accessible keyboard navigation. Useful for components rendering a list of items that can be navigated and selected with a keyboard.\n * @param {Object} options\n * @param {React.MutableRefObject} options.ref - the reference for the component that listens to keyboard\n * @param {number} options.itemsCount - the number of items\n * @param {number} options.numberOfItemsInLine - the number of items on each line of the grid\n * @param {function} options.onItemClicked - the callback for selecting an item. It will be called when an active item is selected, for example with \"Enter\".\n * @param {function} options.getItemByIndex - a function which gets an index as a param, and returns the item on that index\n * @param {boolean=} options.focusOnMount - if true, the referenced element will be focused when mounted\n * @param {number=} options.focusItemIndexOnMount - optional item index to focus when mounted. Only works with \"options.focusOnMount\".\n * @param {number[]=} options.disabledIndexes - optional array of disabled indices, which will be skipped while navigating.\n * @returns {useGridKeyboardNavigationResult}\n *\n * @typedef useGridKeyboardNavigationResult\n * @property {number} activeIndex - the currently active index\n * @property {boolean} isInitialActiveState - if true, the currently active element was due to an initial mounting index option. See \"options.focusItemIndexOnMount\".\n * @property {(index: number, isKeyboardAction?: boolean) => void} onSelectionAction - the callback which should be used to select an item.\n * It should be called with the selected item's index. Use this callback for onClick handlers, for example.\n * The \"isKeyboardAction\" can be used to indicate a keyboard selection, which will affect the currently active index.\n */\nexport default function useGridKeyboardNavigation({\n  ref,\n  itemsCount,\n  numberOfItemsInLine,\n  onItemClicked, // the callback to call when an item is selected\n  getItemByIndex = (_index: number) => {},\n  focusOnMount = false,\n  focusItemIndexOnMount = NO_ACTIVE_INDEX,\n  disabledIndexes = []\n}: {\n  ref: MutableRefObject<HTMLElement>;\n  itemsCount: number;\n  numberOfItemsInLine: number;\n  onItemClicked: (element: HTMLElement | ReactElement | void | string, index: number) => void;\n  getItemByIndex: (index: number | void) => HTMLElement | ReactElement | void | string;\n  focusOnMount?: boolean;\n  focusItemIndexOnMount?: number;\n  disabledIndexes?: number[];\n}) {\n  const [isInitialActiveState, setIsInitialActiveState] = useState(\n    focusOnMount && focusItemIndexOnMount !== NO_ACTIVE_INDEX\n  );\n  const skippedInitialActiveIndexChange = useRef(false);\n  const [activeIndex, setActiveIndex] = useState(isInitialActiveState ? focusItemIndexOnMount : NO_ACTIVE_INDEX);\n  const [isUsingKeyboardNav, setIsUsingKeyboardNav] = useState(true);\n\n  const keyboardContext = useContext(GridKeyboardNavigationContext);\n\n  const onArrowNavigation = (direction: NavDirections) => {\n    setIsUsingKeyboardNav(true);\n    if (activeIndex === NO_ACTIVE_INDEX) {\n      setActiveIndex(0);\n      return;\n    }\n\n    const { isOutbound, nextIndex } = calcActiveIndexAfterArrowNavigation({\n      activeIndex,\n      itemsCount,\n      numberOfItemsInLine,\n      direction,\n      disabledIndexes\n    });\n    if (isOutbound) {\n      keyboardContext?.onOutboundNavigation(ref, direction);\n    } else {\n      setActiveIndex(nextIndex);\n    }\n  };\n\n  useEffect(() => {\n    if (!skippedInitialActiveIndexChange.current) {\n      skippedInitialActiveIndexChange.current = true;\n      return;\n    }\n    // if the active state changes, this is no longer the initial active state\n    setIsInitialActiveState(false);\n  }, [activeIndex]);\n\n  const blurTargetElement = useCallback(() => ref.current?.blur(), [ref]);\n\n  const { lastNavigationDirectionRef } = useLastNavigationDirection();\n  const onFocus = useCallback(() => {\n    const direction = lastNavigationDirectionRef.current;\n    if (direction) {\n      // if we did not already focused on any grid item, set focus according to the item which selected\n      if (activeIndex === -1) {\n        const newIndex = getActiveIndexFromInboundNavigation({ direction, numberOfItemsInLine, itemsCount });\n        setActiveIndex(newIndex);\n      }\n      setIsUsingKeyboardNav(true);\n      return;\n    }\n    if (activeIndex === NO_ACTIVE_INDEX) {\n      setActiveIndex(0);\n    }\n  }, [activeIndex, itemsCount, lastNavigationDirectionRef, numberOfItemsInLine]);\n\n  const onMouseDown = useCallback(() => {\n    // If the user clicked on the grid element we assume that that what will caused the focus\n    setIsUsingKeyboardNav(false);\n  }, [setIsUsingKeyboardNav]);\n\n  const onBlur = useCallback(() => {\n    // If we lose focus we will return to isUsingKeyboardNav default mode which is that any interaction\n    // with the grid always done by keyboard, unless we clicked on the grid element before that with a mouse\n    setIsUsingKeyboardNav(true);\n    setActiveIndex(NO_ACTIVE_INDEX);\n  }, [setActiveIndex]);\n\n  useEventListener({ eventName: \"focus\", callback: onFocus, ref });\n  useEventListener({ eventName: \"mousedown\", callback: onMouseDown, ref });\n  useEventListener({ eventName: \"blur\", callback: onBlur, ref });\n\n  useEffect(() => {\n    if (activeIndex > -1) {\n      ref.current?.focus();\n    }\n  }, [activeIndex, ref]);\n\n  const onSelectionAction = useCallback(\n    (index: number, isKeyboardAction = false) => {\n      setIsUsingKeyboardNav(isKeyboardAction);\n      setActiveIndex(index);\n\n      onItemClicked(getItemByIndex(index), index);\n    },\n    [setActiveIndex, onItemClicked, getItemByIndex]\n  );\n\n  const onKeyboardSelection = useCallback(() => {\n    if (!isUsingKeyboardNav) {\n      return;\n    }\n    return onSelectionAction(activeIndex, true);\n  }, [isUsingKeyboardNav, onSelectionAction, activeIndex]);\n\n  useFullKeyboardListeners({\n    ref,\n    onSelectionKey: onKeyboardSelection,\n    onArrowNavigation,\n    onEscape: blurTargetElement,\n    focusOnMount\n  });\n\n  // if the user is not using keyboard nav, the consumers should not treat the index as active\n  const externalActiveIndex = isUsingKeyboardNav ? activeIndex : NO_ACTIVE_INDEX;\n  return {\n    activeIndex: externalActiveIndex,\n    onSelectionAction,\n    isInitialActiveState\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}