{"ast":null,"code":"import { defineProperty as s } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsx as e } from \"react/jsx-runtime\";\nimport { camelCase as t } from \"lodash-es\";\nimport { getTestId as i, ComponentDefaultTestId as r } from \"../../tests/testIds.js\";\nimport o from \"classnames\";\nimport { SkeletonType as l, SKELETON_SIZES as a, TextSkeletonSize as d, SKELETON_CUSTOM_SIZE as m } from \"./SkeletonConstants.js\";\nimport { getStyle as p } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport { withStaticProps as n } from \"../../types/withStaticProps.js\";\nimport u from \"./Skeleton.module.scss.js\";\nvar c = n(function (n) {\n  var c = n.type,\n    f = void 0 === c ? l.RECTANGLE : c,\n    h = n.size,\n    j = void 0 === h ? a.CUSTOM : h,\n    v = n.className,\n    N = n.wrapperClassName,\n    y = n.width,\n    C = n.height,\n    E = n.fullWidth,\n    O = void 0 !== E && E,\n    S = n.id,\n    b = n[\"data-testid\"],\n    g = Object.values(l).includes(f) ? f : l.RECTANGLE,\n    w = Object.values(d).includes(j) ? j : m;\n  return e(\"div\", Object.assign({\n    id: S,\n    className: o(u.skeleton, N, s({}, u.fullWidth, O)),\n    \"data-testid\": b || i(r.SKELETON, S)\n  }, {\n    children: e(\"div\", {\n      className: o(u[g], p(u, t(g + \"-\" + w)), v, s({}, u.fullWidth, O)),\n      style: {\n        width: y,\n        height: C\n      }\n    })\n  }));\n}, {\n  types: l,\n  sizes: a\n});\nexport { c as default };","map":{"version":3,"names":["c","n","type","f","l","RECTANGLE","h","size","j","a","CUSTOM","v","className","N","wrapperClassName","y","width","C","height","E","fullWidth","O","S","id","b","g","Object","values","includes","w","d","m","e","assign","o","u","skeleton","s","i","r","SKELETON","children","p","t","style","types","sizes","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC } from \"react\";\nimport {\n  SKELETON_SIZES,\n  SkeletonSizeType,\n  SkeletonType,\n  SKELETON_CUSTOM_SIZE,\n  TextSkeletonSize\n} from \"./SkeletonConstants\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Skeleton.module.scss\";\n\ninterface SkeletonProps extends VibeComponentProps {\n  type?: SkeletonType;\n  size?: SkeletonSizeType;\n  width?: number;\n  height?: number;\n  wrapperClassName?: string;\n  /**\n   * Is the skeleton wrapper width equal to its container\n   */\n  fullWidth?: boolean;\n}\n\nconst Skeleton: FC<SkeletonProps> & {\n  types?: typeof SkeletonType;\n  sizes?: typeof SKELETON_SIZES;\n} = ({\n  type = SkeletonType.RECTANGLE,\n  size = SKELETON_SIZES.CUSTOM,\n  className,\n  wrapperClassName,\n  width,\n  height,\n  fullWidth = false,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const skeletonType = Object.values(SkeletonType).includes(type) ? type : SkeletonType.RECTANGLE;\n\n  // Skeleton has sizes only for text type, other types support only custom size\n  const skeletonSize = (Object.values(TextSkeletonSize) as string[]).includes(size) ? size : SKELETON_CUSTOM_SIZE;\n  return (\n    <div\n      id={id}\n      className={cx(styles.skeleton, wrapperClassName, { [styles.fullWidth]: fullWidth })}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SKELETON, id)}\n    >\n      <div\n        className={cx(styles[skeletonType], getStyle(styles, camelCase(skeletonType + \"-\" + skeletonSize)), className, {\n          [styles.fullWidth]: fullWidth\n        })}\n        style={{ width, height }}\n      />\n    </div>\n  );\n};\n\nexport default withStaticProps(Skeleton, {\n  types: SkeletonType,\n  sizes: SKELETON_SIZES\n});\n"],"mappings":";;;;;;;;;AA2BA,IAkCeA,CAAA,GAAAC,CAAA,CA/BX,UAHUA,CAAA;EAaT,IAAAD,CAAA,GAAAC,CAAA,CATHC,IAAA;IAAAC,CAAA,QAAI,MAAAH,CAAA,GAAGI,CAAA,CAAaC,SAAA,GAASL,CAAA;IAAAM,CAAA,GAAAL,CAAA,CAC7BM,IAAA;IAAAC,CAAA,QAAI,MAAAF,CAAA,GAAGG,CAAA,CAAeC,MAAA,GAAMJ,CAAA;IAC5BK,CAAA,GAASV,CAAA,CAATW,SAAA;IACAC,CAAA,GAAgBZ,CAAA,CAAhBa,gBAAA;IACAC,CAAA,GAAKd,CAAA,CAALe,KAAA;IACAC,CAAA,GAAMhB,CAAA,CAANiB,MAAA;IAAMC,CAAA,GAAAlB,CAAA,CACNmB,SAAA;IAAAC,CAAA,QAAY,MAAHF,CAAA,IAAQA,CAAA;IACjBG,CAAA,GAAErB,CAAA,CAAFsB,EAAA;IACeC,CAAA,GAAUvB,CAAA,CAAzB;IAEMwB,CAAA,GAAeC,MAAA,CAAOC,MAAA,CAAOvB,CAAA,EAAcwB,QAAA,CAASzB,CAAA,IAAQA,CAAA,GAAOC,CAAA,CAAaC,SAAA;IAGhFwB,CAAA,GAAgBH,MAAA,CAAOC,MAAA,CAAOG,CAAA,EAA+BF,QAAA,CAASpB,CAAA,IAAQA,CAAA,GAAOuB,CAAA;EAC3F,OACEC,CAAA,QAAAN,MAAA,CAAAO,MAAA;IACEV,EAAA,EAAID,CAAA;IACJV,SAAA,EAAWsB,CAAA,CAAGC,CAAA,CAAOC,QAAA,EAAUvB,CAAA,EAAgBwB,CAAA,KAAKF,CAAA,CAAOf,SAAA,EAAYC,CAAA;IAC1D,eAAAG,CAAA,IAAcc,CAAA,CAAUC,CAAA,CAAuBC,QAAA,EAAUlB,CAAA;EAAA,GAEtE;IAAAmB,QAAA,EAAAT,CAAA;MACEpB,SAAA,EAAWsB,CAAA,CAAGC,CAAA,CAAOV,CAAA,GAAeiB,CAAA,CAASP,CAAA,EAAQQ,CAAA,CAAUlB,CAAA,GAAe,MAAMI,CAAA,IAAgBlB,CAAA,EAAS0B,CAAA,CAC1G,IAAAF,CAAA,CAAOf,SAAA,EAAYC,CAAA;MAEtBuB,KAAA,EAAO;QAAE5B,KAAA,EAAAD,CAAA;QAAOG,MAAA,EAAAD;MAAA;IAAA;EAAA,GAIxB;AAAA,GAEyC;EACvC4B,KAAA,EAAOzC,CAAA;EACP0C,KAAA,EAAOrC;AAAA;AAAA,SAAAT,CAAA,IAAA+C,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}