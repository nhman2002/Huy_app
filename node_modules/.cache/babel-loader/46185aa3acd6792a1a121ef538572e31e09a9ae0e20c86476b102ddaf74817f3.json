{"ast":null,"code":"import { defineProperty as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsxs as r, jsx as t } from \"react/jsx-runtime\";\nimport { getStyle as o } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport n from \"classnames\";\nimport s, { forwardRef as i, useMemo as a } from \"react\";\nimport l from \"../Button/Button.js\";\nimport c from \"../Icon/Icon.js\";\nimport m from \"../Icon/Icons/components/CloseSmall.js\";\nimport { AlertBannerBackgroundColor as d } from \"./AlertBannerConstants.js\";\nimport { NOOP as p } from \"../../utils/function-utils.js\";\nimport { ComponentDefaultTestId as u } from \"../../tests/constants.js\";\nimport { getTestId as f } from \"../../tests/testIds.js\";\nimport { withStaticProps as b } from \"../../types/withStaticProps.js\";\nimport j from \"./AlertBanner.module.scss.js\";\nimport A from \"../Text/Text.js\";\nimport { AlertBannerContext as B } from \"./AlertBannerContext.js\";\nvar N = i(function (i, d) {\n    var b = i.children,\n      g = i.className,\n      C = i.backgroundColor,\n      R = void 0 === C ? N.backgroundColors.PRIMARY : C,\n      v = i.onClose,\n      I = void 0 === v ? p : v,\n      O = i.ariaLabel,\n      y = void 0 === O ? \"\" : O,\n      T = i.closeButtonAriaLabel,\n      h = void 0 === T ? \"Close\" : T,\n      k = i.isCloseHidden,\n      E = void 0 !== k && k,\n      x = i.id,\n      _ = i[\"data-testid\"],\n      L = a(function () {\n        return n(g, j.alertBanner, o(j, R));\n      }, [g, R]),\n      D = R === N.backgroundColors.DARK,\n      P = R === N.backgroundColors.WARNING,\n      M = a(function () {\n        return P ? A.colors.FIXED_DARK : D ? A.colors.ON_INVERTED : A.colors.ON_PRIMARY;\n      }, [D, P]),\n      S = a(function () {\n        return s.Children.toArray(b).filter(function (e) {\n          return !(!e.type.isAlertBannerItem && \"MDXCreateElement\" !== e.type.displayName) || (console.error(\"Alert banner child is not supported. Please use AlertBannerText, AlertBannerLink or AlertBannerButton.\", e), !1);\n        }).map(function (e, r) {\n          return s.cloneElement(e, Object.assign(Object.assign({}, null == e ? void 0 : e.props), {\n            marginLeft: r > 0,\n            isDarkBackground: D\n          }));\n        });\n      }, [b, D]);\n    return r(A, Object.assign({\n      type: A.types.TEXT2,\n      color: M,\n      ref: d,\n      className: L,\n      role: \"banner\",\n      \"aria-label\": y || \"banner\",\n      id: x,\n      \"data-testid\": _ || f(u.ALERT_BANNER, x)\n    }, {\n      children: [t(B.Provider, Object.assign({\n        value: {\n          textColor: M\n        }\n      }, {\n        children: t(\"div\", Object.assign({\n          className: n(j.content)\n        }, {\n          children: S.map(function (r, o) {\n            var s = r.type.isAlertBannerText;\n            return t(\"div\", Object.assign({\n              className: n(j.contentItem, e({}, j.contentItemText, s))\n            }, {\n              children: s ? t(\"div\", Object.assign({\n                className: n(j.ellipsis)\n              }, {\n                children: r\n              })) : r\n            }), o);\n          })\n        }))\n      })), t(\"div\", Object.assign({\n        className: n(j.closeButtonWrapper)\n      }, {\n        children: E ? null : t(l, Object.assign({\n          \"data-testid\": \"alert-banner-close-button\",\n          className: n(j.closeBtn),\n          onClick: I,\n          size: l.sizes.SMALL,\n          kind: l.kinds.TERTIARY,\n          color: D ? l.colors.ON_INVERTED_BACKGROUND : l.colors.ON_PRIMARY_COLOR,\n          ariaLabel: h\n        }, {\n          children: t(c, {\n            iconType: c.type.SVG,\n            clickable: !1,\n            icon: m,\n            iconSize: \"20px\",\n            ignoreFocusStyle: !0\n          })\n        }))\n      }))]\n    }));\n  }),\n  g = b(N, {\n    backgroundColors: d\n  });\nexport { g as default };","map":{"version":3,"names":["N","i","d","b","children","g","className","C","backgroundColor","R","backgroundColors","PRIMARY","v","onClose","I","p","O","ariaLabel","y","T","closeButtonAriaLabel","h","k","isCloseHidden","E","x","id","_","L","a","n","j","alertBanner","o","D","DARK","P","WARNING","M","A","colors","FIXED_DARK","ON_INVERTED","ON_PRIMARY","S","s","Children","toArray","filter","e","type","isAlertBannerItem","displayName","console","error","map","r","cloneElement","Object","assign","props","marginLeft","isDarkBackground","types","TEXT2","color","ref","role","f","u","ALERT_BANNER","t","B","Provider","value","textColor","content","isAlertBannerText","contentItem","contentItemText","ellipsis","closeButtonWrapper","l","closeBtn","onClick","size","sizes","SMALL","kind","kinds","TERTIARY","ON_INVERTED_BACKGROUND","ON_PRIMARY_COLOR","c","iconType","SVG","clickable","icon","m","iconSize","ignoreFocusStyle","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/AlertBanner/AlertBanner.tsx"],"sourcesContent":["import { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport cx from \"classnames\";\nimport React, { ForwardedRef, forwardRef, ReactElement, useMemo } from \"react\";\nimport Button from \"../../components/Button/Button\";\nimport Icon from \"../../components/Icon/Icon\";\nimport CloseSmall from \"../../components/Icon/Icons/components/CloseSmall\";\nimport { AlertBannerBackgroundColor } from \"./AlertBannerConstants\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { AlertBannerLinkProps } from \"./AlertBannerLink/AlertBannerLink\";\nimport { AlertBannerButtonProps } from \"./AlertBannerButton/AlertBannerButton\";\nimport { AlertBannerTextProps } from \"./AlertBannerText/AlertBannerText\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { VibeComponent, withStaticProps } from \"../../types\";\nimport styles from \"./AlertBanner.module.scss\";\nimport Text from \"../Text/Text\";\nimport { AlertBannerContext } from \"./AlertBannerContext\";\n\ninterface AlertBannerProps extends VibeComponentProps {\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  backgroundColor?: AlertBannerBackgroundColor;\n  isCloseHidden?: boolean;\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  closeButtonAriaLabel?: string;\n  onClose?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  children?: ReactElement<AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps>;\n}\n\nconst AlertBanner: VibeComponent<AlertBannerProps> & {\n  backgroundColors?: typeof AlertBannerBackgroundColor;\n} = forwardRef(\n  (\n    {\n      children: originalChildren,\n      className,\n      backgroundColor = AlertBanner.backgroundColors.PRIMARY,\n      onClose = NOOP,\n      ariaLabel = \"\",\n      closeButtonAriaLabel = \"Close\",\n      isCloseHidden = false,\n      id,\n      \"data-testid\": dataTestId\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const classNames = useMemo(() => {\n      return cx(className, styles.alertBanner, getStyle(styles, backgroundColor));\n    }, [className, backgroundColor]);\n\n    const isDarkBackground = backgroundColor === AlertBanner.backgroundColors.DARK;\n    const isFixedColor = backgroundColor === AlertBanner.backgroundColors.WARNING;\n    const textColor = useMemo(() => {\n      if (isFixedColor) {\n        return Text.colors.FIXED_DARK;\n      }\n      return isDarkBackground ? Text.colors.ON_INVERTED : Text.colors.ON_PRIMARY;\n    }, [isDarkBackground, isFixedColor]);\n    const children = useMemo(() => {\n      const allChildren = React.Children.toArray(originalChildren) as ReactElement[];\n      const filteredChildren = allChildren.filter(\n        (\n          child: ReactElement & {\n            type: Record<string, unknown>;\n          }\n        ) => {\n          if (child.type.isAlertBannerItem || child.type.displayName === \"MDXCreateElement\") return true;\n          console.error(\n            \"Alert banner child is not supported. Please use AlertBannerText, AlertBannerLink or AlertBannerButton.\",\n            child\n          );\n          return false;\n        }\n      );\n\n      return filteredChildren.map((child, index) => {\n        return React.cloneElement(child, {\n          ...child?.props,\n          marginLeft: index > 0,\n          isDarkBackground\n        });\n      });\n    }, [originalChildren, isDarkBackground]);\n\n    return (\n      <Text\n        type={Text.types.TEXT2}\n        color={textColor}\n        ref={ref}\n        className={classNames}\n        role=\"banner\"\n        aria-label={ariaLabel || \"banner\"}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.ALERT_BANNER, id)}\n      >\n        <AlertBannerContext.Provider value={{ textColor }}>\n          <div className={cx(styles.content)}>\n            {children.map(\n              (\n                child: ReactElement & {\n                  type: Record<string, unknown>;\n                },\n                index\n              ) => {\n                const childTypeIsAlertBannerText = child.type.isAlertBannerText;\n                return (\n                  <div\n                    key={index}\n                    className={cx(styles.contentItem, {\n                      [styles.contentItemText]: childTypeIsAlertBannerText\n                    })}\n                  >\n                    {childTypeIsAlertBannerText ? <div className={cx(styles.ellipsis)}>{child}</div> : child}\n                  </div>\n                );\n              }\n            )}\n          </div>\n        </AlertBannerContext.Provider>\n        <div className={cx(styles.closeButtonWrapper)}>\n          {isCloseHidden ? null : (\n            <Button\n              data-testid=\"alert-banner-close-button\"\n              className={cx(styles.closeBtn)}\n              onClick={onClose}\n              size={Button.sizes.SMALL}\n              kind={Button.kinds.TERTIARY}\n              color={isDarkBackground ? Button.colors.ON_INVERTED_BACKGROUND : Button.colors.ON_PRIMARY_COLOR}\n              ariaLabel={closeButtonAriaLabel}\n            >\n              <Icon iconType={Icon.type.SVG} clickable={false} icon={CloseSmall} iconSize=\"20px\" ignoreFocusStyle />\n            </Button>\n          )}\n        </div>\n      </Text>\n    );\n  }\n);\n\nexport default withStaticProps(AlertBanner, { backgroundColors: AlertBannerBackgroundColor });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}