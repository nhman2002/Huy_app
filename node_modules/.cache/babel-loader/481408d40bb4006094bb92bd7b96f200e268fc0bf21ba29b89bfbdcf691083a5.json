{"ast":null,"code":"import { defineProperty as e, toConsumableArray as r } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsx as a, Fragment as t, jsxs as s } from \"react/jsx-runtime\";\nimport { forwardRef as i, useMemo as o } from \"react\";\nimport l from \"classnames\";\nimport { getStyle as n } from \"../../../helpers/typesciptCssModulesHelper.js\";\nimport m from \"../PercentageLabel/PercentageLabel.js\";\nimport { ProgressBarStyle as d, ProgressBarType as c } from \"./LinearProgressBarConstants.js\";\nimport { calculatePercentage as u, getProgressBarClassNames as p } from \"./LinearProgressBarHelpers.js\";\nimport v from \"./Bar/Bar.js\";\nimport { withStaticProps as f } from \"../../../types/withStaticProps.js\";\nimport { ComponentDefaultTestId as b } from \"../../../tests/constants.js\";\nimport { getTestId as y } from \"../../../tests/testIds.js\";\nimport R from \"./LinearProgressBar.module.scss.js\";\nimport { SIZES as j } from \"../../../constants/sizes.js\";\nvar P = f(i(function (i, f) {\n  var P = i.min,\n    A = void 0 === P ? 0 : P,\n    N = i.max,\n    S = void 0 === N ? 100 : N,\n    g = i.value,\n    L = void 0 === g ? 0 : g,\n    _ = i.valueSecondary,\n    h = void 0 === _ ? 0 : _,\n    B = i.animated,\n    x = void 0 === B || B,\n    E = i.barStyle,\n    I = void 0 === E ? d.PRIMARY : E,\n    M = i.className,\n    O = i.size,\n    Y = void 0 === O ? j.SMALL : O,\n    C = i.indicateProgress,\n    z = void 0 !== C && C,\n    H = i.multi,\n    w = void 0 !== H && H,\n    D = i.multiValues,\n    W = void 0 === D ? [] : D,\n    G = i.ariaLabel,\n    T = void 0 === G ? \"\" : G,\n    V = i.id,\n    k = i.fullWidth,\n    q = void 0 !== k && k,\n    F = i[\"data-testid\"],\n    J = o(function () {\n      return l(R.wrapper, e(e({}, n(R, \"\" + Y), Y), R.fullWidth, q), M);\n    }, [Y, q, M]),\n    K = o(function () {\n      if (w) {\n        var e = W && W.length && W[0].value;\n        return null == e ? 0 : u(e, A, S);\n      }\n      return null == L ? 0 : u(L, A, S);\n    }, [L, A, S, w, W]),\n    Q = o(function () {\n      return w ? a(t, {\n        children: r(W).reverse().map(function (e, r) {\n          var t = e.value,\n            s = e.color;\n          return a(v, {\n            className: p(t),\n            barStyle: d.NONE,\n            value: t,\n            animated: x,\n            type: c.PRIMARY,\n            color: s,\n            min: A,\n            max: S,\n            id: \"bar_\".concat(s, \"_\").concat(r)\n          }, \"bar_\".concat(s, \"_\").concat(r));\n        })\n      }) : null;\n    }, [A, S, x, W, w]),\n    U = z ? a(m, {\n      forElement: \"linear-progress-bar\",\n      value: K\n    }) : null,\n    X = w ? null : s(t, {\n      children: [a(v, {\n        className: p(L),\n        barLabelName: T,\n        barStyle: I,\n        value: h,\n        animated: x,\n        type: c.SECONDARY,\n        min: A,\n        max: S,\n        \"data-testid\": b.BAR_SECONDARY\n      }), a(v, {\n        className: p(L),\n        barStyle: I,\n        value: L,\n        animated: x,\n        type: c.PRIMARY,\n        min: A,\n        max: S,\n        \"data-testid\": b.BAR_PRIMARY\n      })]\n    });\n  return s(\"div\", Object.assign({\n    className: J,\n    ref: f,\n    id: V,\n    \"data-testsid\": F || y(b.LINEAR_PROGRESS_BAR, V)\n  }, {\n    children: [s(\"div\", Object.assign({\n      className: R.container\n    }, {\n      children: [X, Q]\n    })), U]\n  }));\n}), {\n  styles: d,\n  barStyles: d,\n  types: c,\n  barTypes: c,\n  sizes: j\n});\nexport { P as default };","map":{"version":3,"names":["P","f","i","min","A","N","max","S","g","value","L","_","valueSecondary","h","B","animated","x","E","barStyle","I","d","PRIMARY","M","className","O","size","Y","j","SMALL","C","indicateProgress","z","H","multi","w","D","multiValues","W","G","ariaLabel","T","V","id","k","fullWidth","q","F","J","o","l","R","wrapper","e","n","K","length","u","Q","a","t","children","r","reverse","map","s","color","v","p","NONE","type","c","concat","U","m","forElement","X","barLabelName","SECONDARY","b","BAR_SECONDARY","BAR_PRIMARY","Object","assign","ref","y","LINEAR_PROGRESS_BAR","container","styles","barStyles","types","barTypes","sizes","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../../constants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport PercentageLabel from \"../PercentageLabel/PercentageLabel\";\nimport { ProgressBarStyle, ProgressBarType } from \"./LinearProgressBarConstants\";\nimport { calculatePercentage, getProgressBarClassNames, Size } from \"./LinearProgressBarHelpers\";\nimport Bar from \"./Bar/Bar\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport styles from \"./LinearProgressBar.module.scss\";\n\ninterface LinearProgressBarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).\n   */\n  barStyle?: ProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The progress bar secondary value.\n   */\n  valueSecondary?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  /**\n   * Determine the progress bar height (Supported options exposed through `LinearProgressBar.sizes`)\n   */\n  size?: Size;\n  /**\n   * Show progress bar progression in percentages\n   */\n  indicateProgress?: boolean;\n  /**\n   * Use multiple bars.\n   * ***Note:*** `value`, `valueSecondary` & `barStyle` won't be used\n   */\n  multi?: boolean;\n  /**\n   * Array of bar value objects {\n   * `value` - The progress value,\n   * `color` - hex [`#000000` ~ `#ffffff`] of the current bar\n   * }\n   */\n  multiValues?: {\n    /**\n     * The progress bar current value.\n     */\n    value?: number;\n    /**\n     * The bar color in hex - #000000 ~ #ffffff\n     */\n    color?: string;\n  }[];\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  /** Is the progress bar spread across the entire container width (width: 100%) */\n  fullWidth?: boolean;\n}\n\nconst LinearProgressBar: VibeComponent<LinearProgressBarProps, HTMLDivElement> & {\n  styles?: typeof ProgressBarStyle;\n  barStyles?: typeof ProgressBarStyle;\n  types?: typeof ProgressBarType;\n  barTypes?: typeof ProgressBarType;\n  sizes?: typeof SIZES;\n} = forwardRef(\n  (\n    {\n      min = 0,\n      max = 100,\n      value = 0,\n      valueSecondary = 0,\n      animated = true,\n      barStyle = ProgressBarStyle.PRIMARY,\n      className,\n      size = SIZES.SMALL,\n      indicateProgress = false,\n      multi = false,\n      multiValues = [],\n      ariaLabel = \"\",\n      id,\n      fullWidth = false,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const wrapperClassName = useMemo(() => {\n      return cx(\n        styles.wrapper,\n        {\n          [getStyle(styles, size.toString())]: size,\n          [styles.fullWidth]: fullWidth\n        },\n        className\n      );\n    }, [size, fullWidth, className]);\n\n    const valuePercentage = useMemo(() => {\n      if (multi) {\n        const firstValue = multiValues && multiValues.length && multiValues[0].value;\n        if (firstValue === null || firstValue === undefined) return 0;\n        return calculatePercentage(firstValue, min, max);\n      }\n      if (value === null || value === undefined) return 0;\n      return calculatePercentage(value, min, max);\n    }, [value, min, max, multi, multiValues]);\n\n    const renderMultiBars = useMemo(() => {\n      if (!multi) return null;\n      return (\n        <>\n          {[...multiValues].reverse().map(({ value: baseValue, color }, i) => (\n            <Bar\n              className={getProgressBarClassNames(baseValue)}\n              barStyle={ProgressBarStyle.NONE}\n              value={baseValue}\n              animated={animated}\n              type={ProgressBarType.PRIMARY}\n              color={color}\n              min={min}\n              max={max}\n              /* eslint-disable-next-line react/no-array-index-key */\n              id={`bar_${color}_${i}`}\n              key={`bar_${color}_${i}`}\n            />\n          ))}\n        </>\n      );\n    }, [min, max, animated, multiValues, multi]);\n\n    const renderPercentage = indicateProgress ? (\n      <PercentageLabel forElement=\"linear-progress-bar\" value={valuePercentage} />\n    ) : null;\n\n    const renderBaseBars = !multi ? (\n      <>\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barLabelName={ariaLabel}\n          barStyle={barStyle}\n          value={valueSecondary}\n          animated={animated}\n          type={ProgressBarType.SECONDARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_SECONDARY}\n        />\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barStyle={barStyle}\n          value={value}\n          animated={animated}\n          type={ProgressBarType.PRIMARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_PRIMARY}\n        />\n      </>\n    ) : null;\n\n    return (\n      <div\n        className={wrapperClassName}\n        ref={ref}\n        id={id}\n        data-testsid={dataTestId || getTestId(ComponentDefaultTestId.LINEAR_PROGRESS_BAR, id)}\n      >\n        <div className={styles.container}>\n          {renderBaseBars}\n          {renderMultiBars}\n        </div>\n        {renderPercentage}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(LinearProgressBar, {\n  styles: ProgressBarStyle,\n  barStyles: ProgressBarStyle,\n  types: ProgressBarType,\n  barTypes: ProgressBarType,\n  sizes: SIZES\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}