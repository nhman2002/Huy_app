{"ast":null,"code":"import { jsx as e } from \"react/jsx-runtime\";\nimport { forwardRef as a } from \"react\";\nimport r from \"classnames\";\nimport { noop as s } from \"lodash-es\";\nimport { Switch as t } from \"../Switch/Switch.js\";\nimport { MockToggle as o } from \"./MockToggle.js\";\nimport { backwardCompatibilityForProperties as i } from \"../../helpers/backwardCompatibilityForProperties.js\";\nimport d from \"./Toggle.module.scss.js\";\nimport { getTestId as l, ComponentDefaultTestId as m } from \"../../tests/testIds.js\";\nvar n = a(function (a, n) {\n  var c = a.id,\n    f = a.toggleSelectedClassName,\n    p = a.isDefaultSelected,\n    v = void 0 === p || p,\n    b = a.isSelected,\n    g = a.onChange,\n    u = void 0 === g ? s : g,\n    C = a.value,\n    h = a.name,\n    O = a.disabled,\n    j = a.isDisabled,\n    N = a.ariaLabel,\n    T = a.ariaControls,\n    x = a.areLabelsHidden,\n    w = void 0 !== x && x,\n    L = a.onOverrideText,\n    S = void 0 === L ? \"On\" : L,\n    k = a.offOverrideText,\n    D = void 0 === k ? \"Off\" : k,\n    G = a[\"data-testid\"],\n    H = i([a.className, a.componentClassName]),\n    I = i([O, j], !1),\n    y = r(d.wrapper),\n    E = r(d.toggleInput);\n  return e(t, Object.assign({\n    defaultChecked: v,\n    checked: b,\n    id: c,\n    wrapperClassName: y,\n    onChange: u,\n    value: C,\n    name: h,\n    disabled: I,\n    ariaLabel: N,\n    ariaControls: T,\n    inputClassName: E,\n    ref: n,\n    \"data-testid\": G || l(m.TOGGLE)\n  }, {\n    children: e(o, {\n      areLabelsHidden: w,\n      offOverrideText: D,\n      onOverrideText: S,\n      disabled: I,\n      className: H,\n      selectedClassName: f\n    })\n  }));\n});\nexport { n as default };","map":{"version":3,"names":["n","a","c","id","f","toggleSelectedClassName","p","isDefaultSelected","v","b","isSelected","g","onChange","u","s","C","value","h","name","O","disabled","j","isDisabled","N","ariaLabel","T","ariaControls","x","areLabelsHidden","w","L","onOverrideText","S","k","offOverrideText","D","G","H","i","className","componentClassName","I","y","r","d","wrapper","E","toggleInput","e","t","Object","assign","defaultChecked","checked","wrapperClassName","inputClassName","ref","l","m","TOGGLE","children","o","selectedClassName","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport { Switch } from \"../Switch/Switch\";\nimport { MockToggle } from \"./MockToggle\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { VibeComponent, VibeComponentProps } from \"../../types\";\nimport styles from \"./Toggle.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\n\ninterface ToggleProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  componentClassName?: string;\n  /**\n   * ClassName to override styles of selected toggle\n   */\n  toggleSelectedClassName?: string;\n  isDefaultSelected?: boolean;\n  isSelected?: boolean;\n  onChange?: (value: boolean) => void;\n  value?: string;\n  name?: string;\n  /**\n   * @deprecated - use disabled instead\n   */\n  isDisabled?: boolean;\n  disabled?: boolean;\n  areLabelsHidden?: boolean;\n  onOverrideText?: string;\n  offOverrideText?: string;\n  ariaLabel?: string;\n  ariaControls?: string;\n}\n\nconst Toggle: VibeComponent<ToggleProps, HTMLInputElement> = forwardRef(\n  (\n    {\n      id,\n      // Backward compatibility for props naming\n      componentClassName,\n      className,\n      toggleSelectedClassName,\n      isDefaultSelected = true,\n      isSelected,\n      onChange = NOOP,\n      value,\n      name,\n      disabled,\n      // Backward compatibility for props naming\n      isDisabled,\n      ariaLabel,\n      ariaControls,\n      areLabelsHidden = false,\n      onOverrideText = \"On\",\n      offOverrideText = \"Off\",\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const overrideClassName = backwardCompatibilityForProperties([className, componentClassName]) as string;\n    const overrideDisabled = backwardCompatibilityForProperties([disabled, isDisabled], false) as boolean;\n    const wrapperClassName = cx(styles.wrapper);\n    const inputClassName = cx(styles.toggleInput);\n\n    return (\n      <Switch\n        defaultChecked={isDefaultSelected}\n        checked={isSelected}\n        id={id}\n        wrapperClassName={wrapperClassName}\n        onChange={onChange}\n        value={value}\n        name={name}\n        disabled={overrideDisabled}\n        ariaLabel={ariaLabel}\n        ariaControls={ariaControls}\n        inputClassName={inputClassName}\n        ref={ref}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOGGLE)}\n      >\n        <MockToggle\n          areLabelsHidden={areLabelsHidden}\n          offOverrideText={offOverrideText}\n          onOverrideText={onOverrideText}\n          disabled={overrideDisabled}\n          className={overrideClassName}\n          selectedClassName={toggleSelectedClassName}\n        />\n      </Switch>\n    );\n  }\n);\n\nexport default Toggle;\n"],"mappings":";;;;;;;;;AAoCA,IA2DAA,CAAA,GA3D6DC,CAAA,CAC3D,UAAAA,CAAA,EAsBED,CAAA;EACE,IArBAE,CAAA,GAAED,CAAA,CAAFE,EAAA;IAIAC,CAAA,GAAuBH,CAAA,CAAvBI,uBAAA;IAAuBC,CAAA,GAAAL,CAAA,CACvBM,iBAAA;IAAAC,CAAA,QAAoB,MAAHF,CAAA,IAAOA,CAAA;IACxBG,CAAA,GAAUR,CAAA,CAAVS,UAAA;IAAUC,CAAA,GAAAV,CAAA,CACVW,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,GAAGG,CAAA,GAAIH,CAAA;IACfI,CAAA,GAAKd,CAAA,CAALe,KAAA;IACAC,CAAA,GAAIhB,CAAA,CAAJiB,IAAA;IACAC,CAAA,GAAQlB,CAAA,CAARmB,QAAA;IAEAC,CAAA,GAAUpB,CAAA,CAAVqB,UAAA;IACAC,CAAA,GAAStB,CAAA,CAATuB,SAAA;IACAC,CAAA,GAAYxB,CAAA,CAAZyB,YAAA;IAAYC,CAAA,GAAA1B,CAAA,CACZ2B,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,IAAQA,CAAA;IAAAG,CAAA,GAAA7B,CAAA,CACvB8B,cAAA;IAAAC,CAAA,QAAiB,MAAHF,CAAA,GAAG,OAAIA,CAAA;IAAAG,CAAA,GAAAhC,CAAA,CACrBiC,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,GAAG,QAAKA,CAAA;IACRG,CAAA,GAAUnC,CAAA,CAAzB;IAIIoC,CAAA,GAAoBC,CAAA,CAAmC,CAnBlDrC,CAAA,CAATsC,SAAA,EADkBtC,CAAA,CAAlBuC,kBAAA;IAqBIC,CAAA,GAAmBH,CAAA,CAAmC,CAACnB,CAAA,EAAUE,CAAA,IAAa;IAC9EqB,CAAA,GAAmBC,CAAA,CAAGC,CAAA,CAAOC,OAAA;IAC7BC,CAAA,GAAiBH,CAAA,CAAGC,CAAA,CAAOG,WAAA;EAEjC,OACEC,CAAA,CAACC,CAAA,EAAAC,MAAA,CAAAC,MAAA;IACCC,cAAA,EAAgB5C,CAAA;IAChB6C,OAAA,EAAS5C,CAAA;IACTN,EAAA,EAAID,CAAA;IACJoD,gBAAA,EAAkBZ,CAAA;IAClB9B,QAAA,EAAUC,CAAA;IACVG,KAAA,EAAOD,CAAA;IACPG,IAAA,EAAMD,CAAA;IACNG,QAAA,EAAUqB,CAAA;IACVjB,SAAA,EAAWD,CAAA;IACXG,YAAA,EAAcD,CAAA;IACd8B,cAAA,EAAgBT,CAAA;IAChBU,GAAA,EAAKxD,CAAA;IACQ,eAAAoC,CAAA,IAAcqB,CAAA,CAAUC,CAAA,CAAuBC,MAAA;EAAA,GAE5D;IAAAC,QAAA,EAAAZ,CAAA,CAACa,CAAA,EACC;MAAAjC,eAAA,EAAiBC,CAAA;MACjBK,eAAA,EAAiBC,CAAA;MACjBJ,cAAA,EAAgBC,CAAA;MAChBZ,QAAA,EAAUqB,CAAA;MACVF,SAAA,EAAWF,CAAA;MACXyB,iBAAA,EAAmB1D;IAAA;EAAA,GAI3B;AAAA;AAAA,SAAAJ,CAAA,IAAA+D,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}