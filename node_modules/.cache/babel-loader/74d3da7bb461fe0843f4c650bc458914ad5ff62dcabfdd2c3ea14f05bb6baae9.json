{"ast":null,"code":"import { toConsumableArray as r } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsx as t } from \"react/jsx-runtime\";\nimport { forwardRef as e, useContext as a } from \"react\";\nimport o from \"classnames\";\nimport s from \"../TableRow/TableRow.js\";\nimport l from \"./TableBody.module.scss.js\";\nimport { TableContext as m } from \"../Table/Table.js\";\nimport i from \"../TableCellSkeleton/TableCellSkeleton.js\";\nimport { SKELETON_ROWS_AMOUNT as n } from \"../Table/TableConsts.js\";\nimport { getLoadingTypeForCell as p } from \"../Table/tableHelpers.js\";\nimport { getTestId as c } from \"../../../tests/testIds.js\";\nimport { ComponentDefaultTestId as d } from \"../../../tests/constants.js\";\nvar f = e(function (e, f) {\n  var b = e.id,\n    u = e.className,\n    T = e[\"data-testid\"],\n    j = e.children,\n    y = a(m),\n    g = y.emptyState,\n    S = y.errorState,\n    A = y.columns,\n    B = y.dataState || {},\n    h = B.isLoading,\n    v = B.isError,\n    C = r(Array(n)).map(function (r, e) {\n      return t(s, {\n        children: A.map(function (r, a) {\n          return t(i, {\n            type: p(r.loadingStateType, e)\n          }, \"\".concat(e, \"-\").concat(a));\n        })\n      }, e);\n    });\n  return t(\"div\", Object.assign({\n    ref: f,\n    id: b,\n    className: o(l.tableBody, u),\n    \"data-testid\": T || c(d.TABLE_BODY, b),\n    role: \"rowgroup\"\n  }, {\n    children: h ? C : v ? S : !j || Array.isArray(j) && 0 === j.length ? g : j\n  }));\n});\nexport { f as default };","map":{"version":3,"names":["f","e","b","id","u","className","T","j","children","y","a","m","g","emptyState","S","errorState","A","columns","B","dataState","h","isLoading","v","isError","C","r","Array","n","map","t","s","i","type","p","loadingStateType","concat","Object","assign","ref","o","l","tableBody","c","d","TABLE_BODY","role","isArray","length","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/Table/TableBody/TableBody.tsx"],"sourcesContent":["import React, { ReactElement, ComponentProps, useContext, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { VibeComponent, VibeComponentProps } from \"../../../types\";\nimport TableRow, { ITableRowProps } from \"../TableRow/TableRow\";\nimport VirtualizedList from \"../../VirtualizedList/VirtualizedList\";\nimport styles from \"./TableBody.module.scss\";\nimport { TableContext } from \"../Table/Table\";\nimport TableCellSkeleton from \"../TableCellSkeleton/TableCellSkeleton\";\nimport { SKELETON_ROWS_AMOUNT } from \"../Table/TableConsts\";\nimport { getLoadingTypeForCell } from \"../Table/tableHelpers\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\n\nexport interface ITableBodyProps extends VibeComponentProps {\n  children?:\n    | ReactElement<ITableRowProps>\n    | ReactElement<ITableRowProps>[]\n    | ReactElement<ComponentProps<typeof VirtualizedList>>;\n}\n\nconst TableBody: VibeComponent<ITableBodyProps, HTMLDivElement> = forwardRef(\n  ({ id, className, \"data-testid\": dataTestId, children }, ref) => {\n    const { dataState, emptyState, errorState, columns } = useContext(TableContext);\n    const { isLoading, isError } = dataState || {};\n\n    const skeletonRender = [...new Array(SKELETON_ROWS_AMOUNT)].map((_, rowIndex) => (\n      <TableRow key={rowIndex}>\n        {columns.map(({ loadingStateType }, columnIndex) => (\n          <TableCellSkeleton\n            key={`${rowIndex}-${columnIndex}`}\n            type={getLoadingTypeForCell(loadingStateType, rowIndex)}\n          />\n        ))}\n      </TableRow>\n    ));\n\n    return (\n      <div\n        ref={ref}\n        id={id}\n        className={cx(styles.tableBody, className)}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_BODY, id)}\n        role=\"rowgroup\"\n      >\n        {isLoading\n          ? skeletonRender\n          : isError\n          ? errorState\n          : !children || (Array.isArray(children) && children.length === 0)\n          ? emptyState\n          : children}\n      </div>\n    );\n  }\n);\n\nexport default TableBody;\n"],"mappings":";;;;;;;;;;;;AAoBA,IAoCAA,CAAA,GApCkEC,CAAA,CAChE,UAAAA,CAAA,EAAyDD,CAAA;EAAO,IAA7DE,CAAA,GAAED,CAAA,CAAFE,EAAA;IAAIC,CAAA,GAASH,CAAA,CAATI,SAAA;IAA0BC,CAAA,GAAUL,CAAA,CAAzB;IAA2BM,CAAA,GAAQN,CAAA,CAARO,QAAA;IAC3CC,CAAA,GAAuDC,CAAA,CAAWC,CAAA;IAA/CC,CAAA,GAAUH,CAAA,CAAVI,UAAA;IAAYC,CAAA,GAAUL,CAAA,CAAVM,UAAA;IAAYC,CAAA,GAAOP,CAAA,CAAPQ,OAAA;IAC3CC,CAAA,GADiBT,CAAA,CAATU,SAAA,IACoC,CAAE;IAAtCC,CAAA,GAASF,CAAA,CAATG,SAAA;IAAWC,CAAA,GAAOJ,CAAA,CAAPK,OAAA;IAEbC,CAAA,GAAiBC,CAAA,CAAQC,KAAA,CAAMC,CAAA,GAAuBC,GAAA,CAAI,UAACH,CAAA,EAAGxB,CAAA;MAAQ,OAC1E4B,CAAA,CAACC,CAAA,EAAQ;QAAAtB,QAAA,EACNQ,CAAA,CAAQY,GAAA,CAAI,UAAAH,CAAA,EAAuBf,CAAA;UAAJ,OAC9BmB,CAAA,CAACE,CAAA,EAAiB;YAEhBC,IAAA,EAAMC,CAAA,CAHsBR,CAAA,CAAhBS,gBAAA,EAGkCjC,CAAA;UAAA,GAAS,GAAAkC,MAAA,CAD/ClC,CAAA,OAAQkC,MAAA,CAAIzB,CAAA;QAAA;MAAA,GAHXT,CAAA,CAOJ;IAAA;EAGb,OACE4B,CAAA,CACE,OAAAO,MAAA,CAAAC,MAAA;IAAAC,GAAA,EAAKtC,CAAA;IACLG,EAAA,EAAID,CAAA;IACJG,SAAA,EAAWkC,CAAA,CAAGC,CAAA,CAAOC,SAAA,EAAWrC,CAAA;IAAA,eACnBE,CAAA,IAAcoC,CAAA,CAAUC,CAAA,CAAuBC,UAAA,EAAY1C,CAAA;IACxE2C,IAAA,EAAK;EAAA;IAAArC,QAAA,EAEJY,CAAA,GACGI,CAAA,GACAF,CAAA,GACAR,CAAA,IACCP,CAAA,IAAamB,KAAA,CAAMoB,OAAA,CAAQvC,CAAA,KAAiC,MAApBA,CAAA,CAASwC,MAAA,GAClDnC,CAAA,GACAL;EAAA,GAGV;AAAA;AAAA,SAAAP,CAAA,IAAAgD,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}