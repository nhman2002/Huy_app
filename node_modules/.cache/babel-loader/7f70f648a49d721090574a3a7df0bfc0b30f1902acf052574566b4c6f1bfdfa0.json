{"ast":null,"code":"import { defineProperty as r } from \"../../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsx as a } from \"react/jsx-runtime\";\nimport { camelCase as e } from \"lodash-es\";\nimport { getStyle as t } from \"../../../../helpers/typesciptCssModulesHelper.js\";\nimport { getTestId as s, ComponentDefaultTestId as o } from \"../../../../tests/testIds.js\";\nimport i from \"classnames\";\nimport { useMemo as l } from \"react\";\nimport { calculatePercentage as m } from \"../LinearProgressBarHelpers.js\";\nimport n from \"./Bar.module.scss.js\";\nvar p = function (p) {\n  var u = p.value,\n    d = p.type,\n    c = p.barStyle,\n    f = p.animated,\n    b = p.min,\n    v = p.max,\n    j = p.color,\n    y = p.barLabelName,\n    g = p.id,\n    x = p[\"data-testid\"],\n    B = p.className,\n    _ = l(function () {\n      return i(n.bar, t(n, e(\"type__\" + d + \"--\" + c)), B, r({}, n.animate, f));\n    }, [d, c, f, B]),\n    h = l(function () {\n      return null == u ? 0 : m(u, b, v);\n    }, [u, b, v]);\n  return u ? a(\"div\", {\n    role: \"progressbar\",\n    \"aria-label\": y,\n    \"aria-valuenow\": h,\n    \"aria-valuemin\": 0,\n    \"aria-valuemax\": 100,\n    className: _,\n    style: Object.assign({\n      width: \"\".concat(h, \"%\")\n    }, j && {\n      backgroundColor: j\n    }),\n    id: g,\n    \"data-testid\": x || s(o.BAR, g)\n  }) : null;\n};\nexport { p as default };","map":{"version":3,"names":["p","Bar","u","value","d","type","c","barStyle","f","animated","b","min","v","max","j","color","y","barLabelName","g","id","x","B","className","_","l","i","n","bar","t","e","r","animate","h","m","a","role","style","Object","assign","width","concat","backgroundColor","s","o","BAR","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/ProgressBars/LinearProgressBar/Bar/Bar.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC, useMemo } from \"react\";\nimport { calculatePercentage } from \"../LinearProgressBarHelpers\";\nimport VibeComponentProps from \"src/types/VibeComponentProps\";\nimport { ProgressBarStyle, ProgressBarType } from \"../LinearProgressBarConstants\";\nimport styles from \"./Bar.module.scss\";\n\ninterface BarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).\n   */\n  barStyle?: ProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  baseClass?: string;\n  barLabelName?: string;\n  color?: string;\n  type?: ProgressBarType;\n  className?: string;\n}\n\nconst Bar: FC<BarProps> = ({\n  value,\n  type,\n  barStyle,\n  animated,\n  min,\n  max,\n  color,\n  barLabelName,\n  id,\n  \"data-testid\": dataTestId,\n  className\n}) => {\n  const classNames = useMemo(() => {\n    return cx(styles.bar, getStyle(styles, camelCase(\"type__\" + type + \"--\" + barStyle)), className, {\n      [styles.animate]: animated\n    });\n  }, [type, barStyle, animated, className]);\n\n  const valuePercentage = useMemo(() => {\n    if (value === null || value === undefined) return 0;\n    return calculatePercentage(value, min, max);\n  }, [value, min, max]);\n\n  if (!value) return null;\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-label={barLabelName}\n      aria-valuenow={valuePercentage}\n      aria-valuemin={0}\n      aria-valuemax={100}\n      className={classNames}\n      style={{\n        width: `${valuePercentage}%`,\n        ...(color && { backgroundColor: color })\n      }}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.BAR, id)}\n    />\n  );\n};\n\nexport default Bar;\n"],"mappings":";;;;;;;;;AAsCA,IAAMA,CAAA,GAAoB,SAAAC,CAAjBD,CAAA;EAYJ,IAXHE,CAAA,GAAKF,CAAA,CAALG,KAAA;IACAC,CAAA,GAAIJ,CAAA,CAAJK,IAAA;IACAC,CAAA,GAAQN,CAAA,CAARO,QAAA;IACAC,CAAA,GAAQR,CAAA,CAARS,QAAA;IACAC,CAAA,GAAGV,CAAA,CAAHW,GAAA;IACAC,CAAA,GAAGZ,CAAA,CAAHa,GAAA;IACAC,CAAA,GAAKd,CAAA,CAALe,KAAA;IACAC,CAAA,GAAYhB,CAAA,CAAZiB,YAAA;IACAC,CAAA,GAAElB,CAAA,CAAFmB,EAAA;IACeC,CAAA,GAAUpB,CAAA,CAAzB;IACAqB,CAAA,GAASrB,CAAA,CAATsB,SAAA;IAEMC,CAAA,GAAaC,CAAA,CAAQ;MACzB,OAAOC,CAAA,CAAGC,CAAA,CAAOC,GAAA,EAAKC,CAAA,CAASF,CAAA,EAAQG,CAAA,CAAU,WAAWzB,CAAA,GAAO,OAAOE,CAAA,IAAYe,CAAA,EAASS,CAAA,CAC5F,IAAAJ,CAAA,CAAOK,OAAA,EAAUvB,CAAA,EAErB;IAAA,GAAE,CAACJ,CAAA,EAAME,CAAA,EAAUE,CAAA,EAAUa,CAAA;IAExBW,CAAA,GAAkBR,CAAA,CAAQ;MAC9B,OAAI,QAAAtB,CAAA,GAA8C,IAC3C+B,CAAA,CAAoB/B,CAAA,EAAOQ,CAAA,EAAKE,CAAA,CACxC;IAAA,GAAE,CAACV,CAAA,EAAOQ,CAAA,EAAKE,CAAA;EAEhB,OAAKV,CAAA,GAGHgC,CAAA,CACE;IAAAC,IAAA,EAAK;IAAA,cACOnB,CAAA;IAAY,iBACTgB,CAAA;IAAe,iBACf;IAAC,iBACD;IACfV,SAAA,EAAWC,CAAA;IACXa,KAAA,EAAAC,MAAA,CAAAC,MAAA;MACEC,KAAA,EAAK,GAAAC,MAAA,CAAKR,CAAA,EAAe;IAAA,GACrBlB,CAAA,IAAS;MAAE2B,eAAA,EAAiB3B;IAAA;IAElCK,EAAA,EAAID,CAAA;IAAE,eACOE,CAAA,IAAcsB,CAAA,CAAUC,CAAA,CAAuBC,GAAA,EAAK1B,CAAA;EAAA,KAflD,IAkBrB;AAAA;AAAA,SAAAlB,CAAA,IAAA6C,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}