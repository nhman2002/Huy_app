{"ast":null,"code":"import { slicedToArray as r } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { jsx as t } from \"react/jsx-runtime\";\nimport { forwardRef as e, useState as o, useRef as n, useCallback as i, useMemo as l, useEffect as u } from \"react\";\nimport s from \"classnames\";\nimport { VariableSizeGrid as c } from \"react-window\";\nimport a from \"react-virtualized-auto-sizer\";\nimport { getNormalizedItems as d, getOnItemsRenderedData as m, isLayoutDirectionScrollbarVisible as f } from \"../../services/virtualized-service.js\";\nimport v from \"../../hooks/usePrevious/index.js\";\nimport h from \"../../hooks/useThrottledCallback.js\";\nimport p from \"../../hooks/useMergeRef.js\";\nimport { NOOP as I } from \"../../utils/function-utils.js\";\nimport { getTestId as g, ComponentDefaultTestId as j } from \"../../tests/testIds.js\";\nimport w from \"./VirtualizedGrid.module.scss.js\";\nvar x = e(function (e, x) {\n  var b = e.className,\n    T = e.id,\n    R = e.items,\n    S = void 0 === R ? [] : R,\n    C = e.itemRenderer,\n    z = void 0 === C ? function (r, t, e) {\n      return r;\n    } : C,\n    N = e.getRowHeight,\n    M = void 0 === N ? function () {\n      return 50;\n    } : N,\n    O = e.getColumnWidth,\n    k = void 0 === O ? function () {\n      return 100;\n    } : O,\n    V = e.getItemId,\n    W = void 0 === V ? function (r, t) {\n      return r.id;\n    } : V,\n    y = e.onScroll,\n    A = e.scrollToId,\n    D = void 0 === A ? null : A,\n    G = e.onScrollToFinished,\n    H = void 0 === G ? I : G,\n    U = e.onItemsRendered,\n    _ = void 0 === U ? null : U,\n    F = e.onItemsRenderedThrottleMs,\n    P = void 0 === F ? 200 : F,\n    q = e.onSizeUpdate,\n    B = void 0 === q ? I : q,\n    E = e.onVerticalScrollbarVisiblityChange,\n    L = void 0 === E ? null : E,\n    Z = e.scrollableClassName,\n    J = e[\"data-testid\"],\n    K = o(0),\n    Q = r(K, 2),\n    X = Q[0],\n    Y = Q[1],\n    $ = o(0),\n    rr = r($, 2),\n    tr = rr[0],\n    er = rr[1],\n    or = v(D),\n    nr = n(null),\n    ir = n(null),\n    lr = n(null),\n    ur = n(0),\n    sr = n({\n      scrollOffsetInitial: 0,\n      scrollOffsetFinal: 0,\n      animationStartTime: 0\n    }),\n    cr = p(x, nr),\n    ar = sr.current,\n    dr = i(function (r) {\n      var t = M();\n      return t && !Number.isNaN(t) || console.error(\"Couldn't get height for item: \", r), t;\n    }, [M]),\n    mr = i(function (r, t) {\n      var e = W(r, t);\n      return void 0 === e && console.error(\"Couldn't get id for item: \", r), e;\n    }, [W]),\n    fr = l(function () {\n      return d(S, mr, dr);\n    }, [S, mr, dr]),\n    vr = l(function () {\n      return Math.min(S.length, Math.floor(tr / k()));\n    }, [S, tr, k]),\n    hr = l(function () {\n      return vr > 0 ? Math.ceil(S.length / vr) : 0;\n    }, [S, vr]),\n    pr = l(function () {\n      return D % vr;\n    }, [D, vr]),\n    Ir = l(function () {\n      return Math.floor(D / vr);\n    }, [D, vr]),\n    gr = i(function (r) {\n      var t = r.horizontalScrollDirection,\n        e = r.scrollTop,\n        o = r.scrollUpdateWasRequested;\n      ur.current = e, o || (ar.scrollOffsetInitial = e), y && y(t, e, o);\n    }, [y, ur, ar]),\n    jr = i(function (r) {\n      var t = r.rowIndex * vr + r.columnIndex;\n      return z(S[t], t, r.style);\n    }, [S, z, vr]),\n    wr = i(function (r, t) {\n      t === X && r === tr || setTimeout(function () {\n        Y(t), er(r), B(r, t);\n      }, 0);\n    }, [X, tr, B]),\n    xr = h(function (r) {\n      if (_) {\n        var t = m(S, fr, mr, r.visibleStartIndex, r.visibleStopIndex, X, ur.current);\n        _(t);\n      }\n    }, {\n      wait: P,\n      trailing: !0\n    }, [_, S, fr, mr, X]);\n  return u(function () {\n    D && or !== D && (lr.current.scrollToItem({\n      align: \"center\",\n      columnIndex: pr,\n      rowIndex: Ir\n    }), H());\n  }, [D, or, lr, pr, Ir, H]), u(function () {\n    lr.current && lr.current.resetAfterIndices({\n      columnIndex: 0,\n      rowIndex: 0\n    });\n  }, [fr]), u(function () {\n    if (L) {\n      var r = f(S, fr, mr, X);\n      ir.current !== r && (ir.current = r, L(r));\n    }\n  }, [L, S, fr, X, mr]), t(\"div\", Object.assign({\n    ref: cr,\n    className: s(w.virtualizedGridWrapper, b),\n    id: T,\n    \"data-testid\": J || g(j.VIRTUALIZED_GRID, T)\n  }, {\n    children: t(a, {\n      children: function (r) {\n        var e = r.height,\n          o = r.width;\n        return wr(o, e), t(c, Object.assign({\n          ref: lr,\n          height: e,\n          width: o,\n          columnWidth: k,\n          columnCount: vr,\n          rowHeight: M,\n          rowCount: hr,\n          onScroll: gr,\n          onItemsRendered: xr,\n          className: Z\n        }, {\n          children: jr\n        }));\n      }\n    })\n  }));\n});\nexport { x as default };","map":{"version":3,"names":["x","e","b","className","T","id","R","items","S","C","itemRenderer","z","r","t","N","getRowHeight","M","O","getColumnWidth","k","V","getItemId","W","y","onScroll","A","scrollToId","D","G","onScrollToFinished","H","I","U","onItemsRendered","_","F","onItemsRenderedThrottleMs","P","q","onSizeUpdate","B","E","onVerticalScrollbarVisiblityChange","L","Z","scrollableClassName","J","K","o","Q","X","Y","$","rr","tr","er","or","v","nr","n","ir","lr","ur","sr","scrollOffsetInitial","scrollOffsetFinal","animationStartTime","cr","p","ar","current","dr","i","Number","isNaN","console","error","mr","fr","l","d","vr","Math","min","length","floor","hr","ceil","pr","Ir","gr","horizontalScrollDirection","scrollTop","scrollUpdateWasRequested","jr","rowIndex","columnIndex","style","wr","setTimeout","xr","h","m","visibleStartIndex","visibleStopIndex","wait","trailing","u","scrollToItem","align","resetAfterIndices","f","Object","assign","ref","s","w","virtualizedGridWrapper","g","j","VIRTUALIZED_GRID","children","a","height","width","c","columnWidth","columnCount","rowHeight","rowCount","default"],"sources":["/Users/huynhmannguyen/Documents/GitHub/Huy_app/node_modules/monday-ui-react-core/src/components/VirtualizedGrid/VirtualizedGrid.tsx"],"sourcesContent":["import React, {\n  ComponentType,\n  CSSProperties,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport cx from \"classnames\";\nimport { GridChildComponentProps, GridOnScrollProps, ScrollDirection, VariableSizeGrid as Grid } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  getNormalizedItems,\n  getOnItemsRenderedData,\n  isLayoutDirectionScrollbarVisible\n} from \"../../services/virtualized-service\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport useThrottledCallback from \"../../hooks/useThrottledCallback\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"src/types/VibeComponentProps\";\nimport { VibeComponent } from \"../../types\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./VirtualizedGrid.module.scss\";\n\ntype ItemType = {\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n};\n\ninterface VirtualizedGridProps extends VibeComponentProps {\n  /**\n   * A list of items to be rendered\n   * {\n   *      item: ItemType,\n   *     index: number,\n   *     style: CSSProperties\n   * }[]\n   */\n  items: ItemType[];\n  /**\n   * item render function\n   * returns `JSX.Element`\n   */\n  itemRenderer: (\n    item: ItemType,\n    index: number,\n    style: CSSProperties\n  ) => ItemType | ComponentType<GridChildComponentProps<ItemType>>;\n  /**\n   * in order to calculate the number of rows to render in the grid, the component needs the height of the row\n   * return `number`\n   */\n  getRowHeight: () => number;\n  /**\n   * in order to calculate the number of columns to render in the grid, the component needs the width of the column\n   * return `number`\n   */\n  getColumnWidth: () => number;\n  /**\n   * returns Id of an items\n   * returns `string`\n   */\n  getItemId?: (item: ItemType, index: number) => string;\n  /**\n   * index of the item to scroll to\n   */\n  scrollToId?: number;\n  onScroll?: (horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void;\n  /**\n   * callback to be called when the scroll is finished\n   */\n  onScrollToFinished?: () => void;\n  /**\n   * a callback that is being called when the items are rendered\n   */\n  onItemsRendered?: ({\n    firstItemId,\n    secondItemId,\n    lastItemId,\n    centerItemId,\n    firstItemOffsetEnd,\n    currentOffsetTop\n  }: {\n    firstItemId: string;\n    secondItemId: string;\n    lastItemId: string;\n    centerItemId: string;\n    firstItemOffsetEnd: number;\n    currentOffsetTop: number;\n  }) => void;\n  onItemsRenderedThrottleMs?: number;\n  /**\n   * when the grid size changes\n   */\n  onSizeUpdate?: (width: number, height: number) => void;\n  onVerticalScrollbarVisiblityChange?: (value: boolean) => void;\n  /**\n   * class name to add to the component scrollable container\n   */\n  scrollableClassName?: string;\n}\n\nconst VirtualizedGrid: VibeComponent<VirtualizedGridProps> = forwardRef(\n  (\n    {\n      className,\n      id,\n      items = [],\n      itemRenderer = (item: ItemType, _index: number, _style: CSSProperties) => item,\n      getRowHeight = () => 50,\n      getColumnWidth = () => 100,\n      getItemId = (item: ItemType, _index: number) => item.id,\n      onScroll,\n      scrollToId = null,\n      onScrollToFinished = NOOP,\n      onItemsRendered = null,\n      onItemsRenderedThrottleMs = 200,\n      onSizeUpdate = NOOP,\n      onVerticalScrollbarVisiblityChange = null,\n      scrollableClassName,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    // states\n    const [gridHeight, setGridHeight] = useState(0);\n    const [gridWidth, setGridWidth] = useState(0);\n\n    // prevs\n    const prevScrollToId = usePrevious(scrollToId);\n\n    // Refs\n    const componentRef = useRef(null);\n    const isVerticalScrollbarVisibleRef = useRef(null);\n    const gridRef = useRef(null);\n    const scrollTopRef = useRef(0);\n    const animationDataRef = useRef({\n      scrollOffsetInitial: 0,\n      scrollOffsetFinal: 0,\n      animationStartTime: 0\n    });\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const animationData = animationDataRef.current;\n\n    // Callbacks\n    const heightGetter = useCallback(\n      (item: ItemType) => {\n        const height = getRowHeight();\n        if (!height || Number.isNaN(height)) {\n          console.error(\"Couldn't get height for item: \", item);\n        }\n        return height;\n      },\n      [getRowHeight]\n    );\n\n    const idGetter = useCallback(\n      (item: ItemType, index: number) => {\n        const itemId = getItemId(item, index);\n        if (itemId === undefined) {\n          console.error(\"Couldn't get id for item: \", item);\n        }\n        return itemId;\n      },\n      [getItemId]\n    );\n\n    // Memos\n    // Creates object of itemId => { item, index, height, offsetTop}\n    const normalizedItems = useMemo(() => {\n      return getNormalizedItems(items, idGetter, heightGetter);\n    }, [items, idGetter, heightGetter]);\n\n    const calcColumnCount = useMemo(() => {\n      return Math.min(items.length, Math.floor(gridWidth / getColumnWidth()));\n    }, [items, gridWidth, getColumnWidth]);\n\n    const calcRowCount = useMemo(() => {\n      return calcColumnCount > 0 ? Math.ceil(items.length / calcColumnCount) : 0;\n    }, [items, calcColumnCount]);\n\n    const scrollToColumnIndex = useMemo(() => {\n      return scrollToId % calcColumnCount;\n    }, [scrollToId, calcColumnCount]);\n\n    const scrollToRowIndex = useMemo(() => {\n      return Math.floor(scrollToId / calcColumnCount);\n    }, [scrollToId, calcColumnCount]);\n\n    // Callbacks\n    const onScrollCB = useCallback(\n      ({ horizontalScrollDirection, scrollTop, scrollUpdateWasRequested }: GridOnScrollProps) => {\n        scrollTopRef.current = scrollTop;\n        if (!scrollUpdateWasRequested) {\n          animationData.scrollOffsetInitial = scrollTop;\n        }\n        onScroll && onScroll(horizontalScrollDirection, scrollTop, scrollUpdateWasRequested);\n      },\n      [onScroll, scrollTopRef, animationData]\n    );\n\n    const cellRenderer = useCallback(\n      ({ columnIndex, rowIndex, style }: { columnIndex: number; rowIndex: number; style: CSSProperties }) => {\n        const index = rowIndex * calcColumnCount + columnIndex;\n        const item = items[index];\n        return itemRenderer(item, index, style);\n      },\n      [items, itemRenderer, calcColumnCount]\n    );\n\n    const updateGridSize = useCallback(\n      (width: number, height: number) => {\n        if (height !== gridHeight || width !== gridWidth) {\n          setTimeout(() => {\n            setGridHeight(height);\n            setGridWidth(width);\n            onSizeUpdate(width, height);\n          }, 0);\n        }\n      },\n      [gridHeight, gridWidth, onSizeUpdate]\n    );\n\n    const onItemsRenderedCB = useThrottledCallback(\n      ({ visibleStartIndex, visibleStopIndex }) => {\n        if (!onItemsRendered) return;\n        const data = getOnItemsRenderedData(\n          items,\n          normalizedItems,\n          idGetter,\n          visibleStartIndex,\n          visibleStopIndex,\n          gridHeight,\n          scrollTopRef.current\n        );\n        onItemsRendered(data);\n      },\n      { wait: onItemsRenderedThrottleMs, trailing: true },\n      [onItemsRendered, items, normalizedItems, idGetter, gridHeight]\n    );\n\n    // Effects\n    useEffect(() => {\n      // scroll to specific item\n      if (scrollToId && prevScrollToId !== scrollToId) {\n        gridRef.current.scrollToItem({\n          align: \"center\",\n          columnIndex: scrollToColumnIndex,\n          rowIndex: scrollToRowIndex\n        });\n        onScrollToFinished();\n      }\n    }, [scrollToId, prevScrollToId, gridRef, scrollToColumnIndex, scrollToRowIndex, onScrollToFinished]);\n\n    useEffect(() => {\n      // recalculate row heights\n      if (gridRef.current) {\n        gridRef.current.resetAfterIndices({ columnIndex: 0, rowIndex: 0 });\n      }\n    }, [normalizedItems]);\n\n    useEffect(() => {\n      // update vertical scrollbar visibility\n      if (onVerticalScrollbarVisiblityChange) {\n        const isVisible = isLayoutDirectionScrollbarVisible(items, normalizedItems, idGetter, gridHeight);\n        if (isVerticalScrollbarVisibleRef.current !== isVisible) {\n          isVerticalScrollbarVisibleRef.current = isVisible;\n          onVerticalScrollbarVisiblityChange(isVisible);\n        }\n      }\n    }, [onVerticalScrollbarVisiblityChange, items, normalizedItems, gridHeight, idGetter]);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={cx(styles.virtualizedGridWrapper, className)}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.VIRTUALIZED_GRID, id)}\n      >\n        <AutoSizer>\n          {({ height, width }: { height: number; width: number }) => {\n            updateGridSize(width, height);\n            return (\n              <Grid\n                ref={gridRef}\n                height={height}\n                width={width}\n                columnWidth={getColumnWidth}\n                columnCount={calcColumnCount}\n                rowHeight={getRowHeight}\n                rowCount={calcRowCount}\n                onScroll={onScrollCB}\n                onItemsRendered={onItemsRenderedCB}\n                className={scrollableClassName}\n              >\n                {cellRenderer as unknown as VibeComponent<GridChildComponentProps>}\n              </Grid>\n            );\n          }}\n        </AutoSizer>\n      </div>\n    );\n  }\n);\n\nexport default VirtualizedGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}