{"version":3,"file":"AlertBanner.js","sources":["../../../../../src/components/AlertBanner/AlertBanner.tsx"],"sourcesContent":["import { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport cx from \"classnames\";\nimport React, { ForwardedRef, forwardRef, ReactElement, useMemo } from \"react\";\nimport Button from \"../../components/Button/Button\";\nimport Icon from \"../../components/Icon/Icon\";\nimport CloseSmall from \"../../components/Icon/Icons/components/CloseSmall\";\nimport { AlertBannerBackgroundColor } from \"./AlertBannerConstants\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { AlertBannerLinkProps } from \"./AlertBannerLink/AlertBannerLink\";\nimport { AlertBannerButtonProps } from \"./AlertBannerButton/AlertBannerButton\";\nimport { AlertBannerTextProps } from \"./AlertBannerText/AlertBannerText\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { VibeComponent, withStaticProps } from \"../../types\";\nimport styles from \"./AlertBanner.module.scss\";\nimport Text from \"../Text/Text\";\nimport { AlertBannerContext } from \"./AlertBannerContext\";\n\ninterface AlertBannerProps extends VibeComponentProps {\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  backgroundColor?: AlertBannerBackgroundColor;\n  isCloseHidden?: boolean;\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  closeButtonAriaLabel?: string;\n  onClose?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  children?: ReactElement<AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps>;\n}\n\nconst AlertBanner: VibeComponent<AlertBannerProps> & {\n  backgroundColors?: typeof AlertBannerBackgroundColor;\n} = forwardRef(\n  (\n    {\n      children: originalChildren,\n      className,\n      backgroundColor = AlertBanner.backgroundColors.PRIMARY,\n      onClose = NOOP,\n      ariaLabel = \"\",\n      closeButtonAriaLabel = \"Close\",\n      isCloseHidden = false,\n      id,\n      \"data-testid\": dataTestId\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const classNames = useMemo(() => {\n      return cx(className, styles.alertBanner, getStyle(styles, backgroundColor));\n    }, [className, backgroundColor]);\n\n    const isDarkBackground = backgroundColor === AlertBanner.backgroundColors.DARK;\n    const isFixedColor = backgroundColor === AlertBanner.backgroundColors.WARNING;\n    const textColor = useMemo(() => {\n      if (isFixedColor) {\n        return Text.colors.FIXED_DARK;\n      }\n      return isDarkBackground ? Text.colors.ON_INVERTED : Text.colors.ON_PRIMARY;\n    }, [isDarkBackground, isFixedColor]);\n    const children = useMemo(() => {\n      const allChildren = React.Children.toArray(originalChildren) as ReactElement[];\n      const filteredChildren = allChildren.filter(\n        (\n          child: ReactElement & {\n            type: Record<string, unknown>;\n          }\n        ) => {\n          if (child.type.isAlertBannerItem || child.type.displayName === \"MDXCreateElement\") return true;\n          console.error(\n            \"Alert banner child is not supported. Please use AlertBannerText, AlertBannerLink or AlertBannerButton.\",\n            child\n          );\n          return false;\n        }\n      );\n\n      return filteredChildren.map((child, index) => {\n        return React.cloneElement(child, {\n          ...child?.props,\n          marginLeft: index > 0,\n          isDarkBackground\n        });\n      });\n    }, [originalChildren, isDarkBackground]);\n\n    return (\n      <Text\n        type={Text.types.TEXT2}\n        color={textColor}\n        ref={ref}\n        className={classNames}\n        role=\"banner\"\n        aria-label={ariaLabel || \"banner\"}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.ALERT_BANNER, id)}\n      >\n        <AlertBannerContext.Provider value={{ textColor }}>\n          <div className={cx(styles.content)}>\n            {children.map(\n              (\n                child: ReactElement & {\n                  type: Record<string, unknown>;\n                },\n                index\n              ) => {\n                const childTypeIsAlertBannerText = child.type.isAlertBannerText;\n                return (\n                  <div\n                    key={index}\n                    className={cx(styles.contentItem, {\n                      [styles.contentItemText]: childTypeIsAlertBannerText\n                    })}\n                  >\n                    {childTypeIsAlertBannerText ? <div className={cx(styles.ellipsis)}>{child}</div> : child}\n                  </div>\n                );\n              }\n            )}\n          </div>\n        </AlertBannerContext.Provider>\n        <div className={cx(styles.closeButtonWrapper)}>\n          {isCloseHidden ? null : (\n            <Button\n              data-testid=\"alert-banner-close-button\"\n              className={cx(styles.closeBtn)}\n              onClick={onClose}\n              size={Button.sizes.SMALL}\n              kind={Button.kinds.TERTIARY}\n              color={isDarkBackground ? Button.colors.ON_INVERTED_BACKGROUND : Button.colors.ON_PRIMARY_COLOR}\n              ariaLabel={closeButtonAriaLabel}\n            >\n              <Icon iconType={Icon.type.SVG} clickable={false} icon={CloseSmall} iconSize=\"20px\" ignoreFocusStyle />\n            </Button>\n          )}\n        </div>\n      </Text>\n    );\n  }\n);\n\nexport default withStaticProps(AlertBanner, { backgroundColors: AlertBannerBackgroundColor });\n"],"names":["AlertBanner","forwardRef","_ref","ref","originalChildren","children","className","_ref$backgroundColor","backgroundColor","backgroundColors","PRIMARY","_ref$onClose","onClose","NOOP","_ref$ariaLabel","ariaLabel","_ref$closeButtonAriaL","closeButtonAriaLabel","_ref$isCloseHidden","isCloseHidden","id","dataTestId","classNames","useMemo","cx","styles","alertBanner","getStyle","isDarkBackground","DARK","isFixedColor","WARNING","textColor","Text","colors","FIXED_DARK","ON_INVERTED","ON_PRIMARY","React","Children","toArray","filter","child","type","isAlertBannerItem","displayName","console","error","map","index","cloneElement","Object","assign","props","marginLeft","_jsxs","types","TEXT2","color","role","getTestId","ComponentDefaultTestId","ALERT_BANNER","_jsx","AlertBannerContext","Provider","value","content","childTypeIsAlertBannerText","isAlertBannerText","contentItem","_defineProperty","contentItemText","ellipsis","closeButtonWrapper","Button","closeBtn","onClick","size","sizes","SMALL","kind","kinds","TERTIARY","ON_INVERTED_BACKGROUND","ON_PRIMARY_COLOR","Icon","iconType","SVG","clickable","icon","CloseSmall","iconSize","ignoreFocusStyle","withStaticProps","AlertBannerBackgroundColor"],"mappings":"u0BAiCA,IAAMA,EAEFC,GACF,SAAAC,EAYEC,GACE,IAXUC,EAAgBF,EAA1BG,SACAC,EAASJ,EAATI,UAASC,EAAAL,EACTM,gBAAAA,OAAkBR,IAAHO,EAAGP,EAAYS,iBAAiBC,QAAOH,EAAAI,EAAAT,EACtDU,QAAAA,OAAUC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAZ,EACda,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAAAE,EAAAd,EACde,qBAAAA,OAAuB,IAAHD,EAAG,QAAOA,EAAAE,EAAAhB,EAC9BiB,cAAAA,OAAgB,IAAHD,GAAQA,EACrBE,EAAElB,EAAFkB,GACeC,EAAUnB,EAAzB,eAIIoB,EAAaC,GAAQ,WACzB,OAAOC,EAAGlB,EAAWmB,EAAOC,YAAaC,EAASF,EAAQjB,GAC5D,GAAG,CAACF,EAAWE,IAEToB,EAAmBpB,IAAoBR,EAAYS,iBAAiBoB,KACpEC,EAAetB,IAAoBR,EAAYS,iBAAiBsB,QAChEC,EAAYT,GAAQ,WACxB,OAAIO,EACKG,EAAKC,OAAOC,WAEdP,EAAmBK,EAAKC,OAAOE,YAAcH,EAAKC,OAAOG,UAClE,GAAG,CAACT,EAAkBE,IAChBzB,EAAWkB,GAAQ,WAiBvB,OAhBoBe,EAAMC,SAASC,QAAQpC,GACNqC,QACnC,SACEC,GAIA,SAAIA,EAAMC,KAAKC,mBAAgD,qBAA3BF,EAAMC,KAAKE,eAC/CC,QAAQC,MACN,yGACAL,IAEK,EACT,IAGsBM,KAAI,SAACN,EAAOO,GAClC,OAAOX,EAAMY,aAAaR,EACrBS,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAAV,aAAA,EAAAA,EAAOW,OAAK,CACfC,WAAYL,EAAQ,EACpBrB,iBAAAA,IAEJ,GACF,GAAG,CAACxB,EAAkBwB,IAEtB,OACE2B,EAACtB,EACCkB,OAAAC,OAAA,CAAAT,KAAMV,EAAKuB,MAAMC,MACjBC,MAAO1B,EACP7B,IAAKA,EACLG,UAAWgB,EACXqC,KAAK,SAAQ,aACD5C,GAAa,SACzBK,GAAIA,gBACSC,GAAcuC,EAAUC,EAAuBC,aAAc1C,IAE1E,CAAAf,SAAA,CAAA0D,EAACC,EAAmBC,SAASd,OAAAC,OAAA,CAAAc,MAAO,CAAElC,UAAAA,IAAW,CAAA3B,SAC/C0D,EAAK,MAAAZ,OAAAC,OAAA,CAAA9C,UAAWkB,EAAGC,EAAO0C,UAAQ,CAAA9D,SAC/BA,EAAS2C,KACR,SACEN,EAGAO,GAEA,IAAMmB,EAA6B1B,EAAMC,KAAK0B,kBAC9C,OACEN,uBAEEzD,UAAWkB,EAAGC,EAAO6C,YAAWC,EAAA,CAAA,EAC7B9C,EAAO+C,gBAAkBJ,KAC1B,CAAA/D,SAED+D,EAA6BL,uBAAKzD,UAAWkB,EAAGC,EAAOgD,WAAS,CAAApE,SAAGqC,KAAeA,IAL9EO,YAYjBc,EAAA,MAAAZ,OAAAC,OAAA,CAAK9C,UAAWkB,EAAGC,EAAOiD,qBACvB,CAAArE,SAAAc,EAAgB,KACf4C,EAACY,EAAMxB,OAAAC,OAAA,CAAA,cACO,4BACZ9C,UAAWkB,EAAGC,EAAOmD,UACrBC,QAASjE,EACTkE,KAAMH,EAAOI,MAAMC,MACnBC,KAAMN,EAAOO,MAAMC,SACnBzB,MAAO9B,EAAmB+C,EAAOzC,OAAOkD,uBAAyBT,EAAOzC,OAAOmD,iBAC/EtE,UAAWE,GAEX,CAAAZ,SAAA0D,EAACuB,EAAI,CAACC,SAAUD,EAAK3C,KAAK6C,IAAKC,WAAW,EAAOC,KAAMC,EAAYC,SAAS,OAAOC,kBAAmB,aAMlH,IAGaC,EAAAA,EAAgB9F,EAAa,CAAES,iBAAkBsF"}