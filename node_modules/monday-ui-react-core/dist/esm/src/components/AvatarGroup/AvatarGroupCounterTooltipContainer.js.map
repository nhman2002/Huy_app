{"version":3,"file":"AvatarGroupCounterTooltipContainer.js","sources":["../../../../../src/components/AvatarGroup/AvatarGroupCounterTooltipContainer.tsx"],"sourcesContent":["import React, { ReactElement, RefObject, useCallback, useMemo, useRef, useState } from \"react\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { AvatarProps } from \"../Avatar/Avatar\";\nimport AvatarGroupCounterTooltipContent from \"./AvatarGroupCounterTooltipContent\";\nimport { useTooltipContentTabNavigation } from \"./AvatarGroupCounterTooltipHelper\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { AvatarType } from \"../Avatar/AvatarConstants\";\nimport { AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY } from \"./AvatarGroupConstants\";\n\ninterface AvatarGroupCounterTooltipContainerProps extends VibeComponentProps {\n  className?: string;\n  type?: AvatarType;\n  /**\n   * Counter element & focus placeholders\n   */\n  children?: ReactElement[];\n  /**\n   * Array of Avatar elements\n   */\n  avatars?: ReactElement<AvatarProps>[];\n  counterTooltipCustomProps?: TooltipProps;\n  counterTooltipIsVirtualizedList?: boolean;\n  focusPrevPlaceholderRef?: RefObject<HTMLDivElement>;\n  focusNextPlaceholderRef?: RefObject<HTMLDivElement>;\n  counterContainerRef?: RefObject<HTMLDivElement>;\n}\n\nconst SHOW_TRIGGER = [Tooltip.hideShowTriggers.MOUSE_ENTER];\nconst HIDE_TRIGGER = [Tooltip.hideShowTriggers.MOUSE_LEAVE];\n\nconst AvatarGroupCounterTooltipContainer: React.FC<AvatarGroupCounterTooltipContainerProps> = ({\n  focusPrevPlaceholderRef,\n  focusNextPlaceholderRef,\n  counterContainerRef,\n  children = [],\n  avatars = [],\n  type,\n  className,\n  counterTooltipCustomProps,\n  counterTooltipIsVirtualizedList = false\n}) => {\n  const [isKeyboardTooltipVisible, setIsKeyboardTooltipVisible] = useState(false);\n  const tooltipContentContainerRef = useRef(null);\n  const tooltipContent = useMemo(\n    () =>\n      counterTooltipCustomProps?.content || (\n        <AvatarGroupCounterTooltipContent\n          avatars={avatars}\n          type={type}\n          className={className}\n          isVirtualizedList={counterTooltipIsVirtualizedList}\n          tooltipContentContainerRef={tooltipContentContainerRef}\n        />\n      ),\n    [avatars, className, counterTooltipCustomProps?.content, counterTooltipIsVirtualizedList, type]\n  );\n\n  useTooltipContentTabNavigation({\n    counterContainerRef,\n    tooltipContentContainerRef,\n    focusPrevPlaceholderRef,\n    focusNextPlaceholderRef,\n    setIsKeyboardTooltipVisible,\n    isKeyboardTooltipVisible\n  });\n\n  // Tooltip props\n  const onHide = useCallback(() => {\n    setIsKeyboardTooltipVisible(false);\n  }, []);\n\n  if (!avatars?.length && !counterTooltipCustomProps?.content) {\n    return <>{children}</>;\n  }\n  return (\n    <Tooltip\n      // for disable close tooltip when hovering content\n      showOnDialogEnter\n      open={isKeyboardTooltipVisible}\n      hideDelay={AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY}\n      showTrigger={SHOW_TRIGGER}\n      hideTrigger={HIDE_TRIGGER}\n      onTooltipHide={onHide}\n      {...(counterTooltipCustomProps || {})}\n      content={tooltipContent}\n    >\n      {children}\n    </Tooltip>\n  );\n};\n\nexport default AvatarGroupCounterTooltipContainer;\n"],"names":["SHOW_TRIGGER","Tooltip","hideShowTriggers","MOUSE_ENTER","HIDE_TRIGGER","MOUSE_LEAVE","AvatarGroupCounterTooltipContainer","_ref","focusPrevPlaceholderRef","focusNextPlaceholderRef","counterContainerRef","_ref$children","children","_ref$avatars","avatars","type","className","counterTooltipCustomProps","_ref$counterTooltipIs","counterTooltipIsVirtualizedList","_useState","useState","_useState2","_slicedToArray","isKeyboardTooltipVisible","setIsKeyboardTooltipVisible","tooltipContentContainerRef","useRef","tooltipContent","useMemo","content","_jsx","AvatarGroupCounterTooltipContent","isVirtualizedList","useTooltipContentTabNavigation","onHide","useCallback","length","showOnDialogEnter","open","hideDelay","AVATAR_GROUP_COUNTER_TOOLTIP_SHOW_DELAY","showTrigger","hideTrigger","onTooltipHide","_Fragment"],"mappings":"odA2BA,IAAMA,EAAe,CAACC,EAAQC,iBAAiBC,aACzCC,EAAe,CAACH,EAAQC,iBAAiBG,aAEzCC,EAAwF,SAAtDC,GAUnC,IATHC,EAAuBD,EAAvBC,wBACAC,EAAuBF,EAAvBE,wBACAC,EAAmBH,EAAnBG,oBAAmBC,EAAAJ,EACnBK,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAAN,EACbO,QAAAA,OAAU,IAAHD,EAAG,GAAEA,EACZE,EAAIR,EAAJQ,KACAC,EAAST,EAATS,UACAC,EAAyBV,EAAzBU,0BAAyBC,EAAAX,EACzBY,gCAAAA,OAAkC,IAAHD,GAAQA,EAEvCE,EAAgEC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAAxEI,EAAwBF,EAAA,GAAEG,EAA2BH,EAAA,GACtDI,EAA6BC,EAAO,MACpCC,EAAiBC,GACrB,WAAA,OACEZ,aAAyB,EAAzBA,EAA2Ba,UACzBC,EAACC,EAAgC,CAC/BlB,QAASA,EACTC,KAAMA,EACNC,UAAWA,EACXiB,kBAAmBd,EACnBO,2BAA4BA,GAGlC,GAAA,CAACZ,EAASE,EAAWC,aAAA,EAAAA,EAA2Ba,QAASX,EAAiCJ,IAG5FmB,EAA+B,CAC7BxB,oBAAAA,EACAgB,2BAAAA,EACAlB,wBAAAA,EACAC,wBAAAA,EACAgB,4BAAAA,EACAD,yBAAAA,IAIF,IAAMW,EAASC,GAAY,WACzBX,GAA4B,EAC7B,GAAE,IAEH,OAAKX,aAAA,EAAAA,EAASuB,UAAWpB,eAAAA,EAA2Ba,SAIlDC,EAAC9B,iBAECqC,mBACA,EAAAC,KAAMf,EACNgB,UAAWC,EACXC,YAAa1C,EACb2C,YAAavC,EACbwC,cAAeT,GACVlB,GAA6B,CAAA,EAClC,CAAAa,QAASF,GAAc,CAAAhB,SAEtBA,KAdImB,EAAAc,EAAA,CAAAjC,SAAGA,GAiBd"}