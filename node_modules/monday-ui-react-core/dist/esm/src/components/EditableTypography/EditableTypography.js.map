{"version":3,"file":"EditableTypography.js","sources":["../../../../../src/components/EditableTypography/EditableTypography.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport styles from \"./EditableTypography.module.scss\";\nimport { keyCodes } from \"../../constants\";\nimport { useKeyboardButtonPressedFunc } from \"../../hooks/useKeyboardButtonPressedFunc\";\nimport { TooltipProps } from \"../Tooltip/Tooltip\";\n\nexport interface EditableTypographyImplementationProps {\n  /** Value of the text */\n  value: string;\n  /** Will be called whenever the current value changes to a non-empty value */\n  onChange?: (value: string) => void;\n  /** Will be called whenever the component gets clicked */\n  onClick?: (event: React.KeyboardEvent | React.MouseEvent) => void;\n  /** Disables editing mode - component will be just a typography element */\n  readOnly?: boolean;\n  /** Shown in edit mode when the text value is empty */\n  placeholder?: string;\n  /** ARIA Label */\n  ariaLabel?: string;\n  /** Controls the mode of the component (i.e. view/edit mode) */\n  isEditMode?: boolean;\n  /** Will be called when the mode of the component changes */\n  onEditModeChange?: (isEditMode: boolean) => void;\n  /** Override Tooltip props when needed */\n  tooltipProps?: Partial<TooltipProps>;\n}\n\ninterface EditableTypographyProps extends VibeComponentProps, EditableTypographyImplementationProps {\n  /** A typography component that is being rendered in view mode */\n  component: ElementType;\n  /** Controls the style of the typography component in view mode */\n  typographyClassName: string;\n}\n\nconst EditableTypography: VibeComponent<EditableTypographyProps, HTMLElement> = forwardRef(\n  (\n    {\n      id,\n      className,\n      \"data-testid\": dataTestId,\n      value,\n      onChange,\n      onClick,\n      readOnly = false,\n      ariaLabel = \"\",\n      placeholder,\n      typographyClassName,\n      component: TypographyComponent,\n      isEditMode,\n      onEditModeChange,\n      tooltipProps\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isEditing, setIsEditing] = useState(isEditMode || false);\n    const [inputValue, setInputValue] = useState(value);\n    const [inputWidth, setInputWidth] = useState(0);\n\n    const inputRef = useRef(null);\n    const typographyRef = useRef(null);\n\n    useEffect(() => {\n      setIsEditing(isEditMode);\n    }, [isEditMode]);\n\n    function onTypographyClick(event: React.KeyboardEvent | React.MouseEvent) {\n      onClick?.(event);\n      toggleEditMode(event);\n    }\n\n    function toggleEditMode(event: React.KeyboardEvent | React.MouseEvent) {\n      if (readOnly || isEditing) {\n        return;\n      }\n      event.preventDefault();\n      setIsEditing(true);\n    }\n\n    function handleEditModeChange(value: boolean) {\n      onEditModeChange?.(value);\n      setIsEditing(value);\n    }\n\n    function handleInputValueChange() {\n      handleEditModeChange(false);\n      if (!inputValue || value === inputValue) {\n        setInputValue(value);\n        return;\n      }\n      onChange?.(inputValue);\n    }\n\n    function handleBlur() {\n      handleInputValueChange();\n    }\n\n    function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n      if (event.key === keyCodes.ENTER) {\n        handleInputValueChange();\n      }\n      if (event.key === keyCodes.ESCAPE) {\n        handleEditModeChange(false);\n        setInputValue(value);\n      }\n    }\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n      setInputValue(event.target.value);\n    }\n\n    const toggleKeyboardEditMode = useKeyboardButtonPressedFunc(toggleEditMode);\n\n    function focus() {\n      if (inputRef.current) {\n        inputRef.current?.focus();\n      }\n    }\n\n    useEffect(() => {\n      if (isEditing) {\n        focus();\n      }\n    }, [isEditing]);\n\n    useLayoutEffect(() => {\n      if (!typographyRef.current) {\n        return;\n      }\n      const { width } = typographyRef.current.getBoundingClientRect();\n      setInputWidth(width);\n    }, [inputValue, isEditing]);\n\n    return (\n      <div\n        ref={mergedRef}\n        id={id}\n        aria-label={ariaLabel}\n        data-testid={dataTestId}\n        className={cx(styles.editableTypography, className)}\n        role={isEditing ? null : \"button\"}\n        onClick={onTypographyClick}\n        onKeyDown={toggleKeyboardEditMode}\n      >\n        {isEditing && (\n          <input\n            ref={inputRef}\n            className={cx(styles.input, typographyClassName)}\n            value={inputValue}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onBlur={handleBlur}\n            aria-label={ariaLabel}\n            placeholder={placeholder}\n            style={{ width: inputWidth }}\n            role=\"input\"\n          />\n        )}\n        <TypographyComponent\n          ref={typographyRef}\n          aria-hidden={isEditing}\n          className={cx(styles.typography, typographyClassName, {\n            [styles.hidden]: isEditing,\n            [styles.disabled]: readOnly\n          })}\n          tabIndex={0}\n          tooltipProps={tooltipProps}\n        >\n          {inputValue || placeholder}\n        </TypographyComponent>\n      </div>\n    );\n  }\n);\n\nexport default EditableTypography;\n"],"names":["EditableTypography","forwardRef","_ref","ref","id","className","dataTestId","value","onChange","onClick","_ref$readOnly","readOnly","_ref$ariaLabel","ariaLabel","placeholder","typographyClassName","TypographyComponent","component","isEditMode","onEditModeChange","tooltipProps","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isEditing","setIsEditing","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","inputWidth","setInputWidth","inputRef","typographyRef","toggleEditMode","event","preventDefault","handleEditModeChange","handleInputValueChange","useEffect","toggleKeyboardEditMode","useKeyboardButtonPressedFunc","current","_a","focus","useLayoutEffect","_typographyRef$curren","getBoundingClientRect","width","_jsxs","Object","assign","cx","styles","editableTypography","role","onKeyDown","children","_jsx","input","target","key","keyCodes","ENTER","ESCAPE","onBlur","style","typography","_defineProperty","hidden","disabled","tabIndex"],"mappings":"+fAsCMA,IAAAA,EAA0EC,GAC9E,SAAAC,EAiBEC,GACE,IAhBAC,EAAEF,EAAFE,GACAC,EAASH,EAATG,UACeC,EAAUJ,EAAzB,eACAK,EAAKL,EAALK,MACAC,EAAQN,EAARM,SACAC,EAAOP,EAAPO,QAAOC,EAAAR,EACPS,SAAAA,OAAW,IAAHD,GAAQA,EAAAE,EAAAV,EAChBW,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EACdE,EAAWZ,EAAXY,YACAC,EAAmBb,EAAnBa,oBACWC,EAAmBd,EAA9Be,UACAC,EAAUhB,EAAVgB,WACAC,EAAgBjB,EAAhBiB,iBACAC,EAAYlB,EAAZkB,aAIIC,EAAeC,EAAO,MACtBC,EAAYC,EAAYrB,EAAKkB,GAEnCI,EAAkCC,EAASR,IAAc,GAAMS,EAAAC,EAAAH,EAAA,GAAxDI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAoCL,EAASnB,GAAMyB,EAAAJ,EAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAoCT,EAAS,GAAEU,EAAAR,EAAAO,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EAAWjB,EAAO,MAClBkB,EAAgBlB,EAAO,MAW7B,SAASmB,EAAeC,GAClB/B,GAAYkB,IAGhBa,EAAMC,iBACNb,GAAa,GACf,CAEA,SAASc,EAAqBrC,GAC5BY,SAAAA,EAAmBZ,GACnBuB,EAAavB,EACf,CAEA,SAASsC,IACPD,GAAqB,GAChBX,GAAc1B,IAAU0B,EAI7BzB,SAAAA,EAAWyB,GAHTC,EAAc3B,EAIlB,CA7BAuC,GAAU,WACRhB,EAAaZ,EACf,GAAG,CAACA,IA+CJ,IAAM6B,EAAyBC,EAA6BP,GAsB5D,OAdAK,GAAU,WANV,MAOMjB,GANAU,EAASU,UACO,QAAlBC,EAAAX,EAASU,eAAS,IAAAC,GAAAA,EAAAC,QAQtB,GAAG,CAACtB,IAEJuB,GAAgB,WACd,GAAKZ,EAAcS,QAAnB,CAGA,IAAAI,EAAkBb,EAAcS,QAAQK,wBACxChB,EADae,EAALE,MADP,CAGH,GAAG,CAACtB,EAAYJ,IAGd2B,EACE,MAAAC,OAAAC,OAAA,CAAAvD,IAAKoB,EACLnB,GAAIA,EACQ,aAAAS,EACC,cAAAP,EACbD,UAAWsD,EAAGC,EAAOC,mBAAoBxD,GACzCyD,KAAMjC,EAAY,KAAO,SACzBpB,QA3EJ,SAA2BiC,GACzBjC,SAAAA,EAAUiC,GACVD,EAAeC,EACjB,EAyEIqB,UAAWhB,GAAsB,CAAAiB,SAAA,CAEhCnC,GACCoC,EAAA,QAAA,CACE9D,IAAKoC,EACLlC,UAAWsD,EAAGC,EAAOM,MAAOnD,GAC5BR,MAAO0B,EACPzB,SA1CR,SAAsBkC,GACpBR,EAAcQ,EAAMyB,OAAO5D,MAC7B,EAyCQwD,UArDR,SAAuBrB,GACjBA,EAAM0B,MAAQC,EAASC,OACzBzB,IAEEH,EAAM0B,MAAQC,EAASE,SACzB3B,GAAqB,GACrBV,EAAc3B,GAElB,EA8CQiE,OA1DR,WACE3B,GACF,EAyDoB,aAAAhC,EACZC,YAAaA,EACb2D,MAAO,CAAElB,MAAOlB,GAChByB,KAAK,UAGTG,EAACjD,EACCyC,OAAAC,OAAA,CAAAvD,IAAKqC,EACQ,cAAAX,EACbxB,UAAWsD,EAAGC,EAAOc,WAAY3D,EAAmB4D,EAAAA,KACjDf,EAAOgB,OAAS/C,GAChB+B,EAAOiB,SAAWlE,IAErBmE,SAAU,EACV1D,aAAcA,GAAY,CAAA4C,SAEzB/B,GAAcnB,QAIvB"}