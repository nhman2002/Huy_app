{"version":3,"file":"GridKeyboardNavigationContext.js","sources":["../../../../../src/components/GridKeyboardNavigationContext/GridKeyboardNavigationContext.ts"],"sourcesContent":["import React, { useContext, useCallback, useMemo } from \"react\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport { useLastNavigationDirection } from \"../Menu/Menu/hooks/useLastNavigationDirection\";\nimport {\n  getDirectionMaps,\n  getNextElementToFocusInDirection,\n  getOppositeDirection,\n  getOutmostElementInDirection\n} from \"./helper\";\nimport { NavDirections } from \"../../hooks/useFullKeyboardListeners\";\nimport { GridElementRef, GridKeyboardNavigationContextType, Position } from \"./GridKeyboardNavigationContextConstants\";\n\nexport const GridKeyboardNavigationContext = React.createContext<GridKeyboardNavigationContextType>(null);\n\n/**\n * @param {({topElement: MutableRefObject, bottomElement: MutableRefObject}|\n * {leftElement: MutableRefObject, rightElement: MutableRefObject})[]} positions - the positions of the navigable items\n * @param {*} wrapperRef - a reference for a wrapper element which contains all the referenced elements\n * @param options - { disabled: boolean }\n */\nexport const useGridKeyboardNavigationContext = (\n  positions: Position[],\n  wrapperRef: GridElementRef,\n  options: { disabled: boolean } = { disabled: false }\n) => {\n  const directionMaps = useMemo(() => getDirectionMaps(positions), [positions]);\n  const upperContext = useContext(GridKeyboardNavigationContext);\n  const { lastNavigationDirectionRef } = useLastNavigationDirection();\n\n  const onWrapperFocus = useCallback(() => {\n    const keyboardDirection = lastNavigationDirectionRef.current;\n    if (!keyboardDirection || options.disabled) {\n      return;\n    }\n    const oppositeDirection = getOppositeDirection(keyboardDirection);\n    const refToFocus = getOutmostElementInDirection(directionMaps, oppositeDirection);\n    refToFocus?.current?.focus();\n  }, [directionMaps, options.disabled, lastNavigationDirectionRef]);\n  useEventListener({ eventName: \"focus\", callback: onWrapperFocus, ref: wrapperRef });\n\n  const onOutboundNavigation = useCallback(\n    (elementRef: GridElementRef, direction: NavDirections) => {\n      if (options.disabled) return;\n      const maybeNextElement = getNextElementToFocusInDirection(directionMaps[direction], elementRef);\n      if (maybeNextElement) {\n        elementRef.current?.blur();\n        maybeNextElement.current?.focus();\n        return;\n      }\n      // nothing on that direction - try updating the upper context\n      upperContext?.onOutboundNavigation(wrapperRef, direction);\n    },\n    [directionMaps, upperContext, wrapperRef, options.disabled]\n  );\n  return { onOutboundNavigation };\n};\n"],"names":["GridKeyboardNavigationContext","React","createContext","useGridKeyboardNavigationContext","positions","wrapperRef","options","arguments","length","undefined","disabled","directionMaps","useMemo","getDirectionMaps","upperContext","useContext","_useLastNavigationDir","useLastNavigationDirection","lastNavigationDirectionRef","onWrapperFocus","useCallback","keyboardDirection","current","oppositeDirection","getOppositeDirection","refToFocus","getOutmostElementInDirection","_a","focus","useEventListener","eventName","callback","ref","onOutboundNavigation","elementRef","direction","maybeNextElement","getNextElementToFocusInDirection","blur","_b"],"mappings":"wWAYO,IAAMA,EAAgCC,EAAMC,cAAiD,MAQvFC,EAAmC,SAC9CC,EACAC,GAEE,IADFC,EAAAC,UAAAC,OAAAD,QAAAE,IAAAF,UAAAE,GAAAF,UAAiC,GAAA,CAAEG,UAAU,GAEvCC,EAAgBC,GAAQ,WAAA,OAAMC,EAAiBT,KAAY,CAACA,IAC5DU,EAAeC,EAAWf,GAChCgB,EAAuCC,IAA/BC,EAA0BF,EAA1BE,2BAEFC,EAAiBC,GAAY,iBAC3BC,EAAoBH,EAA2BI,QACrD,GAAKD,IAAqBf,EAAQI,SAAlC,CAGA,IAAMa,EAAoBC,EAAqBH,GACzCI,EAAaC,EAA6Bf,EAAeY,GAC5C,QAAnBI,EAAAF,aAAA,EAAAA,EAAYH,eAAO,IAAAK,GAAAA,EAAEC,OAHpB,CAIF,GAAE,CAACjB,EAAeL,EAAQI,SAAUQ,IACrCW,EAAiB,CAAEC,UAAW,QAASC,SAAUZ,EAAgBa,IAAK3B,IAEtE,IAAM4B,EAAuBb,GAC3B,SAACc,EAA4BC,WAC3B,IAAI7B,EAAQI,SAAZ,CACA,IAAM0B,EAAmBC,EAAiC1B,EAAcwB,GAAYD,GACpF,GAAIE,EAGF,OAFoB,QAApBT,EAAAO,EAAWZ,eAAS,IAAAK,GAAAA,EAAAW,YACM,QAA1BC,EAAAH,EAAiBd,eAAS,IAAAiB,GAAAA,EAAAX,SAI5Bd,SAAAA,EAAcmB,qBAAqB5B,EAAY8B,EARzB,CASxB,GACA,CAACxB,EAAeG,EAAcT,EAAYC,EAAQI,WAEpD,MAAO,CAAEuB,qBAAAA,EACX"}