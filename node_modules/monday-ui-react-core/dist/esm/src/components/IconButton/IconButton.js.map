{"version":3,"file":"IconButton.js","sources":["../../../../../src/components/IconButton/IconButton.tsx"],"sourcesContent":["import React, { forwardRef, Fragment, useMemo, useRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport Icon from \"../Icon/Icon\";\nimport AddSmall from \"../Icon/Icons/components/AddSmall\";\nimport { getWidthHeight, Size } from \"./services/IconButton-helpers\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport Button from \"../Button/Button\";\nimport { BUTTON_ICON_SIZE, ButtonColor, ButtonType } from \"../Button/ButtonConstants\";\nimport styles from \"./IconButton.module.scss\";\n\nexport interface IconButtonProps extends VibeComponentProps {\n  /**\n   * id to be added to the element\n   */\n  id?: string;\n  /**\n   * callback function when clicking the icon button\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * the class name of the button wrapper\n   */\n  wrapperClassName?: string;\n  /**\n   * the class name of the button icon\n   */\n  iconClassName?: string;\n  /**\n   * Icon to be rendered\n   */\n  icon?: SubIcon;\n  /**\n   * a11y property to be added, used for screen reader to know what kind of button it is\n   */\n  ariaLabel?: string;\n  /**\n   * a11y property to be added, used for screen reader to know if the button is expanded\n   */\n  ariaExpanded?: boolean;\n  /**\n   * Size of the icon\n   */\n  size?: Size;\n  /**\n   * Whether the tooltip should be displayed or not\n   */\n  hideTooltip?: boolean;\n  /**\n   * Props for Tooltip component\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Tooltip wraps the button icon, it will display in the tooltip, if not present the aria label will be shown\n   */\n  tooltipContent?: string;\n  /**\n   * Kind of button - like <Button />\n   */\n  kind?: ButtonType;\n  active?: boolean;\n  /** The button's color  */\n  color?: ButtonColor;\n  /**\n   * disabled state\n   */\n  disabled?: boolean;\n  /**\n   * if disabled - this will be shown in the tooltip\n   */\n  disabledReason?: string;\n  /**\n   * @deprecated - use \"data-testid\" instead\n   */\n  dataTestId?: string;\n  /** Change the focus indicator from around the button to within it */\n  insetFocus?: boolean;\n  /** Specifies the tab order of an element */\n  tabIndex?: number;\n}\n\nconst IconButton: VibeComponent<IconButtonProps> & {\n  sizes?: typeof Button.sizes;\n  kinds?: typeof Button.kinds;\n  colors?: typeof Button.colors;\n} = forwardRef(\n  (\n    {\n      className,\n      wrapperClassName,\n      iconClassName,\n      id,\n      icon = AddSmall,\n      size = IconButton.sizes.MEDIUM,\n      tooltipProps = {} as TooltipProps,\n      tooltipContent,\n      ariaLabel,\n      ariaExpanded,\n      hideTooltip = false,\n      kind = IconButton.kinds.TERTIARY,\n      active,\n      disabled = false,\n      disabledReason,\n      onClick = NOOP,\n      color,\n      dataTestId: backwardCompatabilityDataTestId,\n      \"data-testid\": dataTestId,\n      insetFocus = false,\n      tabIndex\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const overrideDataTestId = backwardCompatibilityForProperties([dataTestId, backwardCompatabilityDataTestId]);\n    const overrideTooltipContent = useMemo(\n      () => tooltipProps?.content || tooltipContent,\n      [tooltipProps?.content, tooltipContent]\n    );\n\n    const buttonAriaLabel = useMemo(() => {\n      if (ariaLabel) return ariaLabel;\n      if (typeof overrideTooltipContent === \"string\") return overrideTooltipContent;\n      return undefined;\n    }, [ariaLabel, overrideTooltipContent]);\n\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case IconButton.sizes.XXS:\n        case IconButton.sizes.XS:\n          return 16;\n        case IconButton.sizes.SMALL:\n        case IconButton.sizes.MEDIUM:\n        case IconButton.sizes.LARGE:\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n\n    const overrideStyle = useMemo(() => {\n      let style = {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        padding: 0\n      } as React.CSSProperties;\n\n      if (size) {\n        style = { ...style, ...getWidthHeight(size) };\n      }\n      return style;\n    }, [size]);\n\n    const calculatedTooltipContent = useMemo(() => {\n      if (hideTooltip) return null;\n      if (disabled && disabledReason) return disabledReason;\n      if (overrideTooltipContent) return overrideTooltipContent as never;\n      return ariaLabel;\n    }, [hideTooltip, disabled, disabledReason, overrideTooltipContent, ariaLabel]);\n\n    const IconButtonWrapper = wrapperClassName ? \"div\" : Fragment;\n    const iconButtonWrapperProps = useMemo(() => {\n      return wrapperClassName ? { className: cx(wrapperClassName, styles.wrapper) } : {};\n    }, [wrapperClassName]);\n\n    return (\n      <IconButtonWrapper {...iconButtonWrapperProps}>\n        <Tooltip\n          {...tooltipProps}\n          content={calculatedTooltipContent}\n          referenceWrapperClassName={styles.referenceWrapper}\n        >\n          <Button\n            onClick={onClick}\n            disabled={disabled}\n            color={color}\n            kind={kind}\n            ariaLabel={buttonAriaLabel}\n            ariaExpanded={ariaExpanded}\n            ref={mergedRef}\n            id={id}\n            data-testid={overrideDataTestId || getTestId(ComponentDefaultTestId.ICON_BUTTON, id)}\n            noSidePadding\n            active={active}\n            className={className}\n            style={overrideStyle}\n            insetFocus={insetFocus}\n            tabIndex={tabIndex}\n          >\n            <Icon\n              icon={icon}\n              iconType={Icon.type.SVG}\n              iconSize={iconSize}\n              ignoreFocusStyle\n              className={iconClassName}\n              clickable={false}\n            />\n          </Button>\n        </Tooltip>\n      </IconButtonWrapper>\n    );\n  }\n);\n\nexport default withStaticProps(IconButton, {\n  sizes: Button.sizes,\n  kinds: Button.kinds,\n  colors: Button.colors\n});\n"],"names":["IconButton","forwardRef","_ref","ref","className","wrapperClassName","iconClassName","id","_ref$icon","icon","AddSmall","_ref$size","size","sizes","MEDIUM","_ref$tooltipProps","tooltipProps","tooltipContent","ariaLabel","ariaExpanded","_ref$hideTooltip","hideTooltip","_ref$kind","kind","kinds","TERTIARY","active","_ref$disabled","disabled","disabledReason","_ref$onClick","onClick","NOOP","color","backwardCompatabilityDataTestId","dataTestId","_ref$insetFocus","insetFocus","tabIndex","componentRef","useRef","mergedRef","useMergeRef","overrideDataTestId","backwardCompatibilityForProperties","overrideTooltipContent","useMemo","content","buttonAriaLabel","iconSize","XXS","XS","SMALL","LARGE","BUTTON_ICON_SIZE","overrideStyle","style","justifyContent","alignItems","padding","Object","assign","getWidthHeight","calculatedTooltipContent","IconButtonWrapper","Fragment","iconButtonWrapperProps","cx","styles","wrapper","_jsx","children","Tooltip","referenceWrapperClassName","referenceWrapper","Button","getTestId","ComponentDefaultTestId","ICON_BUTTON","noSidePadding","Icon","iconType","type","SVG","ignoreFocusStyle","clickable","withStaticProps","colors"],"mappings":"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"}