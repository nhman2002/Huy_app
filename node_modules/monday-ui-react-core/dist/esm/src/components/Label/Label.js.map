{"version":3,"file":"Label.js","sources":["../../../../../src/components/Label/Label.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport React, { forwardRef, useCallback, useMemo, useRef } from \"react\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport Text from \"../Text/Text\";\nimport Leg from \"./Leg\";\nimport { LabelColor, LabelKind } from \"./LabelConstants\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport useClickableProps from \"../../hooks/useClickableProps/useClickableProps\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport styles from \"./Label.module.scss\";\n\ninterface LabelProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  wrapperClassName?: string;\n  /**\n   * Class name for an inner text wrapper\n   */\n  labelClassName?: string;\n  kind?: LabelKind;\n  color?: LabelColor;\n  text?: string;\n  isAnimationDisabled?: boolean;\n  isLegIncluded?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n}\n\nconst Label: VibeComponent<LabelProps> & {\n  colors?: typeof LabelColor;\n  kinds?: typeof LabelKind;\n} = forwardRef<HTMLElement, LabelProps>(\n  (\n    {\n      className,\n      wrapperClassName,\n      labelClassName,\n      kind = LabelKind.FILL,\n      color = LabelColor.PRIMARY,\n      text = \"\",\n      isAnimationDisabled = false,\n      isLegIncluded = false,\n      id,\n      \"data-testid\": dataTestId,\n      onClick\n    },\n    ref\n  ) => {\n    const labelRef = useRef<HTMLSpanElement>(null);\n    const mergedRef = useMergeRef(ref, labelRef);\n\n    const overrideClassName = backwardCompatibilityForProperties([className, wrapperClassName]) as string;\n    const isClickable = Boolean(onClick);\n\n    const classNames = useMemo(\n      () =>\n        cx(\n          styles.label,\n          getStyle(styles, camelCase(\"kind\" + \"-\" + kind)),\n          getStyle(styles, camelCase(\"color\" + \"-\" + color)),\n          {\n            [styles.withAnimation]: !isAnimationDisabled,\n            [styles.withLeg]: isLegIncluded\n          },\n          labelClassName\n        ),\n      [kind, color, isAnimationDisabled, isLegIncluded, labelClassName]\n    );\n\n    const onClickCallback = useCallback(\n      (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        if (onClick) {\n          event.preventDefault();\n          onClick(event);\n        }\n      },\n      [onClick]\n    );\n\n    const clickableProps = useClickableProps(\n      {\n        onClick: onClickCallback,\n        id,\n        ariaHidden: false,\n        ariaHasPopup: false,\n        ariaExpanded: false\n      },\n      labelRef\n    );\n\n    return (\n      <span\n        {...(isClickable && clickableProps)}\n        className={cx({ [styles.clickable]: isClickable }, overrideClassName)}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.LABEL, id)}\n        ref={mergedRef}\n      >\n        <Text element=\"span\" type={Text.types.TEXT2} className={classNames} color={Text.colors.ON_INVERTED}>\n          <span>{text}</span>\n          <span className={cx(styles.legWrapper)}>{isLegIncluded ? <Leg /> : null}</span>\n        </Text>\n      </span>\n    );\n  }\n);\n\nexport default withStaticProps(Label, {\n  colors: LabelColor,\n  kinds: LabelKind\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","wrapperClassName","labelClassName","_ref$kind","kind","LabelKind","FILL","_ref$color","color","LabelColor","PRIMARY","_ref$text","text","_ref$isAnimationDisab","isAnimationDisabled","_ref$isLegIncluded","isLegIncluded","id","dataTestId","onClick","labelRef","useRef","mergedRef","useMergeRef","overrideClassName","backwardCompatibilityForProperties","isClickable","classNames","useMemo","cx","styles","label","getStyle","camelCase","_defineProperty","withAnimation","withLeg","onClickCallback","useCallback","event","preventDefault","clickableProps","useClickableProps","ariaHidden","ariaHasPopup","ariaExpanded","_jsx","clickable","getTestId","ComponentDefaultTestId","LABEL","children","_jsxs","Text","Object","assign","element","type","types","TEXT2","colors","ON_INVERTED","legWrapper","Leg","kinds"],"mappings":"u1BA+BA,IA8EeA,EAAAA,EA3EXC,GACF,SAAAC,EAcEC,GACE,IAbAC,EAASF,EAATE,UACAC,EAAgBH,EAAhBG,iBACAC,EAAcJ,EAAdI,eAAcC,EAAAL,EACdM,KAAAA,OAAI,IAAAD,EAAGE,EAAUC,KAAIH,EAAAI,EAAAT,EACrBU,MAAAA,OAAK,IAAAD,EAAGE,EAAWC,QAAOH,EAAAI,EAAAb,EAC1Bc,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAE,EAAAf,EACTgB,oBAAAA,OAAsB,IAAHD,GAAQA,EAAAE,EAAAjB,EAC3BkB,cAAAA,OAAgB,IAAHD,GAAQA,EACrBE,EAAEnB,EAAFmB,GACeC,EAAUpB,EAAzB,eACAqB,EAAOrB,EAAPqB,QAIIC,EAAWC,EAAwB,MACnCC,EAAYC,EAAYxB,EAAKqB,GAE7BI,EAAoBC,EAAmC,CAACzB,EAAWC,IACnEyB,IAAsBP,EAEtBQ,EAAaC,GACjB,WAAA,OACEC,EACEC,EAAOC,MACPC,EAASF,EAAQG,EAAU,QAAe7B,IAC1C4B,EAASF,EAAQG,EAAU,SAAgBzB,IAAO0B,EAAAA,EAAA,CAAA,EAE/CJ,EAAOK,eAAiBrB,GACxBgB,EAAOM,QAAUpB,GAEpBd,KAEJ,CAACE,EAAMI,EAAOM,EAAqBE,EAAed,IAG9CmC,EAAkBC,GACtB,SAACC,GACKpB,IACFoB,EAAMC,iBACNrB,EAAQoB,GAEZ,GACA,CAACpB,IAGGsB,EAAiBC,EACrB,CACEvB,QAASkB,EACTpB,GAAAA,EACA0B,YAAY,EACZC,cAAc,EACdC,cAAc,GAEhBzB,GAGF,OACE0B,0BACOpB,GAAee,GACpBzC,UAAW6B,EAAEK,EAAIJ,CAAAA,EAAAA,EAAOiB,UAAYrB,GAAeF,GACtC,cAAAN,GAAc8B,EAAUC,EAAuBC,MAAOjC,GACnElB,IAAKuB,GAEL,CAAA6B,SAAAC,EAACC,EAAKC,OAAAC,OAAA,CAAAC,QAAQ,OAAOC,KAAMJ,EAAKK,MAAMC,MAAO3D,UAAW2B,EAAYnB,MAAO6C,EAAKO,OAAOC,wBACrFf,EAAO,OAAA,CAAAK,SAAAvC,IACPkC,EAAM,OAAAQ,OAAAC,OAAA,CAAAvD,UAAW6B,EAAGC,EAAOgC,aAAc,CAAAX,SAAAnC,EAAgB8B,EAACiB,EAAG,CAAA,GAAM,cAI3E,IAGoC,CACpCH,OAAQnD,EACRuD,MAAO3D"}