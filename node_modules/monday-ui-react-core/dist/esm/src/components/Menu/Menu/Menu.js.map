{"version":3,"file":"Menu.js","sources":["../../../../../../src/components/Menu/Menu/Menu.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport { SIZES } from \"../../../constants/sizes\";\nimport React, {\n  forwardRef,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport useMergeRef from \"../../../hooks/useMergeRef\";\nimport useClickOutside from \"../../../hooks/useClickOutside\";\nimport { backwardCompatibilityForProperties } from \"../../../helpers/backwardCompatibilityForProperties\";\nimport useSubMenuIndex from \"./hooks/useSubMenuIndex\";\nimport useOnCloseMenu from \"./hooks/useOnCloseMenu\";\nimport useCloseMenuOnKeyEvent from \"./hooks/useCloseMenuOnKeyEvent\";\nimport useMenuKeyboardNavigation from \"./hooks/useMenuKeyboardNavigation\";\nimport useMouseLeave from \"./hooks/useMouseLeave\";\nimport { useAdjacentSelectableMenuIndex } from \"./hooks/useAdjacentSelectableMenuIndex\";\nimport { useFocusWithin } from \"../../../hooks/useFocusWithin\";\nimport usePrevious from \"../../../hooks/usePrevious\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { CloseMenuOption, MenuChild } from \"./MenuConstants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { useFocusOnMount } from \"./hooks/useFocusOnMount\";\nimport { useMenuId } from \"./hooks/useMenuId\";\nimport { generateMenuItemId } from \"./utils/utils\";\nimport styles from \"./Menu.module.scss\";\n\nexport interface MenuProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  classname?: string;\n  size?: (typeof SIZES)[keyof typeof SIZES];\n  tabIndex?: number;\n  ariaLabel?: string;\n  ariaDescribedBy?: string;\n  focusOnMount?: boolean;\n  isVisible?: boolean;\n  onClose?: (option: CloseMenuOption) => void;\n  focusItemIndex?: number;\n  isSubMenu?: boolean;\n  useDocumentEventListeners?: boolean;\n  focusItemIndexOnMount?: number;\n  shouldScrollMenu?: boolean;\n  children?: ElementContent;\n}\n\nconst Menu: VibeComponent<MenuProps> & {\n  isMenu?: boolean;\n  supportFocusOnMount?: boolean;\n  sizes?: typeof SIZES;\n} = forwardRef(\n  (\n    {\n      id,\n      className,\n      // Backward compatibility for props naming\n      classname,\n      size = Menu.sizes.MEDIUM,\n      tabIndex = 0,\n      ariaLabel = \"Menu\",\n      ariaDescribedBy,\n      children: originalChildren,\n      isVisible = true,\n      onClose,\n      focusOnMount = false,\n      focusItemIndex = -1,\n      focusItemIndexOnMount = -1,\n      isSubMenu = false,\n      useDocumentEventListeners = false,\n      shouldScrollMenu = false,\n      \"data-testid\": dataTestId\n    },\n    forwardedRef\n  ) => {\n    const ref = useRef(null);\n    const mergedRef = useMergeRef(ref, forwardedRef);\n\n    const overrideId = useMenuId(id);\n    const splitMenuItemIconButtonRef = useRef<HTMLElement>(null);\n\n    const overrideClassName = backwardCompatibilityForProperties([className, classname]);\n    const [activeItemIndex, setActiveItemIndex] = useState(focusItemIndex);\n    const [isInitialSelectedState, setIsInitialSelectedState] = useState(false);\n\n    const children = useMemo(() => {\n      const allChildren = React.Children.toArray(originalChildren) as MenuChild[];\n      return allChildren.filter(child => {\n        if (child.type.isMenuChild) return true;\n        console.error(\n          \"Menu child must be a menuChild item (such as MenuItem, MenuDivider, MenuTitle, etc). This child is not supported: \",\n          child\n        );\n        return false;\n      });\n    }, [originalChildren]);\n\n    const updateActiveItemIndex = useCallback(\n      (index: number) => {\n        setActiveItemIndex(index);\n\n        const activeChild = children[index];\n        const ariaActiveDescendant = React.isValidElement(activeChild)\n          ? activeChild?.props?.id || `${overrideId}-item-${index}`\n          : undefined;\n        if (ariaActiveDescendant) {\n          ref?.current?.setAttribute(\"aria-activedescendant\", ariaActiveDescendant);\n        } else {\n          ref?.current?.removeAttribute(\"aria-activedescendant\");\n        }\n      },\n      [children, overrideId]\n    );\n\n    const onSetActiveItemIndexCallback = useCallback(\n      (index: number) => {\n        updateActiveItemIndex(index);\n        setIsInitialSelectedState(false);\n      },\n      [updateActiveItemIndex]\n    );\n\n    const { setSubMenuIsOpenByIndex, hasOpenSubMenu, openSubMenuIndex, setOpenSubMenuIndex, resetOpenSubMenuIndex } =\n      useSubMenuIndex();\n\n    const onCloseMenu = useOnCloseMenu({\n      setActiveItemIndex: onSetActiveItemIndexCallback,\n      setOpenSubMenuIndex,\n      onClose\n    });\n\n    useClickOutside({ ref, callback: () => onCloseMenu() });\n    useCloseMenuOnKeyEvent({ hasOpenSubMenu, onCloseMenu, ref, onClose, isSubMenu, useDocumentEventListeners });\n\n    const { getNextSelectableIndex, getPreviousSelectableIndex } = useAdjacentSelectableMenuIndex({\n      children: children as ReactElement[]\n    });\n    useMenuKeyboardNavigation({\n      hasOpenSubMenu,\n      getNextSelectableIndex,\n      getPreviousSelectableIndex,\n      activeItemIndex,\n      setActiveItemIndex: onSetActiveItemIndexCallback,\n      isVisible,\n      ref,\n      useDocumentEventListeners\n    });\n    useMouseLeave({\n      resetOpenSubMenuIndex,\n      hasOpenSubMenu,\n      ref,\n      setActiveItemIndex: onSetActiveItemIndexCallback\n    });\n    useFocusOnMount({\n      focusItemIndexOnMount,\n      focusChildOnMount: children[focusItemIndexOnMount] as ReactElement,\n      getNextSelectableIndex,\n      updateActiveItemIndex,\n      setIsInitialFocusSet: setIsInitialSelectedState\n    });\n\n    const onMouseMove = useCallback(() => {\n      setIsInitialSelectedState(true);\n    }, [setIsInitialSelectedState]);\n\n    const previousHasOpenSubMenu = usePrevious(hasOpenSubMenu);\n    useEffect(() => {\n      if (hasOpenSubMenu || useDocumentEventListeners) return;\n      if (activeItemIndex > -1 && previousHasOpenSubMenu) {\n        // the submenu was just closed, so we want to focus the menu to capture keyboard events\n        ref?.current?.focus();\n      }\n    }, [activeItemIndex, hasOpenSubMenu, previousHasOpenSubMenu, useDocumentEventListeners]);\n\n    useLayoutEffect(() => {\n      if (!focusOnMount || useDocumentEventListeners) return;\n      requestAnimationFrame(() => {\n        ref && ref.current && ref.current.focus();\n      });\n    }, [ref, focusOnMount, useDocumentEventListeners]);\n\n    const { focusWithinProps } = useFocusWithin({\n      onBlurWithin: () => {\n        onCloseMenu && onCloseMenu();\n      }\n    });\n\n    return (\n      <ul\n        onFocus={focusWithinProps?.onFocus}\n        onBlur={focusWithinProps?.onBlur}\n        id={overrideId}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU, id)}\n        className={cx(styles.menu, getStyle(styles, size), overrideClassName)}\n        ref={mergedRef}\n        tabIndex={tabIndex}\n        aria-label={ariaLabel}\n        role=\"menu\"\n        aria-describedby={ariaDescribedBy}\n        onMouseOver={onMouseMove}\n      >\n        {children &&\n          React.Children.map(children, (child, index) => {\n            return React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  ...child?.props,\n                  activeItemIndex,\n                  index,\n                  setActiveItemIndex: updateActiveItemIndex,\n                  menuRef: ref,\n                  resetOpenSubMenuIndex,\n                  isParentMenuVisible: isVisible,\n                  setSubMenuIsOpenByIndex,\n                  hasOpenSubMenu: index === openSubMenuIndex,\n                  closeMenu: onCloseMenu,\n                  id: generateMenuItemId(overrideId, child, index),\n                  useDocumentEventListeners,\n                  isInitialSelectedState,\n                  shouldScrollMenu,\n                  getNextSelectableIndex,\n                  getPreviousSelectableIndex,\n                  isUnderSubMenu: isSubMenu,\n                  splitMenuItemIconButtonRef\n                })\n              : null;\n          })}\n      </ul>\n    );\n  }\n);\n\nObject.assign(Menu, {\n  isMenu: true,\n  supportFocusOnMount: true\n});\n\nexport default withStaticProps(Menu, {\n  sizes: SIZES\n});\n"],"names":["Menu","forwardRef","_ref","forwardedRef","id","className","classname","_ref$size","size","sizes","MEDIUM","_ref$tabIndex","tabIndex","_ref$ariaLabel","ariaLabel","ariaDescribedBy","originalChildren","children","_ref$isVisible","isVisible","onClose","_ref$focusOnMount","focusOnMount","_ref$focusItemIndex","focusItemIndex","_ref$focusItemIndexOn","focusItemIndexOnMount","_ref$isSubMenu","isSubMenu","_ref$useDocumentEvent","useDocumentEventListeners","_ref$shouldScrollMenu","shouldScrollMenu","dataTestId","ref","useRef","mergedRef","useMergeRef","overrideId","useMenuId","splitMenuItemIconButtonRef","overrideClassName","backwardCompatibilityForProperties","_useState","useState","_useState2","_slicedToArray","activeItemIndex","setActiveItemIndex","_useState3","_useState4","isInitialSelectedState","setIsInitialSelectedState","useMemo","React","Children","toArray","filter","child","type","isMenuChild","console","error","updateActiveItemIndex","useCallback","index","activeChild","ariaActiveDescendant","isValidElement","_a","props","concat","undefined","_b","current","setAttribute","_c","removeAttribute","onSetActiveItemIndexCallback","_useSubMenuIndex","useSubMenuIndex","setSubMenuIsOpenByIndex","hasOpenSubMenu","openSubMenuIndex","resetOpenSubMenuIndex","onCloseMenu","useOnCloseMenu","setOpenSubMenuIndex","useClickOutside","callback","useCloseMenuOnKeyEvent","_useAdjacentSelectabl","useAdjacentSelectableMenuIndex","getNextSelectableIndex","getPreviousSelectableIndex","useMenuKeyboardNavigation","useMouseLeave","useFocusOnMount","focusChildOnMount","setIsInitialFocusSet","onMouseMove","previousHasOpenSubMenu","usePrevious","useEffect","focus","useLayoutEffect","requestAnimationFrame","focusWithinProps","useFocusWithin","onBlurWithin","_jsx","Object","assign","onFocus","onBlur","getTestId","ComponentDefaultTestId","MENU","cx","styles","menu","getStyle","role","onMouseOver","map","cloneElement","menuRef","isParentMenuVisible","closeMenu","generateMenuItemId","isUnderSubMenu","isMenu","supportFocusOnMount","withStaticProps","SIZES"],"mappings":"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"}