{"version":3,"file":"ModalHeader.js","sources":["../../../../../../src/components/Modal/ModalHeader/ModalHeader.tsx"],"sourcesContent":["import React, { FC } from \"react\";\nimport cx from \"classnames\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport CloseSmall from \"../../Icon/Icons/components/CloseSmall\";\nimport Icon, { IconSubComponentProps } from \"../../Icon/Icon\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { NOOP } from \"../../../utils/function-utils\";\nimport { ElementContent } from \"src/types/ElementContent\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport Text from \"../../Text/Text\";\nimport Heading from \"../../Heading/Heading\";\nimport Flex from \"../../Flex/Flex\";\nimport styles from \"./ModalHeader.module.scss\";\n\nexport interface ModalHeaderProps extends VibeComponentProps {\n  /**\n   * Heading of the modal - using string is a recommended standard, as it provides well-defined styles. Using it with JSX content should be according to design guidelines.\n   */\n  title: ElementContent;\n  /**\n   * Slot for the heading of the modal for maximum flexibility. Using it should be according to design and typography guidelines\n   */\n  children?: ElementContent;\n  /**\n   * Description of the modal - pure string description is a recommended standard, use JSX ability only if there is a need to add links\n   */\n  description?: ElementContent;\n  /**\n   * Icon to be rendered before the title\n   */\n  icon?: string | React.FunctionComponent<IconSubComponentProps> | null;\n  /**\n   * Class name for the wrapper\n   */\n  className?: string;\n  /**\n   * Class name for the title\n   */\n  titleClassName?: string;\n  /**\n   * closes the Modal. No need to provide it, it is being provided by the modal\n   */\n  closeModal?: () => void;\n  /**  /**\n   * ID for the title, needed for accessibility. No need to provide it, it is being provided by the modal\n   */\n  id?: string;\n  /**\n   * Class name for the description\n   */\n  descriptionClassName?: string;\n  /**\n   * Size of the icon\n   */\n  iconSize?: number;\n  /**\n   * class name for the icon\n   */\n  iconClassName?: string;\n  /**\n   * Aria label for the close button\n   */\n  closeButtonAriaLabel?: string;\n  /**\n   * Should close button be hidden or not\n   */\n  hideCloseButton?: boolean;\n}\n\nconst ModalHeader: FC<ModalHeaderProps> = ({\n  className,\n  title,\n  children,\n  titleClassName,\n  description = \"\",\n  descriptionClassName,\n  icon,\n  closeModal = NOOP,\n  iconSize = 24,\n  iconClassName,\n  // TODO remove hideCloseButton on the next breaking changes\n  // eslint-disable-next-line\n  hideCloseButton,\n  closeButtonAriaLabel = \"close\",\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  return (\n    <div\n      className={cx(styles.container, className)}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.MODAL_HEADER, id)}\n    >\n      {children ? (\n        children\n      ) : (\n        <Flex align={Flex.align.START} gap={Flex.gaps.SMALL} className={titleClassName}>\n          {icon && (\n            <Icon\n              className={cx(styles.icon, iconClassName)}\n              icon={icon}\n              iconType={Icon.type.SVG}\n              iconSize={iconSize}\n              ignoreFocusStyle\n              clickable={false}\n            />\n          )}\n          <Heading id={id} maxLines={2}>\n            {title}\n          </Heading>\n        </Flex>\n      )}\n      {description && (\n        <Text type={Text.types.TEXT2} maxLines={2} className={cx(styles.description, descriptionClassName)}>\n          {description}\n        </Text>\n      )}\n\n      <div className={cx(styles.closeButton)}>\n        <IconButton\n          key=\"xxs\"\n          onClick={closeModal}\n          ariaLabel={closeButtonAriaLabel}\n          icon={CloseSmall}\n          kind={IconButton.kinds.TERTIARY}\n          size={IconButton.sizes.SMALL}\n        />\n      </div>\n    </div>\n  );\n};\n\nObject.assign(ModalHeader, {\n  displayName: \"ModalHeader\"\n});\n\nexport default ModalHeader;\n"],"names":["ModalHeader","_ref","title","children","titleClassName","_ref$description","description","descriptionClassName","icon","_ref$closeModal","closeModal","NOOP","_ref$iconSize","iconSize","iconClassName","_ref$closeButtonAriaL","closeButtonAriaLabel","id","dataTestId","_jsxs","className","cx","styles","container","getTestId","ComponentDefaultTestId","MODAL_HEADER","Flex","align","START","gap","gaps","SMALL","_jsx","Icon","iconType","type","SVG","ignoreFocusStyle","clickable","Heading","Object","assign","maxLines","Text","types","TEXT2","closeButton","IconButton","onClick","ariaLabel","CloseSmall","kind","kinds","TERTIARY","size","sizes","displayName","ModalHeader$1"],"mappings":"giBAsEA,IAAMA,EAAoC,SAAzBC,GAiBZ,IAfHC,EAAKD,EAALC,MACAC,EAAQF,EAARE,SACAC,EAAcH,EAAdG,eAAcC,EAAAJ,EACdK,YAAAA,OAAc,IAAHD,EAAG,GAAEA,EAChBE,EAAoBN,EAApBM,qBACAC,EAAIP,EAAJO,KAAIC,EAAAR,EACJS,WAAAA,OAAaC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAX,EACjBY,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EACbE,EAAab,EAAba,cAGeC,EAAAd,EACfe,qBAAAA,OAAuB,IAAHD,EAAG,QAAOA,EAC9BE,EAAEhB,EAAFgB,GACeC,EAAUjB,EAAzB,eAEA,OACEkB,uBACEC,UAAWC,EAAGC,EAAOC,UAnBhBtB,EAATmB,WAmB8C,cAC7BF,GAAcM,EAAUC,EAAuBC,aAAcT,IAEzE,CAAAd,SAAA,CAAAA,GAGCgB,EAACQ,iBAAKC,MAAOD,EAAKC,MAAMC,MAAOC,IAAKH,EAAKI,KAAKC,MAAOZ,UAAWhB,GAC7D,CAAAD,SAAA,CAAAK,GACCyB,EAACC,EACC,CAAAd,UAAWC,EAAGC,EAAOd,KAAMM,GAC3BN,KAAMA,EACN2B,SAAUD,EAAKE,KAAKC,IACpBxB,SAAUA,EACVyB,kBAAgB,EAChBC,WAAW,IAGfN,EAACO,EAAQC,OAAAC,OAAA,CAAAzB,GAAIA,EAAI0B,SAAU,aACxBzC,SAINI,GACC2B,EAACW,EAAIH,OAAAC,OAAA,CAACN,KAAMQ,EAAKC,MAAMC,MAAOH,SAAU,EAAGvB,UAAWC,EAAGC,EAAOhB,YAAaC,IAAqB,CAAAJ,SAC/FG,KAIL2B,EAAA,MAAAQ,OAAAC,OAAA,CAAKtB,UAAWC,EAAGC,EAAOyB,cAAY,CAAA5C,SACpC8B,EAACe,EAAU,CAETC,QAASvC,EACTwC,UAAWlC,EACXR,KAAM2C,EACNC,KAAMJ,EAAWK,MAAMC,SACvBC,KAAMP,EAAWQ,MAAMxB,OALnB,aAUd,EAEAS,OAAOC,OAAO1C,EAAa,CACzByD,YAAa,gBAGf,IAAAC,EAAe1D"}