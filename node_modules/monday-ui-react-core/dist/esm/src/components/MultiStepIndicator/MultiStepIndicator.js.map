{"version":3,"file":"MultiStepIndicator.js","sources":["../../../../../src/components/MultiStepIndicator/MultiStepIndicator.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useCallback, useMemo } from \"react\";\nimport Check from \"../../components/Icon/Icons/components/Check\";\nimport Divider from \"../../components/Divider/Divider\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport StepIndicator from \"./components/StepIndicator/StepIndicator\";\nimport { MultiStepType, Size, StepStatus, TextPlacement } from \"./MultiStepConstants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { IconType } from \"../Icon/IconConstants\";\nimport styles from \"./MultiStepIndicator.module.scss\";\n\nexport type Step = {\n  titleText: string;\n  subtitleText: string;\n  status: StepStatus;\n};\n\ninterface MultiStepIndicatorProps extends VibeComponentProps {\n  steps?: Step[];\n  type?: MultiStepType;\n  stepComponentClassName?: string;\n  dividerComponentClassName?: string;\n  fulfilledStepIcon?: SubIcon;\n  fulfilledStepIconType?: IconType.SVG | IconType.ICON_FONT;\n  isFulfilledStepDisplayNumber?: boolean;\n  onClick?: (stepNumber: number) => void;\n  textPlacement?: TextPlacement;\n  size?: Size;\n}\n\nconst MultiStepIndicator: VibeComponent<MultiStepIndicatorProps, HTMLOListElement> & {\n  types?: typeof MultiStepType;\n  stepStatuses?: typeof StepStatus;\n  textPlacements?: typeof TextPlacement;\n  sizes?: typeof Size;\n} = forwardRef(\n  (\n    {\n      className,\n      steps = [],\n      type = MultiStepType.PRIMARY,\n      stepComponentClassName,\n      dividerComponentClassName,\n      fulfilledStepIcon = Check,\n      fulfilledStepIconType = IconType.SVG,\n      isFulfilledStepDisplayNumber = false,\n      onClick = NOOP,\n      textPlacement = TextPlacement.HORIZONTAL,\n      id,\n      size,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const finalSize = textPlacement === TextPlacement.VERTICAL ? Size.REGULAR : size;\n\n    const renderHorizontalStepIndicator = useCallback(\n      (step: Step, index: number) => {\n        return (\n          <React.Fragment key={`${step.titleText}_${index}`}>\n            <StepIndicator\n              {...step}\n              stepNumber={index + 1}\n              type={type}\n              stepComponentClassName={stepComponentClassName}\n              fulfilledStepIcon={fulfilledStepIcon}\n              fulfilledStepIconType={fulfilledStepIconType}\n              onClick={onClick}\n              isFulfilledStepDisplayNumber={isFulfilledStepDisplayNumber}\n              size={finalSize}\n            />\n            {index !== steps.length - 1 && (\n              <Divider\n                classname={cx(styles.divider, dividerComponentClassName, {\n                  [styles.compact]: finalSize === Size.COMPACT\n                })}\n              />\n            )}\n          </React.Fragment>\n        );\n      },\n      [\n        onClick,\n        isFulfilledStepDisplayNumber,\n        type,\n        stepComponentClassName,\n        fulfilledStepIcon,\n        fulfilledStepIconType,\n        dividerComponentClassName,\n        steps.length,\n        finalSize\n      ]\n    );\n\n    const renderVerticalStepIndicator = useCallback(\n      (step: Step, index: number) => {\n        return (\n          <StepIndicator\n            {...step}\n            key={`${step.titleText}_${index}`}\n            stepNumber={index + 1}\n            type={type}\n            stepComponentClassName={stepComponentClassName}\n            fulfilledStepIcon={fulfilledStepIcon}\n            fulfilledStepIconType={fulfilledStepIconType}\n            onClick={onClick}\n            isFollowedByDivider={index !== steps.length - 1}\n            stepDividerClassName={cx(styles.divider, dividerComponentClassName)}\n            isVertical\n            isFulfilledStepDisplayNumber={isFulfilledStepDisplayNumber}\n          />\n        );\n      },\n      [\n        onClick,\n        isFulfilledStepDisplayNumber,\n        type,\n        stepComponentClassName,\n        fulfilledStepIcon,\n        fulfilledStepIconType,\n        dividerComponentClassName,\n        steps.length\n      ]\n    );\n\n    const stepRenderer = useMemo(\n      () => (textPlacement === TextPlacement.VERTICAL ? renderVerticalStepIndicator : renderHorizontalStepIndicator),\n      [textPlacement, renderVerticalStepIndicator, renderHorizontalStepIndicator]\n    );\n\n    return (\n      <ol\n        ref={ref}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MULTI_STEP_INDICATOR, id)}\n        className={cx(styles.wrapper, className)}\n      >\n        {steps.map(stepRenderer)}\n      </ol>\n    );\n  }\n);\n\nexport default withStaticProps(MultiStepIndicator, {\n  types: MultiStepType,\n  stepStatuses: StepStatus,\n  textPlacements: TextPlacement,\n  sizes: Size\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","_ref$steps","steps","_ref$type","type","MultiStepType","PRIMARY","stepComponentClassName","dividerComponentClassName","_ref$fulfilledStepIco","fulfilledStepIcon","Check","_ref$fulfilledStepIco2","fulfilledStepIconType","IconType","SVG","_ref$isFulfilledStepD","isFulfilledStepDisplayNumber","_ref$onClick","onClick","NOOP","_ref$textPlacement","textPlacement","TextPlacement","HORIZONTAL","id","dataTestId","finalSize","VERTICAL","Size","REGULAR","size","renderHorizontalStepIndicator","useCallback","step","index","_jsxs","React","Fragment","children","_jsx","StepIndicator","Object","assign","stepNumber","length","Divider","classname","cx","styles","divider","_defineProperty","compact","COMPACT","concat","titleText","renderVerticalStepIndicator","_createElement","key","isFollowedByDivider","stepDividerClassName","isVertical","stepRenderer","useMemo","getTestId","ComponentDefaultTestId","MULTI_STEP_INDICATOR","wrapper","map","types","stepStatuses","StepStatus","textPlacements","sizes"],"mappings":"2zBAgCA,IAiHeA,EAAAA,EA5GXC,GACF,SAAAC,EAgBEC,GACE,IAfAC,EAASF,EAATE,UAASC,EAAAH,EACTI,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAAAL,EACVM,KAAAA,OAAI,IAAAD,EAAGE,EAAcC,QAAOH,EAC5BI,EAAsBT,EAAtBS,uBACAC,EAAyBV,EAAzBU,0BAAyBC,EAAAX,EACzBY,kBAAAA,OAAoBC,IAAHF,EAAGE,EAAKF,EAAAG,EAAAd,EACzBe,sBAAAA,OAAqB,IAAAD,EAAGE,EAASC,IAAGH,EAAAI,EAAAlB,EACpCmB,6BAAAA,OAA+B,IAAHD,GAAQA,EAAAE,EAAApB,EACpCqB,QAAAA,OAAUC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAvB,EACdwB,cAAAA,OAAa,IAAAD,EAAGE,EAAcC,WAAUH,EACxCI,EAAE3B,EAAF2B,GAEeC,EAAU5B,EAAzB,eAII6B,EAAYL,IAAkBC,EAAcK,SAAWC,EAAKC,QAL5DhC,EAAJiC,KAOIC,EAAgCC,GACpC,SAACC,EAAYC,GACX,OACEC,EAACC,EAAMC,SAAQ,CAAAC,SAAA,CACbC,EAACC,EACKC,OAAAC,OAAA,CAAA,EAAAT,EACJ,CAAAU,WAAYT,EAAQ,EACpB/B,KAAMA,EACNG,uBAAwBA,EACxBG,kBAAmBA,EACnBG,sBAAuBA,EACvBM,QAASA,EACTF,6BAA8BA,EAC9Bc,KAAMJ,KAEPQ,IAAUjC,EAAM2C,OAAS,GACxBL,EAACM,GACCC,UAAWC,EAAGC,EAAOC,QAAS1C,EAAyB2C,KACpDF,EAAOG,QAAUzB,IAAcE,EAAKwB,cAfxB,GAAAC,OAAGpB,EAAKqB,UAAS,KAAAD,OAAInB,GAqB7C,GACD,CACEhB,EACAF,EACAb,EACAG,EACAG,EACAG,EACAL,EACAN,EAAM2C,OACNlB,IAIE6B,EAA8BvB,GAClC,SAACC,EAAYC,GACX,OACEsB,EAAChB,EAAaC,OAAAC,OAAA,CAAA,EACRT,EACJ,CAAAwB,IAAG,GAAAJ,OAAKpB,EAAKqB,UAASD,KAAAA,OAAInB,GAC1BS,WAAYT,EAAQ,EACpB/B,KAAMA,EACNG,uBAAwBA,EACxBG,kBAAmBA,EACnBG,sBAAuBA,EACvBM,QAASA,EACTwC,oBAAqBxB,IAAUjC,EAAM2C,OAAS,EAC9Ce,qBAAsBZ,EAAGC,EAAOC,QAAS1C,GACzCqD,cACA5C,6BAA8BA,IAGnC,GACD,CACEE,EACAF,EACAb,EACAG,EACAG,EACAG,EACAL,EACAN,EAAM2C,SAIJiB,EAAeC,GACnB,WAAA,OAAOzC,IAAkBC,EAAcK,SAAW4B,EAA8BxB,CAA8B,GAC9G,CAACV,EAAekC,EAA6BxB,IAG/C,OACEQ,EACE,KAAAE,OAAAC,OAAA,CAAA5C,IAAKA,EACL0B,GAAIA,EACS,cAAAC,GAAcsC,EAAUC,EAAuBC,qBAAsBzC,GAClFzB,UAAWgD,EAAGC,EAAOkB,QAASnE,IAE7B,CAAAuC,SAAArC,EAAMkE,IAAIN,KAGjB,IAGiD,CACjDO,MAAOhE,EACPiE,aAAcC,EACdC,eAAgBjD,EAChBkD,MAAO5C"}