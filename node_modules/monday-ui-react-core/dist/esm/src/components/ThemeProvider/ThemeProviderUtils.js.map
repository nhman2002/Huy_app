{"version":3,"file":"ThemeProviderUtils.js","sources":["../../../../../src/components/ThemeProvider/ThemeProviderUtils.ts"],"sourcesContent":["import { Theme, ThemeColorTokenValueMap, SystemTheme, SystemThemeClassMap } from \"./ThemeProviderConstants\";\n\nconst generateCss = (object: ThemeColorTokenValueMap, stack: string, parentSelector: string) => {\n  for (const key of Object.keys(object)) {\n    if (typeof object[key as keyof ThemeColorTokenValueMap] === \"string\") {\n      stack += `--${key}: ${object[key as keyof ThemeColorTokenValueMap]};`;\n    }\n  }\n\n  if (stack !== \"\") {\n    stack = parentSelector + \" {\" + stack + \"}\";\n  }\n\n  for (const key of Object.keys(object)) {\n    if (typeof object[key as keyof ThemeColorTokenValueMap] === \"object\") {\n      const selector = `${parentSelector} .${key}`;\n      stack +=\n        \"\\n\" + generateCss(object[key as keyof ThemeColorTokenValueMap] as ThemeColorTokenValueMap, \"\", selector);\n    }\n  }\n\n  return stack;\n};\n\nexport const shouldGenerateTheme = (theme: Theme) => {\n  return !!theme?.colors && !!theme?.name;\n};\n\nexport const generateThemeCssOverride = (theme: Theme, themeClassSpecifier: string) => {\n  if (!shouldGenerateTheme(theme)) {\n    return null;\n  }\n\n  let css = \"\";\n  for (const systemTheme of Object.keys(theme.colors) as SystemTheme[]) {\n    css +=\n      generateCss(\n        theme.colors[systemTheme],\n        \"\",\n        `.${SystemThemeClassMap[systemTheme]} .${themeClassSpecifier}.${theme.name}`\n      ) + \"\\n\";\n  }\n\n  return css;\n};\n\nexport const generateRandomAlphaString = (length = 6) => {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length));\n  }\n\n  return result;\n};\n"],"names":["generateCss","object","stack","parentSelector","_i","_Object$keys","Object","keys","length","key","concat","_i2","_Object$keys2","_typeof","selector","shouldGenerateTheme","theme","colors","name","generateThemeCssOverride","themeClassSpecifier","css","_i3","_Object$keys3","systemTheme","SystemThemeClassMap","generateRandomAlphaString","arguments","undefined","result","characters","i","charAt","Math","floor","random"],"mappings":"0IAEA,IAAMA,EAAc,SAAdA,EAAeC,EAAiCC,EAAeC,GACnE,IAAA,IAAAC,EAAAC,EAAAA,EAAkBC,OAAOC,KAAKN,GAAOI,EAAAG,OAAAJ,EAAAA,IAAE,CAAlC,IAAMK,EAAGJ,EAAAD,GACgD,iBAAjDH,EAAOQ,KAChBP,GAAK,KAAAQ,OAASD,EAAG,MAAAC,OAAKT,EAAOQ,GAAwC,KAExE,CAEa,KAAVP,IACFA,EAAQC,EAAiB,KAAOD,EAAQ,KAG1C,IAAA,IAAAS,EAAAC,EAAAA,EAAkBN,OAAOC,KAAKN,GAAOW,EAAAJ,OAAAG,EAAAA,IAAE,CAAlC,IAAMF,EAAGG,EAAAD,GACZ,GAA4D,WAAxDE,EAAOZ,EAAOQ,IAAoD,CACpE,IAAMK,KAAQJ,OAAMP,EAAcO,MAAAA,OAAKD,GACvCP,GACE,KAAOF,EAAYC,EAAOQ,GAAkE,GAAIK,EACnG,CACF,CAED,OAAOZ,CACT,EAEaa,EAAsB,SAACC,GAClC,SAASA,aAAK,EAALA,EAAOC,YAAYD,eAAAA,EAAOE,KACrC,EAEaC,EAA2B,SAACH,EAAcI,GACrD,IAAKL,EAAoBC,GACvB,OAAO,KAIT,IADA,IAAIK,EAAM,GACVC,IAAAC,EAA0BjB,OAAOC,KAAKS,EAAMC,QAAwBM,EAAAf,OAAAc,EAAAA,IAAE,CAAjE,IAAME,EAAWD,EAAAD,GACpBD,GACErB,EACEgB,EAAMC,OAAOO,GACb,GAAE,IAAAd,OACEe,EAAoBD,GAAY,MAAAd,OAAKU,EAAmBV,KAAAA,OAAIM,EAAME,OACpE,IACP,CAED,OAAOG,CACT,EAEaK,EAA4B,WAIvC,IAJsD,IAAdlB,EAAMmB,UAAAnB,OAAA,QAAAoB,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAC7CE,EAAS,GACPC,EAAa,uDAEVC,EAAI,EAAOvB,EAAJuB,EAAYA,IAC1BF,GAAUC,EAAWE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAWtB,SAGpE,OAAOqB,CACT"}