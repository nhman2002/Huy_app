{"version":3,"file":"Tooltip.js","sources":["../../../../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase, isFunction } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, isValidElement, PureComponent, ReactElement } from \"react\";\nimport { Modifier } from \"react-popper\";\nimport Dialog from \"../Dialog/Dialog\";\nimport { AnimationType, BASE_SIZES_WITH_NONE, HideShowEvent, JustifyType } from \"../../constants\";\nimport { DialogPosition } from \"../../constants/positions\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { TooltipArrowPosition, TooltipTheme } from \"./TooltipConstants\";\nimport { ElementContent } from \"../../types/ElementContent\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Tooltip.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\n\nexport type TooltipProps = TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps);\n\ninterface TooltipWithoutChildrenProps {\n  /**\n   * When true, the tooltip would be rendered on a Dialog without children\n   * Use case is currently for rendering Tipseen with floating prop\n   */\n  forceRenderWithoutChildren: boolean;\n  children?: ReactElement | Array<ReactElement>;\n}\n\ninterface TooltipWithChildrenProps {\n  forceRenderWithoutChildren?: boolean;\n  children: ReactElement | Array<ReactElement>;\n}\n\n// TODO TS-migration extend DialogProps, once Dialog is migrated to TS\ninterface TooltipBaseProps extends VibeComponentProps {\n  content: ElementContent;\n  style?: CSSProperties;\n  arrowPosition?: TooltipArrowPosition;\n  /** Class name for a tooltip's arrow */\n  arrowClassName?: string;\n  paddingSize?: keyof typeof BASE_SIZES_WITH_NONE;\n  /**\n   * How much to move the dialog in relative to children\n   * main is the axis in which the position is aligned to\n   * secondary is the vertical axes to the position\n   */\n  moveBy?: MoveBy;\n  theme?: TooltipTheme;\n  justify?: JustifyType;\n  getContainer?: () => HTMLElement;\n  /**\n   * how much delay should the Dialog wait until it should trigger the hide in MS\n   */\n  hideDelay?: number;\n  /**\n   * how much delay should the Dialog wait until it should trigger the show in MS\n   */\n  showDelay?: number;\n  disableDialogSlide?: boolean;\n  animationType?: AnimationType;\n  withoutDialog?: boolean;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  containerSelector?: string;\n  /**\n   * With which delay tooltip is going to be shown\n   */\n  immediateShowDelay?: number;\n  /**\n   * when false, the arrow of the tooltip is hidden\n   */\n  tip?: boolean;\n  /**\n   * Show the Dialog when the children is mounting\n   */\n  shouldShowOnMount?: boolean;\n  hideWhenReferenceHidden?: boolean;\n  onTooltipHide?: () => void;\n  onTooltipShow?: () => void;\n  /**\n   * PopperJS Modifiers type\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  /**\n   * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...\n   */\n  position?: DialogPosition;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  showTrigger?: HideShowEvent | Array<HideShowEvent>;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  hideTrigger?: HideShowEvent | Array<HideShowEvent>;\n  /**\n   * If true, prevents open Tooltip from closing on mouseEnter and closes Tooltip, when mouse leaves it\n   */\n  showOnDialogEnter?: boolean;\n  /**\n   * A Classname to be added to <spam> element which wraps the children\n   */\n  referenceWrapperClassName?: string;\n  /**\n   * Treats keyboard focus/blur events as mouse-enter/mouse-leave events\n   */\n  addKeyboardHideShowTriggersByDefault?: boolean;\n  /**\n   * set the state of the tooltip - open/close - controlled component\n   */\n  open?: boolean;\n  /**\n   * Overwrites z-index of the tooltip\n   */\n  zIndex?: number;\n  // TODO: make defualt next major\n  /**\n   * Limit tooltip to 240px\n   */\n  withMaxWidth?: boolean;\n}\n// When last tooltip was shown in the last 1.5 second - the next tooltip will be shown immediately\nconst IMMEDIATE_SHOW_THRESHOLD_MS = 1500;\n\n// Shared state across multiple tooltip instances (i.e last tooltip shown time)\nconst globalState: { lastTooltipHideTS: number; openTooltipsCount: number } = {\n  lastTooltipHideTS: null,\n  openTooltipsCount: 0\n};\n\nexport default class Tooltip extends PureComponent<TooltipProps> {\n  wasShown: boolean;\n  static positions = DialogPosition;\n  static hideShowTriggers = HideShowEvent;\n  static themes = TooltipTheme;\n  static animationTypes = AnimationType;\n  static justifyTypes = JustifyType;\n  static arrowPositions = TooltipArrowPosition;\n  static defaultProps = {\n    arrowPosition: TooltipArrowPosition.CENTER,\n    moveBy: { main: 4, secondary: 0 },\n    theme: TooltipTheme.Dark,\n    position: Tooltip.positions.TOP,\n    justify: Tooltip.justifyTypes.CENTER,\n    hideDelay: 0,\n    showDelay: 300,\n    disableDialogSlide: true,\n    animationType: AnimationType.EXPAND,\n    withoutDialog: false,\n    containerSelector: \"#tooltips-container\",\n    tip: true,\n    hideWhenReferenceHidden: false,\n    modifiers: new Array<Modifier<unknown>>(),\n    showTrigger: Tooltip.hideShowTriggers.MOUSE_ENTER,\n    hideTrigger: Tooltip.hideShowTriggers.MOUSE_LEAVE,\n    showOnDialogEnter: false,\n    referenceWrapperClassName: \"\",\n    addKeyboardHideShowTriggersByDefault: false,\n    open: false\n  };\n  constructor(props: TooltipProps) {\n    super(props);\n    this.renderTooltipContent = this.renderTooltipContent.bind(this);\n    this.getShowDelay = this.getShowDelay.bind(this);\n    this.onTooltipShow = this.onTooltipShow.bind(this);\n    this.onTooltipHide = this.onTooltipHide.bind(this);\n\n    this.wasShown = false;\n  }\n\n  getContainer() {\n    return document.getElementById(\"tooltips-container\") || document.querySelector(\"body\");\n  }\n\n  renderTooltipContent() {\n    const { theme, content, paddingSize, className, style, withMaxWidth } = this.props;\n    if (!content) {\n      // don't render empty tooltip\n      return null;\n    }\n    let contentValue;\n    if (isFunction(content)) {\n      contentValue = content();\n    } else if (isValidElement(content)) {\n      contentValue = content;\n    } else if (typeof content === \"string\" && content) {\n      contentValue = content;\n    }\n\n    if (!contentValue) {\n      return null;\n    }\n    return (\n      <div\n        style={style}\n        className={cx(\n          styles.tooltip,\n          getStyle(styles, camelCase(theme)),\n          getStyle(styles, camelCase(\"padding-size-\" + paddingSize)),\n          { [styles.withMaxWidth]: withMaxWidth },\n          className\n        )}\n      >\n        {contentValue}\n      </div>\n    );\n  }\n\n  onTooltipShow() {\n    if (!this.wasShown) {\n      const { onTooltipShow } = this.props;\n      globalState.openTooltipsCount++;\n      this.wasShown = true;\n      onTooltipShow && onTooltipShow();\n    }\n  }\n\n  onTooltipHide() {\n    if (this.wasShown) {\n      const { onTooltipHide } = this.props;\n      globalState.lastTooltipHideTS = Date.now();\n      globalState.openTooltipsCount--;\n      this.wasShown = false;\n      onTooltipHide && onTooltipHide();\n    }\n  }\n\n  getTimeSinceLastTooltip() {\n    if (globalState.openTooltipsCount > 0) {\n      return 0;\n    }\n    return globalState.lastTooltipHideTS ? Date.now() - globalState.lastTooltipHideTS : Infinity;\n  }\n\n  getShowDelay() {\n    const { showDelay, immediateShowDelay } = this.props;\n    const timeSinceLastTooltip = this.getTimeSinceLastTooltip();\n    if ((immediateShowDelay === 0 || immediateShowDelay) && timeSinceLastTooltip < IMMEDIATE_SHOW_THRESHOLD_MS) {\n      // showing the tooltip immediately (without animation)\n      return {\n        showDelay: immediateShowDelay,\n        preventAnimation: true\n      };\n    }\n    return {\n      showDelay,\n      preventAnimation: false\n    };\n  }\n\n  render() {\n    const {\n      withoutDialog,\n      justify,\n      children,\n      forceRenderWithoutChildren,\n      getContainer,\n      theme,\n      paddingSize,\n      tip,\n      arrowClassName,\n      id,\n      \"data-testid\": dataTestId\n    } = this.props;\n\n    if (!children && !forceRenderWithoutChildren) {\n      return null;\n    }\n\n    if (withoutDialog) {\n      return this.renderTooltipContent();\n    }\n\n    const content = this.renderTooltipContent;\n    const dialogProps = {\n      ...this.props,\n      \"data-testid\": dataTestId || getTestId(ComponentDefaultTestId.TOOLTIP, id),\n      startingEdge: justify,\n      tooltip: tip,\n      content,\n      getContainer: getContainer || this.getContainer,\n      tooltipClassName: cx(\n        styles.arrow,\n        getStyle(styles, theme),\n        getStyle(styles, camelCase(\"padding-size-\" + paddingSize)),\n        arrowClassName\n      ),\n      animationType: AnimationType.EXPAND,\n      onDialogDidHide: this.onTooltipHide,\n      onDialogDidShow: this.onTooltipShow,\n      getDynamicShowDelay: this.getShowDelay\n    };\n    return <Dialog {...dialogProps}>{children}</Dialog>;\n  }\n}\n"],"names":["globalState","lastTooltipHideTS","openTooltipsCount","Tooltip","_PureComponent","_inherits","PureComponent","_super","_createSuper","props","_this","_classCallCheck","call","renderTooltipContent","bind","_assertThisInitialized","getShowDelay","onTooltipShow","onTooltipHide","wasShown","_createClass","key","value","document","getElementById","querySelector","contentValue","_this$props","this","theme","content","paddingSize","className","style","withMaxWidth","isFunction","isValidElement","_jsx","Object","assign","cx","styles","tooltip","getStyle","camelCase","_defineProperty","children","Date","now","Infinity","_this$props2","showDelay","immediateShowDelay","timeSinceLastTooltip","getTimeSinceLastTooltip","preventAnimation","_this$props3","justify","getContainer","tip","arrowClassName","id","dataTestId","forceRenderWithoutChildren","withoutDialog","dialogProps","getTestId","ComponentDefaultTestId","TOOLTIP","startingEdge","tooltipClassName","arrow","animationType","AnimationType","EXPAND","onDialogDidHide","onDialogDidShow","getDynamicShowDelay","Dialog","positions","DialogPosition","hideShowTriggers","HideShowEvent","themes","TooltipTheme","animationTypes","justifyTypes","JustifyType","arrowPositions","TooltipArrowPosition","defaultProps","arrowPosition","CENTER","moveBy","main","secondary","Dark","position","TOP","hideDelay","disableDialogSlide","containerSelector","hideWhenReferenceHidden","modifiers","showTrigger","MOUSE_ENTER","hideTrigger","MOUSE_LEAVE","showOnDialogEnter","referenceWrapperClassName","addKeyboardHideShowTriggersByDefault","open"],"mappings":"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"}