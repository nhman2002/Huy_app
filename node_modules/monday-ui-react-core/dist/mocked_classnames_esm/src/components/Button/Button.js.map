{"version":3,"file":"Button.js","sources":["../../../../../src/components/Button/Button.tsx"],"sourcesContent":["/* eslint-disable react/button-has-type */\nimport React, { AriaAttributes, forwardRef, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../constants\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport Icon from \"../../components/Icon/Icon\";\nimport Loader from \"../../components/Loader/Loader\";\nimport { BUTTON_ICON_SIZE, ButtonColor, ButtonInputType, ButtonType, getActualSize, Size } from \"./ButtonConstants\";\nimport { getParentBackgroundColorNotTransparent, TRANSPARENT_COLOR } from \"./helper/dom-helpers\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Button.module.scss\";\nimport { useButtonLoading } from \"./helper/useButtonLoading\";\n\nexport interface ButtonProps extends VibeComponentProps {\n  children?: React.ReactNode;\n  /** Custom class names to pass to the component */\n  className?: string;\n  activeButtonClassName?: string;\n  /** The button's kind */\n  kind?: ButtonType;\n  /** Callback function to run when the button is clicked */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseDown?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Blur on button click */\n  blurOnMouseUp?: boolean;\n  /** Name of the button - for form submit usages  */\n  name?: string;\n  /** The button's size */\n  size?: Size;\n  /** The button's color */\n  color?: ButtonColor;\n  /** The button's type */\n  type?: ButtonInputType;\n  /** Whether the button should be disabled or not */\n  disabled?: boolean;\n  /** Icon to place on the right */\n  rightIcon?: SubIcon;\n  /** Icon to place on the left */\n  leftIcon?: SubIcon;\n  /** the success props are used when you have async action and wants to display a success message */\n  success?: boolean;\n  /** Success icon name */\n  successIcon?: SubIcon;\n  /** Success text */\n  successText?: string;\n  /** loading boolean which switches the text to a loader */\n  loading?: boolean;\n  style?: React.CSSProperties;\n  /** displays the active state */\n  active?: boolean;\n  /** id to pass to the button */\n  id?: string;\n  /** adds 8px margin to the right */\n  marginRight?: boolean;\n  /** adds 8px margin to the left */\n  marginLeft?: boolean;\n  /** element id to describe the button accordingly */\n  ariaLabeledBy?: string;\n  /** aria label to provide important when providing only Icon */\n  ariaLabel?: string;\n  /** aria for a button popup */\n  ariaHasPopup?: React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"];\n  /** aria to be set if the popup is open */\n  ariaExpanded?: boolean;\n  /** aria controls - receives id for the controlled region */\n  ariaControls?: string;\n  \"aria-describedby\"?: AriaAttributes[\"aria-describedby\"];\n  /** On Button Focus callback */\n  onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n  /** On Button Blur callback */\n  onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n  rightFlat?: boolean;\n  leftFlat?: boolean;\n  preventClickAnimation?: boolean;\n  noSidePadding?: boolean;\n  /** default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...) */\n  defaultTextColorOnPrimaryColor?: string;\n  /**\n   * @deprecated - use \"data-testid\" instead\n   */\n  dataTestId?: string;\n  \"data-testid\"?: string;\n  /** Change the focus indicator from around the button to within it */\n  insetFocus?: boolean;\n  /** Specifies the tab order of an element */\n  tabIndex?: number;\n}\n\nconst Button: VibeComponent<ButtonProps, unknown> & {\n  sizes?: typeof SIZES;\n  colors?: typeof ButtonColor;\n  kinds?: typeof ButtonType;\n  types?: typeof ButtonInputType;\n  inputTags?: typeof ButtonInputType;\n} = forwardRef<unknown, ButtonProps>(\n  (\n    {\n      className,\n      children,\n      kind,\n      onClick,\n      name,\n      size,\n      color,\n      disabled,\n      rightIcon,\n      leftIcon,\n      success,\n      successText,\n      successIcon,\n      style,\n      loading: isLoading,\n      active,\n      activeButtonClassName,\n      id,\n      marginRight,\n      marginLeft,\n      type,\n      onMouseDown,\n      ariaLabel,\n      rightFlat,\n      leftFlat,\n      preventClickAnimation,\n      noSidePadding,\n      onFocus,\n      onBlur,\n      ariaLabeledBy,\n      defaultTextColorOnPrimaryColor,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      \"aria-describedby\": ariaDescribedBy,\n      blurOnMouseUp,\n      dataTestId: backwardCompatabilityDataTestId,\n      \"data-testid\": dataTestId,\n      insetFocus,\n      tabIndex\n    },\n    ref\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const mergedRef = useMergeRef(ref, buttonRef);\n\n    const { loading } = useButtonLoading({ isLoading });\n    const overrideDataTestId = backwardCompatibilityForProperties([dataTestId, backwardCompatabilityDataTestId]);\n\n    useEffect(() => {\n      if (color !== ButtonColor.ON_PRIMARY_COLOR && color !== ButtonColor.FIXED_LIGHT) return;\n      if (kind !== ButtonType.PRIMARY) return;\n      if (!buttonRef.current) return;\n\n      const buttonElement = buttonRef.current;\n      buttonElement.style.color = getParentBackgroundColorNotTransparent(buttonElement, defaultTextColorOnPrimaryColor);\n    }, [kind, buttonRef, color, defaultTextColorOnPrimaryColor]);\n\n    const onMouseUp = useCallback(() => {\n      const button = buttonRef.current;\n      if (disabled || !button) {\n        return;\n      }\n      if (blurOnMouseUp) {\n        button.blur();\n      }\n    }, [disabled, buttonRef, blurOnMouseUp]);\n\n    const onButtonClicked = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (disabled || loading || success) {\n          event.preventDefault();\n          return;\n        }\n\n        if (onClick) {\n          onClick(event);\n        }\n      },\n      [onClick, disabled, loading, success]\n    );\n\n    const onMouseDownClicked = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (disabled || loading || success) {\n          event.preventDefault();\n          return;\n        }\n\n        if (onMouseDown) {\n          onMouseDown(event);\n        }\n      },\n      [onMouseDown, disabled, loading, success]\n    );\n\n    const classNames = useMemo(() => {\n      const calculatedColor = success ? ButtonColor.POSITIVE : color;\n      return cx(\n        className,\n        styles.button,\n        getStyle(styles, camelCase(\"size-\" + getActualSize(size))),\n        getStyle(styles, camelCase(\"kind-\" + kind)),\n        getStyle(styles, camelCase(\"color-\" + calculatedColor)),\n        {\n          [styles.loading]: loading,\n          [styles.success]: success,\n          [getStyle(styles, camelCase(\"color-\" + calculatedColor + \"-active\"))]: active,\n          [activeButtonClassName]: active,\n          [styles.marginRight]: marginRight,\n          [styles.marginLeft]: marginLeft,\n          [styles.rightFlat]: rightFlat,\n          [styles.leftFlat]: leftFlat,\n          [styles.preventClickAnimation]: preventClickAnimation,\n          [styles.noSidePadding]: noSidePadding,\n          [styles.disabled]: disabled,\n          [styles.insetFocusStyle]: insetFocus\n        }\n      );\n    }, [\n      success,\n      color,\n      className,\n      size,\n      kind,\n      loading,\n      active,\n      activeButtonClassName,\n      marginRight,\n      marginLeft,\n      rightFlat,\n      leftFlat,\n      preventClickAnimation,\n      noSidePadding,\n      disabled,\n      insetFocus\n    ]);\n\n    const buttonProps = useMemo(() => {\n      const props: Record<string, unknown> = {\n        ref: mergedRef,\n        type,\n        className: classNames,\n        name,\n        onMouseUp,\n        style,\n        onClick: onButtonClicked,\n        id,\n        onFocus,\n        onBlur,\n        tabIndex: disabled ? -1 : tabIndex,\n        \"data-testid\": overrideDataTestId || getTestId(ComponentDefaultTestId.BUTTON, id),\n        onMouseDown: onMouseDownClicked,\n        \"aria-disabled\": disabled,\n        \"aria-busy\": loading,\n        \"aria-labelledby\": ariaLabeledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-haspopup\": ariaHasPopup,\n        \"aria-expanded\": ariaExpanded,\n        \"aria-controls\": ariaControls,\n        \"aria-describedby\": ariaDescribedBy\n      };\n      return props;\n    }, [\n      mergedRef,\n      type,\n      classNames,\n      name,\n      onMouseUp,\n      style,\n      onButtonClicked,\n      id,\n      onFocus,\n      onBlur,\n      tabIndex,\n      overrideDataTestId,\n      onMouseDownClicked,\n      disabled,\n      loading,\n      ariaLabeledBy,\n      ariaLabel,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      ariaDescribedBy\n    ]);\n\n    const leftIconSize = useMemo(() => {\n      if (typeof leftIcon !== \"function\") return;\n      return BUTTON_ICON_SIZE;\n    }, [leftIcon]);\n\n    const rightIconSize = useMemo(() => {\n      if (typeof rightIcon !== \"function\") return;\n      return BUTTON_ICON_SIZE;\n    }, [rightIcon]);\n\n    const successIconSize = useMemo(() => {\n      if (typeof successIcon !== \"function\") return;\n      return BUTTON_ICON_SIZE;\n    }, [successIcon]);\n\n    const buttonContent = useMemo(\n      () => (\n        <>\n          {leftIcon ? (\n            <Icon\n              iconType={Icon?.type.ICON_FONT}\n              clickable={false}\n              icon={leftIcon}\n              iconSize={leftIconSize}\n              className={cx({\n                [styles.leftIcon]: !!children\n              })}\n              ignoreFocusStyle\n            />\n          ) : null}\n          {children}\n          {rightIcon ? (\n            <Icon\n              iconType={Icon?.type.ICON_FONT}\n              clickable={false}\n              icon={rightIcon}\n              iconSize={rightIconSize}\n              className={cx({\n                [styles.rightIcon]: !!children\n              })}\n              ignoreFocusStyle\n            />\n          ) : null}\n        </>\n      ),\n      [children, leftIcon, leftIconSize, rightIcon, rightIconSize]\n    );\n\n    if (loading) {\n      return (\n        <button {...buttonProps} key={`${id}-loading`}>\n          <span className={styles.loader}>\n            <Loader className={styles.loaderSvg} />\n            <span aria-hidden className={styles.textPlaceholder}>\n              {buttonContent}\n            </span>\n          </span>\n        </button>\n      );\n    }\n\n    if (success) {\n      return (\n        <button {...buttonProps} key={`${id}-success`}>\n          <span className={styles.successContent}>\n            {successIcon ? (\n              <Icon\n                iconType={Icon?.type.ICON_FONT}\n                clickable={false}\n                icon={successIcon}\n                iconSize={successIconSize}\n                className={cx({\n                  [styles.leftIcon]: !!successText\n                })}\n                ignoreFocusStyle\n              />\n            ) : null}\n            {successText}\n          </span>\n          <span aria-hidden=\"true\" className={styles.textPlaceholder}>\n            {buttonContent}\n          </span>\n        </button>\n      );\n    }\n\n    return (\n      <button {...buttonProps} key={`${id}-button`}>\n        {buttonContent}\n      </button>\n    );\n  }\n);\n\nButton.defaultProps = {\n  className: undefined,\n  name: undefined,\n  style: undefined,\n  id: undefined,\n  dataTestId: undefined,\n  kind: ButtonType.PRIMARY,\n  onClick: NOOP,\n  size: SIZES.MEDIUM,\n  color: ButtonColor.PRIMARY,\n  disabled: false,\n  rightIcon: null,\n  leftIcon: null,\n  success: false,\n  successText: \"\",\n  successIcon: null,\n  loading: false,\n  active: false,\n  marginRight: false,\n  marginLeft: false,\n  type: ButtonInputType.BUTTON,\n  onMouseDown: NOOP,\n  rightFlat: false,\n  leftFlat: false,\n  preventClickAnimation: false,\n  noSidePadding: false,\n  onFocus: NOOP,\n  onBlur: NOOP,\n  defaultTextColorOnPrimaryColor: TRANSPARENT_COLOR,\n  ariaHasPopup: undefined,\n  blurOnMouseUp: true,\n  ariaExpanded: undefined,\n  ariaControls: undefined,\n  ariaLabel: undefined,\n  ariaLabeledBy: undefined,\n  insetFocus: false\n};\n\nexport default withStaticProps(Button, {\n  sizes: SIZES,\n  colors: ButtonColor,\n  kinds: ButtonType,\n  types: ButtonInputType,\n  inputTags: ButtonInputType\n});\n"],"names":["Button","forwardRef","_ref","ref","className","children","kind","onClick","name","size","color","disabled","rightIcon","leftIcon","success","successText","successIcon","style","isLoading","loading","active","activeButtonClassName","id","marginRight","marginLeft","type","onMouseDown","ariaLabel","rightFlat","leftFlat","preventClickAnimation","noSidePadding","onFocus","onBlur","ariaLabeledBy","defaultTextColorOnPrimaryColor","ariaHasPopup","ariaExpanded","ariaControls","ariaDescribedBy","blurOnMouseUp","backwardCompatabilityDataTestId","dataTestId","insetFocus","tabIndex","buttonRef","useRef","mergedRef","useMergeRef","useButtonLoading","overrideDataTestId","backwardCompatibilityForProperties","useEffect","ButtonColor","ON_PRIMARY_COLOR","FIXED_LIGHT","ButtonType","PRIMARY","current","buttonElement","getParentBackgroundColorNotTransparent","onMouseUp","useCallback","button","blur","onButtonClicked","event","preventDefault","onMouseDownClicked","classNames","useMemo","_cx","calculatedColor","POSITIVE","cx","styles","getStyle","camelCase","getActualSize","_defineProperty","insetFocusStyle","buttonProps","getTestId","ComponentDefaultTestId","BUTTON","leftIconSize","BUTTON_ICON_SIZE","rightIconSize","successIconSize","buttonContent","_jsxs","_Fragment","_jsx","Icon","iconType","ICON_FONT","clickable","icon","iconSize","ignoreFocusStyle","_createElement","key","concat","Object","assign","loader","Loader","loaderSvg","textPlaceholder","successContent","defaultProps","undefined","NOOP","SIZES","MEDIUM","ButtonInputType","TRANSPARENT_COLOR","withStaticProps","sizes","colors","kinds","types","inputTags"],"mappings":"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"}