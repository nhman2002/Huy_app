{"version":3,"file":"Chips.js","sources":["../../../../../src/components/Chips/Chips.tsx"],"sourcesContent":["import React, { forwardRef, RefObject, useCallback, useMemo, useRef } from \"react\";\nimport cx from \"classnames\";\nimport Icon from \"../Icon/Icon\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport CloseSmall from \"../Icon/Icons/components/CloseSmall\";\nimport { getCSSVar } from \"../../services/themes\";\nimport { ElementAllowedColor, ElementColor, getElementColor } from \"../../utils/colors-vars-map\";\nimport Avatar from \"../Avatar/Avatar\";\nimport IconButton from \"../IconButton/IconButton\";\nimport Text from \"../Text/Text\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { AvatarType } from \"../Avatar/AvatarConstants\";\nimport { ElementContent, SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport useHover from \"../../hooks/useHover/useHover\";\nimport useSetFocus from \"../../hooks/useSetFocus\";\nimport useClickableProps from \"../../hooks/useClickableProps/useClickableProps\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport styles from \"./Chips.module.scss\";\n\nconst CHIPS_AVATAR_SIZE = 20;\n\ninterface ChipsProps extends VibeComponentProps {\n  label?: ElementContent;\n  disabled?: boolean;\n  readOnly?: boolean;\n  /**\n   * @deprecated - use \"data-testid\" instead\n   */\n  dataTestId?: string;\n  \"data-testid\"?: string;\n  /**\n   * A React element that is positioned to the right of the text\n   */\n  rightRenderer?: ElementContent;\n  /**\n   * A React element that is positioned to the left of the text\n   */\n  leftRenderer?: ElementContent;\n  /** Icon to place on the right */\n  rightIcon?: SubIcon;\n  /** Icon to place on the left */\n  leftIcon?: SubIcon;\n  /** Img to place as avatar on the right */\n  rightAvatar?: string;\n  /** the type of right avatar */\n  rightAvatarType?: AvatarType;\n  /** Img to place as avatar on the left */\n  leftAvatar?: string;\n  /** the type of left avatar */\n  leftAvatarType?: AvatarType;\n  /** ClassName for left or right icon */\n  iconClassName?: string;\n  /** ClassName for left or right avatar */\n  avatarClassName?: string;\n  // TODO Vibe 3.0: filter ElementAllowedColor.DARK_INDIGO, ElementAllowedColor.BLACKISH from colors which are valid for Chips\n  color?: ElementColor;\n  /** Size for font icon */\n  iconSize?: number | string;\n  onDelete?: (id: string, event: React.MouseEvent<HTMLSpanElement>) => void;\n  /**\n   * Disables the Chip's entry animation\n   */\n  noAnimation?: boolean;\n  /**\n   * Allow user to select text\n   */\n  allowTextSelection?: boolean;\n  /**\n   * Callback function to be called when the user clicks the component.\n   */\n  onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  /**\n   * Callback function to be called when the user clicks the component.\n   */\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  /**\n   * Applies when element has onClick or onMouseDown props\n   */\n  ariaLabel?: string;\n  /**\n   * Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.\n   * @deprecated\n   */\n  clickable?: boolean;\n  /**\n   * Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.\n   * @deprecated\n   */\n  isClickable?: boolean;\n  /**\n   * Disable click behaviors\n   */\n  disableClickableBehavior?: boolean;\n  /**\n   * Show border, the border color is `--text-color-on-primary`, should be when the chip is a colored background like\n   * selected-color\n   */\n  showBorder?: boolean;\n  closeButtonAriaLabel?: string;\n}\n\nconst Chips: VibeComponent<ChipsProps, HTMLDivElement> & {\n  colors?: typeof ElementAllowedColor;\n  avatarTypes?: typeof AvatarType;\n} = forwardRef<HTMLDivElement, ChipsProps>(\n  (\n    {\n      className,\n      avatarClassName,\n      iconClassName,\n      id,\n      label = \"\",\n      leftIcon = null,\n      rightIcon = null,\n      leftAvatar = null,\n      rightAvatar = null,\n      disabled = false,\n      readOnly = false,\n      allowTextSelection = false,\n      color = Chips.colors.PRIMARY,\n      iconSize = 18,\n      onDelete = (_id: string, _e: React.MouseEvent<HTMLSpanElement>) => {},\n      onMouseDown,\n      onClick,\n      noAnimation = true,\n      ariaLabel,\n      dataTestId: backwardCompatabilityDataTestId,\n      \"data-testid\": dataTestId,\n      disableClickableBehavior = false,\n      leftAvatarType = AvatarType.IMG,\n      rightAvatarType = AvatarType.IMG,\n      showBorder = false,\n      leftRenderer,\n      rightRenderer,\n      closeButtonAriaLabel = \"Remove\"\n    },\n    ref\n  ) => {\n    const overrideDataTestId = backwardCompatibilityForProperties(\n      [dataTestId, backwardCompatabilityDataTestId],\n      getTestId(ComponentDefaultTestId.CHIP, id)\n    );\n    const hasClickableWrapper = (!!onClick || !!onMouseDown) && !disableClickableBehavior;\n    const hasCloseButton = !readOnly && !disabled;\n    const overrideAriaLabel = ariaLabel || (typeof label === \"string\" && label) || \"\";\n\n    const iconButtonRef = useRef(null);\n    const componentRef = useRef(null);\n\n    const [hoverRef, isHovered] = useHover<HTMLDivElement>();\n    const { isFocused } = useSetFocus({ ref: componentRef });\n\n    const mergedRef = useMergeRef<HTMLDivElement>(ref, componentRef, hoverRef);\n\n    const overrideClassName = cx(styles.chips, className, {\n      [styles.disabled]: disabled,\n      [styles.withClose]: hasCloseButton,\n      [styles.noAnimation]: noAnimation,\n      [styles.withUserSelect]: allowTextSelection,\n      [styles.border]: showBorder\n    });\n    const clickableClassName = cx(styles.clickable, overrideClassName, {\n      [styles.disabled]: disabled,\n      [styles.disableTextSelection]: !allowTextSelection\n    });\n\n    const backgroundColorStyle = useMemo(() => {\n      let cssVar;\n      if (disabled) {\n        cssVar = getCSSVar(\"disabled-background-color\");\n      } else if (hasClickableWrapper && (isHovered || isFocused)) {\n        cssVar = getElementColor(color, true, true);\n      } else {\n        cssVar = getElementColor(color, true);\n      }\n      return { backgroundColor: cssVar };\n    }, [disabled, hasClickableWrapper, isHovered, isFocused, color]);\n\n    const onDeleteCallback = useCallback(\n      (e: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        e.stopPropagation();\n        if (onDelete) {\n          onDelete(id, e);\n        }\n      },\n      [id, onDelete]\n    );\n\n    const onClickCallback = useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        if (onClick !== undefined && (e.target as HTMLElement) !== iconButtonRef.current) {\n          e.preventDefault();\n          onClick(e);\n        }\n      },\n      [onClick]\n    );\n\n    const clickableProps = useClickableProps(\n      {\n        onClick: onClickCallback,\n        onMouseDown,\n        disabled,\n        id,\n        \"data-testid\": overrideDataTestId,\n        ariaLabel: overrideAriaLabel,\n        ariaHidden: false,\n        ariaHasPopup: false,\n        ariaExpanded: false\n      },\n      mergedRef\n    );\n    const wrapperProps = hasClickableWrapper\n      ? {\n          ...clickableProps,\n          ref: clickableProps.ref as RefObject<HTMLDivElement>,\n          className: clickableClassName,\n          style: backgroundColorStyle\n        }\n      : {\n          className: overrideClassName,\n          \"aria-label\": overrideAriaLabel,\n          style: backgroundColorStyle,\n          ref: mergedRef,\n          onClick: onClickCallback,\n          onMouseDown,\n          id: id,\n          \"data-testid\": overrideDataTestId\n        };\n\n    const leftAvatarProps = leftAvatarType === AvatarType.TEXT ? { text: leftAvatar } : { src: leftAvatar };\n    const rightAvatarProps = leftAvatarType === AvatarType.TEXT ? { text: rightAvatar } : { src: rightAvatar };\n\n    return (\n      <div {...wrapperProps}>\n        {leftAvatar ? (\n          <Avatar\n            withoutBorder\n            className={cx(styles.avatar, styles.left, avatarClassName)}\n            customSize={CHIPS_AVATAR_SIZE}\n            type={leftAvatarType}\n            key={id}\n            {...leftAvatarProps}\n          />\n        ) : null}\n        {leftIcon ? (\n          <Icon\n            className={cx(styles.icon, styles.left, iconClassName)}\n            iconType={Icon.type.ICON_FONT}\n            clickable={false}\n            icon={leftIcon}\n            iconSize={iconSize}\n            ignoreFocusStyle\n          />\n        ) : null}\n        {leftRenderer && <div className={cx(styles.customRenderer, styles.left)}>{leftRenderer}</div>}\n        <Text type={Text.types.TEXT2} className={styles.label}>\n          {label}\n        </Text>\n        {rightIcon ? (\n          <Icon\n            className={cx(styles.icon, styles.right, iconClassName)}\n            iconType={Icon.type.ICON_FONT}\n            clickable={false}\n            icon={rightIcon}\n            iconSize={iconSize}\n            ignoreFocusStyle\n          />\n        ) : null}\n        {rightAvatar ? (\n          <Avatar\n            withoutBorder\n            className={cx(styles.avatar, styles.right, avatarClassName)}\n            customSize={CHIPS_AVATAR_SIZE}\n            type={rightAvatarType}\n            key={id}\n            {...rightAvatarProps}\n          />\n        ) : null}\n        {rightRenderer && <div className={cx(styles.customRenderer, styles.right)}>{rightRenderer}</div>}\n        {hasCloseButton && (\n          <IconButton\n            size={IconButton.sizes.XXS}\n            color={IconButton.colors.ON_PRIMARY_COLOR}\n            className={cx(styles.icon, styles.close)}\n            ariaLabel={closeButtonAriaLabel}\n            hideTooltip\n            icon={CloseSmall}\n            onClick={onDeleteCallback}\n            data-testid={`${overrideDataTestId}-close`}\n            ref={iconButtonRef}\n          />\n        )}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(Chips, {\n  colors: ElementAllowedColor,\n  avatarTypes: AvatarType\n});\n"],"names":["Chips","forwardRef","_ref","ref","className","avatarClassName","iconClassName","id","_ref$label","label","_ref$leftIcon","leftIcon","_ref$rightIcon","rightIcon","_ref$leftAvatar","leftAvatar","_ref$rightAvatar","rightAvatar","_ref$disabled","disabled","_ref$readOnly","readOnly","_ref$allowTextSelecti","allowTextSelection","_ref$color","color","colors","PRIMARY","_ref$iconSize","iconSize","_ref$onDelete","onDelete","_id","_e","onMouseDown","onClick","_ref$noAnimation","noAnimation","ariaLabel","_ref$disableClickable","disableClickableBehavior","_ref$leftAvatarType","leftAvatarType","AvatarType","IMG","_ref$rightAvatarType","rightAvatarType","_ref$showBorder","showBorder","leftRenderer","rightRenderer","_ref$closeButtonAriaL","closeButtonAriaLabel","overrideDataTestId","backwardCompatibilityForProperties","dataTestId","getTestId","ComponentDefaultTestId","CHIP","hasClickableWrapper","hasCloseButton","overrideAriaLabel","iconButtonRef","useRef","componentRef","_useHover","useHover","_useHover2","_slicedToArray","hoverRef","isHovered","isFocused","useSetFocus","mergedRef","useMergeRef","overrideClassName","cx","styles","chips","_defineProperty","withClose","withUserSelect","border","clickableClassName","clickable","disableTextSelection","backgroundColorStyle","useMemo","backgroundColor","getCSSVar","getElementColor","onDeleteCallback","useCallback","e","stopPropagation","onClickCallback","undefined","target","current","preventDefault","clickableProps","useClickableProps","ariaHidden","ariaHasPopup","ariaExpanded","wrapperProps","style","leftAvatarProps","TEXT","text","src","rightAvatarProps","_jsxs","Object","assign","children","_jsx","Avatar","withoutBorder","avatar","left","customSize","type","Icon","icon","iconType","ICON_FONT","ignoreFocusStyle","customRenderer","Text","types","TEXT2","right","IconButton","size","sizes","XXS","ON_PRIMARY_COLOR","close","hideTooltip","CloseSmall","concat","withStaticProps","ElementAllowedColor","avatarTypes"],"mappings":"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"}