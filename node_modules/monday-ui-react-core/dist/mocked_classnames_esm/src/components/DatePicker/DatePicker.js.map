{"version":3,"file":"DatePicker.js","sources":["../../../../../src/components/DatePicker/DatePicker.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useState } from \"react\";\nimport cx from \"classnames\";\nimport moment from \"moment\";\nimport \"react-dates/initialize\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { DayOfWeekShape, DayPickerRangeController, DayPickerSingleDateController } from \"react-dates\";\nimport DatePickerHeaderComponent from \"./DatePickerHeader/DatePickerHeader\";\nimport DateNavigationItem from \"./DateNavigationItem/DateNavigationItem\";\nimport YearPicker from \"./YearPicker/YearPicker\";\nimport { DAY_SIZE, WEEK_FIRST_DAY } from \"./constants\";\nimport { Direction, FocusInput, Moment, RangeDate } from \"./types\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport styles from \"./DatePicker.module.scss\";\n\ninterface DatePickerProps extends VibeComponentProps {\n  /** set the first day of the week to display */\n  firstDayOfWeek?: DayOfWeekShape;\n  /** current start date */\n  date?: Moment;\n  /** current end date */\n  endDate?: Moment;\n  /** on date selected callback */\n  onPickDate?: (date: Moment | RangeDate) => void;\n  /** hide the month navigations keys */\n  hideNavigationKeys?: boolean;\n  /** show days outside the cuurent month view */\n  enableOutsideDays?: boolean;\n  /** show week number column */\n  showWeekNumber?: boolean;\n  /** set the size of single day element */\n  daySize?: number;\n  /** determine if day should be disabled */\n  shouldBlockDay?: (date: Moment) => boolean;\n  /** date range mode*/\n  range?: boolean;\n  /** number of month to display*/\n  numberOfMonths?: number;\n  /** determine if year should be disabled */\n  shouldBlockYear?: (year: number) => boolean;\n  /** determine if date range should be disabled */\n  shouldBlockRange?: (date: Moment) => boolean;\n}\n\nconst DatePicker: VibeComponent<DatePickerProps, HTMLElement> = forwardRef<HTMLDivElement, DatePickerProps>(\n  (\n    {\n      id,\n      className,\n      firstDayOfWeek = WEEK_FIRST_DAY,\n      daySize = DAY_SIZE,\n      range = false,\n      shouldBlockDay,\n      shouldBlockYear,\n      numberOfMonths = 1,\n      hideNavigationKeys = false,\n      date,\n      endDate,\n      onPickDate,\n      enableOutsideDays = false,\n      showWeekNumber = false,\n      shouldBlockRange,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const [focusedInput, setFocusedInput] = useState(FocusInput.startDate);\n    const [isMonthYearSelection, setIsMonthYearSelection] = useState(false); //show Month/Year selection dropdown\n    const [overrideDateForView, setOverrideDateForView] = useState<Moment | null>(null);\n\n    const renderMonth = useCallback(\n      ({ month }: { month: Moment }) => {\n        return (\n          <DatePickerHeaderComponent\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER_HEADER, id)}\n            currentDate={month || moment()}\n            isMonthYearSelection={isMonthYearSelection}\n            onToggleMonthYearPicker={() => setIsMonthYearSelection(val => !val)}\n            hideNavigationKeys={hideNavigationKeys}\n          />\n        );\n      },\n      [dataTestId, isMonthYearSelection, hideNavigationKeys, id]\n    );\n\n    const renderDay = useCallback(\n      (day: Moment) => {\n        const weekNumber = firstDayOfWeek === 0 ? day.clone().add(1, \"d\").isoWeek() : day.isoWeek();\n        return (\n          <>\n            <span className={styles.calendarDayWeekNumber}>{weekNumber}</span> {day.format(\"D\")}\n          </>\n        );\n      },\n      [firstDayOfWeek]\n    );\n\n    const changeCurrentDateFromMonthYearView = useCallback((date: Moment | null) => {\n      setOverrideDateForView(date);\n      setIsMonthYearSelection(false);\n    }, []);\n\n    const renderMonthYearSelection = useCallback(() => {\n      return (\n        <YearPicker\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER_YEAR_SELECTION, id)}\n          selectedDate={date}\n          isYearBlocked={shouldBlockYear}\n          changeCurrentDate={changeCurrentDateFromMonthYearView}\n        />\n      );\n    }, [dataTestId, shouldBlockYear, changeCurrentDateFromMonthYearView, date, id]);\n\n    const onDateRangeChange = useCallback(\n      (date: RangeDate) => {\n        if (focusedInput === FocusInput.startDate) {\n          onPickDate({ ...date, endDate: null });\n        } else {\n          onPickDate(date);\n        }\n      },\n      [focusedInput, onPickDate]\n    );\n\n    const onFocusChange = useCallback((focusedInput: FocusInput) => {\n      setFocusedInput(focusedInput || FocusInput.startDate);\n    }, []);\n\n    const shouldShowNav = !hideNavigationKeys && !isMonthYearSelection;\n    return (\n      <div\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER, id)}\n        ref={ref}\n        id={id}\n        className={cx(styles.datepickerContainer, className, {\n          [styles.withWeekNumber]: showWeekNumber,\n          [styles.rangePickerMode]: range,\n          [styles.monthYearSelection]: isMonthYearSelection\n        })}\n      >\n        {range ? (\n          <DayPickerRangeController\n            key={`${overrideDateForView?.toString()}`}\n            renderDayContents={showWeekNumber ? renderDay : undefined}\n            firstDayOfWeek={firstDayOfWeek}\n            hideKeyboardShortcutsPanel\n            startDate={date}\n            endDate={endDate}\n            onDatesChange={onDateRangeChange}\n            focusedInput={focusedInput}\n            minimumNights={0}\n            onFocusChange={onFocusChange}\n            navPrev={shouldShowNav ? <DateNavigationItem kind={Direction.prev} /> : <div />}\n            navNext={shouldShowNav ? <DateNavigationItem kind={Direction.next} /> : <div />}\n            daySize={daySize}\n            isOutsideRange={shouldBlockRange}\n            isDayBlocked={shouldBlockDay}\n            renderMonthElement={renderMonth}\n            enableOutsideDays={enableOutsideDays || showWeekNumber}\n            numberOfMonths={numberOfMonths}\n            initialVisibleMonth={() => overrideDateForView || date || moment()}\n          />\n        ) : (\n          <DayPickerSingleDateController\n            key={`${overrideDateForView?.toString()}`}\n            renderDayContents={showWeekNumber ? renderDay : undefined}\n            firstDayOfWeek={firstDayOfWeek}\n            hideKeyboardShortcutsPanel\n            onFocusChange={NOOP}\n            numberOfMonths={numberOfMonths}\n            date={date}\n            onDateChange={(date: Moment) => onPickDate(date)}\n            navPrev={shouldShowNav ? <DateNavigationItem kind={Direction.prev} /> : <div />}\n            navNext={shouldShowNav ? <DateNavigationItem kind={Direction.next} /> : <div />}\n            focused={true}\n            renderMonthElement={renderMonth}\n            enableOutsideDays={enableOutsideDays || showWeekNumber}\n            daySize={daySize}\n            isDayBlocked={shouldBlockDay}\n            initialVisibleMonth={() => overrideDateForView || date || moment()}\n          />\n        )}\n        {isMonthYearSelection && renderMonthYearSelection()}\n      </div>\n    );\n  }\n);\n\nexport default DatePicker;\n"],"names":["DatePicker$1","forwardRef","_ref","ref","id","className","_ref$firstDayOfWeek","firstDayOfWeek","WEEK_FIRST_DAY","_ref$daySize","daySize","DAY_SIZE","_ref$range","range","shouldBlockDay","shouldBlockYear","_ref$numberOfMonths","numberOfMonths","_ref$hideNavigationKe","hideNavigationKeys","date","endDate","onPickDate","_ref$enableOutsideDay","enableOutsideDays","_ref$showWeekNumber","showWeekNumber","shouldBlockRange","dataTestId","_useState","useState","FocusInput","startDate","_useState2","_slicedToArray","focusedInput","setFocusedInput","_useState3","_useState4","isMonthYearSelection","setIsMonthYearSelection","_useState5","_useState6","overrideDateForView","setOverrideDateForView","renderMonth","useCallback","_ref2","month","_jsx","DatePickerHeaderComponent","getTestId","ComponentDefaultTestId","DATEPICKER_HEADER","currentDate","moment","onToggleMonthYearPicker","val","renderDay","day","weekNumber","clone","add","isoWeek","_jsxs","Object","assign","styles","calendarDayWeekNumber","children","format","changeCurrentDateFromMonthYearView","renderMonthYearSelection","YearPicker","DATEPICKER_YEAR_SELECTION","selectedDate","isYearBlocked","changeCurrentDate","onDateRangeChange","onFocusChange","shouldShowNav","DATEPICKER","cx","datepickerContainer","_defineProperty","withWeekNumber","rangePickerMode","monthYearSelection","DayPickerRangeController","renderDayContents","undefined","hideKeyboardShortcutsPanel","onDatesChange","minimumNights","navPrev","DateNavigationItem","kind","Direction","prev","navNext","next","isOutsideRange","isDayBlocked","renderMonthElement","initialVisibleMonth","concat","DayPickerSingleDateController","NOOP","onDateChange","focused"],"mappings":"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"}