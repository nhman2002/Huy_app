{"version":3,"file":"Dropdown.js","sources":["../../../../../src/components/Dropdown/Dropdown.jsx"],"sourcesContent":["/* eslint-disable react/require-default-props,react/forbid-prop-types */\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../constants/sizes\";\nimport { forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport Select, { components, createFilter } from \"react-select\";\nimport AsyncSelect from \"react-select/async\";\nimport { noop as NOOP } from \"lodash-es\";\nimport { WindowedMenuList } from \"react-windowed-select\";\nimport PropTypes from \"prop-types\";\nimport MenuComponent from \"./components/menu/menu\";\nimport DropdownIndicatorComponent from \"./components/DropdownIndicator/DropdownIndicator\";\nimport OptionComponent from \"./components/option/option\";\nimport SingleValueComponent from \"./components/singleValue/singleValue\";\nimport ClearIndicatorComponent from \"./components/ClearIndicator/ClearIndicator\";\nimport MultiValueContainer from \"./components/MultiValueContainer/MultiValueContainer\";\nimport {\n  ADD_AUTO_HEIGHT_COMPONENTS,\n  defaultCustomStyles,\n  DROPDOWN_CHIP_COLORS,\n  DROPDOWN_ID,\n  DROPDOWN_MENU_PLACEMENT,\n  DROPDOWN_MENU_POSITION\n} from \"./DropdownConstants\";\nimport generateBaseStyles, { customTheme } from \"./Dropdown.styles\";\nimport Control from \"./components/Control/Control\";\nimport menuStyles from \"./components/menu/menu.module.scss\";\nimport styles from \"./Dropdown.module.scss\";\n\nconst Dropdown = forwardRef(\n  (\n    {\n      className,\n      optionWrapperClassName,\n      singleValueWrapperClassName,\n      dropdownMenuWrapperClassName,\n      placeholder,\n      disabled,\n      readOnly,\n      onMenuOpen,\n      onMenuClose,\n      onFocus,\n      onBlur,\n      onChange: customOnChange,\n      searchable,\n      options,\n      defaultValue,\n      value: customValue,\n      noOptionsMessage,\n      openMenuOnFocus,\n      openMenuOnClick,\n      clearable,\n      OptionRenderer,\n      optionRenderer,\n      ValueRenderer,\n      valueRenderer,\n      menuRenderer,\n      menuPlacement,\n      rtl,\n      size,\n      asyncOptions,\n      cacheOptions,\n      defaultOptions,\n      isVirtualized,\n      menuPortalTarget,\n      extraStyles,\n      maxMenuHeight,\n      menuIsOpen,\n      tabIndex,\n      id,\n      autoFocus,\n      multi = false,\n      multiline = false,\n      onOptionRemove: customOnOptionRemove,\n      onOptionSelect,\n      onClear,\n      onInputChange,\n      closeMenuOnSelect = !multi,\n      closeMenuOnScroll: customCloseMenuOnScroll,\n      withMandatoryDefaultOptions,\n      isOptionSelected,\n      insideOverflowContainer,\n      insideOverflowWithTransformContainer,\n      tooltipContent,\n      onKeyDown,\n      isLoading,\n      loadingMessage,\n      ariaLabel,\n      tabSelectsValue = true,\n      popupsContainerSelector,\n      filterOption,\n      menuPosition,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const controlRef = useRef();\n    const overrideMenuPortalTarget =\n      menuPortalTarget || (popupsContainerSelector && document.querySelector(popupsContainerSelector));\n    const overrideDefaultValue = useMemo(() => {\n      if (defaultValue) {\n        return Array.isArray(defaultValue)\n          ? defaultValue.map(df => ({ ...df, isMandatory: true }))\n          : { ...defaultValue, isMandatory: true };\n      }\n\n      return defaultValue;\n    }, [defaultValue]);\n\n    const [selected, setSelected] = useState(overrideDefaultValue || []);\n    const finalOptionRenderer = optionRenderer || OptionRenderer;\n    const finalValueRenderer = valueRenderer || ValueRenderer;\n    const isControlled = !!customValue;\n    const selectedOptions = customValue ?? selected;\n    const selectedOptionsMap = useMemo(() => {\n      if (Array.isArray(selectedOptions)) {\n        return selectedOptions.reduce((acc, option) => ({ ...acc, [option.value]: option }), {});\n      }\n      return {};\n    }, [selectedOptions]);\n\n    const overrideAriaLabel = useMemo(() => {\n      return (\n        ariaLabel ||\n        `${readOnly ? \"Readonly \" : \"\"} ${tooltipContent} ${\n          Array.isArray(selectedOptions) ? `Selected: ${selectedOptions.map(o => o.label).join(\", \")}` : \"Select\"\n        }`\n      );\n    }, [ariaLabel, readOnly, selectedOptions, tooltipContent]);\n    const value = multi ? selectedOptions : customValue;\n\n    const inlineStyles = useMemo(() => {\n      // We first want to get the default stylized groups (e.g. \"container\", \"menu\").\n      const baseStyles = generateBaseStyles({\n        size,\n        rtl,\n        insideOverflowContainer,\n        controlRef,\n        insideOverflowWithTransformContainer\n      });\n\n      // Then we want to run the consumer's root-level custom styles with our \"base\" override groups.\n      const customStyles = extraStyles(baseStyles);\n\n      // Lastly, we create a style groups object that makes sure we run each custom group with our basic overrides.\n      const mergedStyles = Object.entries(customStyles).reduce((accumulator, [stylesGroup, stylesFn]) => {\n        return {\n          ...accumulator,\n          [stylesGroup]: (defaultStyles, state) => {\n            const provided = baseStyles[stylesGroup] ? baseStyles[stylesGroup](defaultStyles, state) : defaultStyles;\n\n            return stylesFn(provided, state);\n          }\n        };\n      }, {});\n\n      if (multi) {\n        if (multiline) {\n          ADD_AUTO_HEIGHT_COMPONENTS.forEach(component => {\n            const original = mergedStyles[component];\n            mergedStyles[component] = (provided, state) => ({\n              ...original(provided, state),\n              height: \"auto\"\n            });\n          });\n        }\n\n        const originalValueContainer = mergedStyles.valueContainer;\n        mergedStyles.valueContainer = (provided, state) => ({\n          ...originalValueContainer(provided, state),\n          paddingLeft: 6\n        });\n      }\n\n      return mergedStyles;\n    }, [size, rtl, insideOverflowContainer, insideOverflowWithTransformContainer, extraStyles, multi, multiline]);\n\n    const Menu = useCallback(\n      props => (\n        <MenuComponent {...props} Renderer={menuRenderer} dropdownMenuWrapperClassName={dropdownMenuWrapperClassName} />\n      ),\n      [dropdownMenuWrapperClassName, menuRenderer]\n    );\n\n    const DropdownIndicator = useCallback(props => <DropdownIndicatorComponent {...props} size={size} />, [size]);\n\n    const Option = useCallback(\n      props => (\n        <OptionComponent {...props} Renderer={finalOptionRenderer} optionWrapperClassName={optionWrapperClassName} />\n      ),\n      [finalOptionRenderer, optionWrapperClassName]\n    );\n\n    const Input = useCallback(props => <components.Input {...props} aria-label=\"Dropdown input\" />, []);\n\n    const SingleValue = useCallback(\n      props => (\n        <SingleValueComponent\n          {...props}\n          readOnly={readOnly}\n          Renderer={finalValueRenderer}\n          selectedOption={selectedOptions[0]}\n          singleValueWrapperClassName={singleValueWrapperClassName}\n        />\n      ),\n      [finalValueRenderer, readOnly, selectedOptions, singleValueWrapperClassName]\n    );\n\n    const ClearIndicator = useCallback(props => <ClearIndicatorComponent {...props} size={size} />, [size]);\n\n    const onOptionRemove = useMemo(() => {\n      return function (optionValue, e) {\n        if (customOnOptionRemove) {\n          customOnOptionRemove(selectedOptionsMap[optionValue]);\n        }\n        const newSelectedOptions = selectedOptions.filter(option => option.value !== optionValue);\n        if (customOnChange) {\n          customOnChange(newSelectedOptions, e);\n        }\n        setSelected(newSelectedOptions);\n      };\n    }, [customOnChange, customOnOptionRemove, selectedOptions, selectedOptionsMap]);\n\n    const customProps = useMemo(\n      () => ({\n        selectedOptions,\n        onSelectedDelete: onOptionRemove,\n        isMultiline: multiline,\n        insideOverflowContainer,\n        insideOverflowWithTransformContainer,\n        controlRef,\n        tooltipContent,\n        popupsContainerSelector\n      }),\n      [\n        selectedOptions,\n        onOptionRemove,\n        multiline,\n        insideOverflowContainer,\n        insideOverflowWithTransformContainer,\n        tooltipContent,\n        popupsContainerSelector\n      ]\n    );\n    const onChange = (option, event) => {\n      if (customOnChange) {\n        customOnChange(option, event);\n      }\n\n      switch (event.action) {\n        case \"select-option\": {\n          const selectedOption = multi ? event.option : option;\n\n          if (onOptionSelect) {\n            onOptionSelect(selectedOption);\n          }\n\n          if (!isControlled) {\n            setSelected([...selectedOptions, selectedOption]);\n          }\n          break;\n        }\n\n        case \"clear\":\n          if (onClear) {\n            onClear();\n          }\n\n          if (!isControlled) {\n            if (withMandatoryDefaultOptions) setSelected(overrideDefaultValue);\n            else setSelected([]);\n          }\n          break;\n      }\n    };\n\n    const DropDownComponent = asyncOptions ? AsyncSelect : Select;\n\n    const asyncAdditions = {\n      ...(asyncOptions && {\n        loadOptions: asyncOptions,\n        cacheOptions,\n        ...(defaultOptions && { defaultOptions })\n      })\n    };\n\n    const additions = {\n      ...(!asyncOptions && { options }),\n      ...(multi && {\n        isMulti: true\n      })\n    };\n\n    const closeMenuOnScroll = useCallback(\n      event => {\n        const scrolledElement = event.target;\n        if (scrolledElement?.parentElement?.classList.contains(menuStyles.dropdownMenuWrapper)) {\n          return false;\n        }\n        return customCloseMenuOnScroll || insideOverflowContainer || insideOverflowWithTransformContainer;\n      },\n      [insideOverflowContainer, insideOverflowWithTransformContainer, customCloseMenuOnScroll]\n    );\n\n    return (\n      <DropDownComponent\n        className={cx(styles.dropdown, className)}\n        selectProps={customProps}\n        components={{\n          DropdownIndicator,\n          Menu,\n          ClearIndicator,\n          Input,\n          Option,\n          Control,\n          SingleValue,\n          ...(multi && {\n            MultiValue: NOOP, // We need it for react-select to behave nice with \"multi\"\n            ValueContainer: MultiValueContainer\n          }),\n          ...(isVirtualized && { MenuList: WindowedMenuList })\n        }}\n        // When inside scroll we set the menu position by js and we can't follow the drop down location while use scrolling\n        closeMenuOnScroll={closeMenuOnScroll}\n        size={size}\n        noOptionsMessage={noOptionsMessage}\n        placeholder={placeholder}\n        isDisabled={disabled}\n        isClearable={!readOnly && clearable}\n        isSearchable={!readOnly && searchable}\n        readOnly={readOnly}\n        aria-readonly={readOnly}\n        aria-label={overrideAriaLabel}\n        aria-details={tooltipContent}\n        defaultValue={defaultValue}\n        value={value}\n        onMenuOpen={onMenuOpen}\n        onMenuClose={onMenuClose}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        onChange={onChange}\n        onKeyDown={onKeyDown}\n        onInputChange={onInputChange}\n        openMenuOnFocus={openMenuOnFocus}\n        openMenuOnClick={openMenuOnClick}\n        isRtl={rtl}\n        styles={inlineStyles}\n        theme={customTheme}\n        maxMenuHeight={maxMenuHeight}\n        menuPortalTarget={overrideMenuPortalTarget}\n        menuPlacement={menuPlacement}\n        menuPosition={menuPosition}\n        menuIsOpen={!readOnly && menuIsOpen}\n        tabIndex={tabIndex}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.DROPDOWN, id)}\n        autoFocus={autoFocus}\n        closeMenuOnSelect={closeMenuOnSelect}\n        ref={ref}\n        withMandatoryDefaultOptions={withMandatoryDefaultOptions}\n        isOptionSelected={isOptionSelected}\n        isLoading={isLoading}\n        loadingMessage={loadingMessage}\n        tabSelectsValue={tabSelectsValue}\n        filterOption={filterOption}\n        {...asyncAdditions}\n        {...additions}\n      />\n    );\n  }\n);\n\nObject.assign(Dropdown, {\n  // TODO Deprecate Dropdown.size in the next major version - use Dropdown.sizes instead\n  size: SIZES,\n  sizes: SIZES,\n  chipColors: DROPDOWN_CHIP_COLORS,\n  menuPlacements: DROPDOWN_MENU_PLACEMENT,\n  menuPositions: DROPDOWN_MENU_POSITION,\n  createFilter: createFilter\n});\n\nDropdown.defaultProps = {\n  className: \"\",\n  optionWrapperClassName: undefined,\n  dropdownMenuWrapperClassName: undefined,\n  singleValueWrapperClassName: undefined,\n  placeholder: \"\",\n  onMenuOpen: NOOP,\n  onMenuClose: NOOP,\n  onKeyDown: NOOP,\n  onFocus: NOOP,\n  onBlur: NOOP,\n  onChange: NOOP,\n  onInputChange: NOOP,\n  searchable: true,\n  options: [],\n  menuPlacement: Dropdown.menuPlacements.BOTTOM,\n  menuPosition: Dropdown.menuPositions.ABSOLUTE,\n  noOptionsMessage: NOOP,\n  clearable: true,\n  size: SIZES.MEDIUM,\n  extraStyles: defaultCustomStyles,\n  tabIndex: \"0\",\n  onOptionRemove: undefined,\n  id: DROPDOWN_ID,\n  autoFocus: false,\n  closeMenuOnSelect: undefined,\n  closeMenuOnScroll: false,\n  ref: undefined,\n  withMandatoryDefaultOptions: false,\n  insideOverflowContainer: false,\n  insideOverflowWithTransformContainer: false,\n  tooltipContent: \"\",\n  disabled: false,\n  readOnly: false,\n  isLoading: false,\n  loadingMessage: undefined,\n  ariaLabel: undefined,\n  filterOption: undefined\n};\n\nDropdown.propTypes = {\n  /**\n   * Custom style\n   */\n  className: PropTypes.string,\n  /** ClassName to be added to dropdown option wrapper (dropdown-wrapper__option--reset) */\n  optionWrapperClassName: PropTypes.string,\n  /** ClassName to be added to dropdown single value wrapper (dropdown-wrapper__single-value--reset) */\n  singleValueWrapperClassName: PropTypes.string,\n  /** ClassName to be added to dropdown menu wrapper (dropdown-menu-wrapper) */\n  dropdownMenuWrapperClassName: PropTypes.string,\n  /**\n   * Placeholder to show when no value was selected\n   */\n  placeholder: PropTypes.string,\n  /**\n   * If set to true, dropdown will be disabled\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If set to true, dropdown won't be editable\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Called when menu is opened\n   */\n  onMenuOpen: PropTypes.func,\n  /**\n   * Called when menu is closed\n   */\n  onMenuClose: PropTypes.func,\n  /**\n   * Called when key is pressed in the dropdown\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Called when focused\n   */\n  onFocus: PropTypes.func,\n  /**\n   * Called when blurred\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Called when selected value has changed\n   */\n  onChange: PropTypes.func,\n  /**\n   * Called when the dropdown's input changes.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * If true, search in options will be enabled\n   */\n  searchable: PropTypes.bool,\n  /**\n   * The dropdown options\n   */\n  options: PropTypes.arrayOf(PropTypes.object),\n  /**\n   * Text to display when there are no options\n   */\n  noOptionsMessage: PropTypes.func,\n  /**\n   * If set to true, the menu will open when focused\n   */\n  openMenuOnFocus: PropTypes.bool,\n  /**\n   * If set to true, the menu will open when clicked\n   */\n  openMenuOnClick: PropTypes.bool,\n  /**\n   * If set to true, clear button will be added\n   */\n  clearable: PropTypes.bool,\n  /**\n   * custom option render function\n   */\n  optionRenderer: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  /**\n   * custom value render function\n   */\n  valueRenderer: PropTypes.func,\n  /**\n   * custom menu render function\n   */\n  menuRenderer: PropTypes.func,\n  /**\n   * Default placement of the Dropdown menu in relation to its control. Use \"auto\" to flip the menu when there isn't enough space below the control.\n   */\n  menuPlacement: PropTypes.oneOf(Object.values(DROPDOWN_MENU_PLACEMENT)),\n  /**\n   * The CSS position value of the menu, when \"fixed\" extra layout management might be required\n   * Fixed position can be used to solve the issue of positioning Dropdown inside overflow container like Modal or Dialog\n   */\n  menuPosition: PropTypes.oneOf(Object.values(DROPDOWN_MENU_POSITION)),\n  /**\n   * If set to true, the dropdown will be in Right to Left mode\n   */\n  rtl: PropTypes.bool,\n  /**\n   * Set default selected value\n   */\n  defaultValue: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    ),\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired\n    })\n  ]),\n  /**\n   * The component's value.\n   * When passed, makes this a [controlled](https://reactjs.org/docs/forms.html#controlled-components) component.\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    ),\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string.isRequired\n    })\n  ]),\n  /**\n   * Select menu size from `Dropdown.size` - Dropdown.sizes.LARGE | Dropdown.sizes.MEDIUM | Dropdown.sizes.SMALL\n   */\n  size: PropTypes.string,\n  /**\n   * If provided Dropdown will work in async mode. Can be either promise or callback\n   */\n  asyncOptions: PropTypes.oneOfType([\n    PropTypes.func, // callback\n    PropTypes.shape({\n      then: PropTypes.func.isRequired,\n      catch: PropTypes.func.isRequired\n    }) // Promise\n  ]),\n  /**\n   * If set to true, fetched async options will be cached\n   */\n  cacheOptions: PropTypes.bool,\n  /**\n   * If set, `asyncOptions` will be invoked with its value on mount and the resolved results will be loaded\n   */\n  defaultOptions: PropTypes.oneOfType([PropTypes.bool, PropTypes.arrayOf(PropTypes.object)]),\n  /**\n   * If set to true, the menu will use virtualization. Virtualized async works only with\n   */\n  isVirtualized: PropTypes.bool,\n  /**\n   * Whether the menu should use a portal, and where it should attach\n   */\n  menuPortalTarget: PropTypes.oneOfType([PropTypes.element, PropTypes.object]),\n  /**\n   * Custom function to override existing styles (similar to `react-select`'s `style` prop), for example: `base => ({...base, color: 'red'})`, where `base` is the component's default styles\n   */\n  extraStyles: PropTypes.func,\n  /**\n   * Maximum height of the menu before scrolling\n   */\n  maxMenuHeight: PropTypes.number,\n  /**\n   * Tab index for keyboard navigation purposes\n   */\n  tabIndex: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /**\n   * ID for the select container\n   */\n  id: PropTypes.string,\n  /**\n   * focusAuto when component mount\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If set to true, the dropdown will be in multi-select mode.\n   * When in multi-select mode, the selected value will be an array,\n   * and it will be displayed as our [`<Chips>`](/?path=/docs/components-chips--sandbox) component.\n   */\n  multi: PropTypes.bool,\n  /**\n   * If set to true together with `multi`, it will make the dropdown expand to multiple lines when new values are selected.\n   */\n  multiline: PropTypes.bool,\n  /**\n   Pass closeMenuOnSelect to close the multi choose any time an options is chosen.\n   */\n  closeMenuOnSelect: PropTypes.bool,\n  // Won't be needed once we upgrade to react-select ^5.5 https://github.com/JedWatson/react-select/issues/4088#issuecomment-1276835389\n  /**\n   * If menu should be closed on scroll - helpful for some tricky use cases\n   * @default false, but true when insideOverflowContainer or insideOverflowWithTransformContainer are true\n   */\n  closeMenuOnScroll: PropTypes.bool,\n  /**\n   * callback to be called when `multiline` is `true` and the option is removed\n   */\n  onOptionRemove: PropTypes.func,\n  /**\n   Pass Ref for reference of the actual dropdown component\n   */\n  ref: PropTypes.func,\n  /**\n   The options set by default will be set as mandatory and the user will not be able to cancel their selection\n   */\n  withMandatoryDefaultOptions: PropTypes.bool,\n  /**\n   * Override the built-in logic to detect whether an option is selected.\n   */\n  isOptionSelected: PropTypes.func,\n  /**\n   * For display the drop down menu in overflow hidden/scroll container.\n   */\n  insideOverflowContainer: PropTypes.bool,\n  /**\n   * For display the drop down menu in overflow hidden/scroll container which contains transform css function usage.\n   */\n  insideOverflowWithTransformContainer: PropTypes.bool,\n  /**\n   * When content is passed, the dropdown will include a tooltip on the dropdown's value.\n   */\n  tooltipContent: PropTypes.string,\n  /**\n   * Display the drop down with loading state.\n   */\n  isLoading: PropTypes.bool,\n  /**\n   * Overrides the built-in logic of loading message design\n   */\n  loadingMessage: PropTypes.func,\n  /**\n   * aria-label attribute for dropdown\n   */\n  ariaLabel: PropTypes.string,\n  /**\n   * Overrides the built-in logic of tab selecting value (default: true)\n   */\n  tabSelectsValue: PropTypes.bool,\n  /**\n   * Overrides the build-in search filter logic - https://react-select.com/advanced#custom-filter-logic\n   * createFilter function is available at Dropdown.createFilter\n   */\n  filterOption: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n};\n\nexport default Dropdown;\n"],"names":["Dropdown","forwardRef","_ref","ref","className","optionWrapperClassName","singleValueWrapperClassName","dropdownMenuWrapperClassName","placeholder","disabled","readOnly","onMenuOpen","onMenuClose","onFocus","onBlur","customOnChange","onChange","searchable","options","defaultValue","customValue","value","noOptionsMessage","openMenuOnFocus","openMenuOnClick","clearable","OptionRenderer","optionRenderer","ValueRenderer","valueRenderer","menuRenderer","menuPlacement","rtl","size","asyncOptions","cacheOptions","defaultOptions","isVirtualized","menuPortalTarget","extraStyles","maxMenuHeight","menuIsOpen","tabIndex","id","autoFocus","_ref$multi","multi","_ref$multiline","multiline","customOnOptionRemove","onOptionRemove","onOptionSelect","onClear","onInputChange","_ref$closeMenuOnSelec","closeMenuOnSelect","customCloseMenuOnScroll","closeMenuOnScroll","withMandatoryDefaultOptions","isOptionSelected","insideOverflowContainer","insideOverflowWithTransformContainer","tooltipContent","onKeyDown","isLoading","loadingMessage","ariaLabel","_ref$tabSelectsValue","tabSelectsValue","popupsContainerSelector","filterOption","menuPosition","dataTestId","controlRef","useRef","overrideMenuPortalTarget","document","querySelector","overrideDefaultValue","useMemo","Array","isArray","map","df","_objectSpread","isMandatory","_useState","useState","_useState2","_slicedToArray","setSelected","finalOptionRenderer","finalValueRenderer","isControlled","selectedOptions","selectedOptionsMap","reduce","acc","option","_defineProperty","overrideAriaLabel","concat","o","label","join","inlineStyles","baseStyles","generateBaseStyles","customStyles","mergedStyles","Object","entries","accumulator","_ref2","_ref3","stylesGroup","stylesFn","defaultStyles","state","provided","ADD_AUTO_HEIGHT_COMPONENTS","forEach","component","original","height","originalValueContainer","valueContainer","paddingLeft","Menu","useCallback","props","React","createElement","MenuComponent","_extends","Renderer","DropdownIndicator","DropdownIndicatorComponent","Option","OptionComponent","Input","components","SingleValue","SingleValueComponent","selectedOption","ClearIndicator","ClearIndicatorComponent","optionValue","e","newSelectedOptions","filter","customProps","onSelectedDelete","isMultiline","DropDownComponent","AsyncSelect","Select","asyncAdditions","loadOptions","additions","isMulti","event","_scrolledElement$pare","scrolledElement","target","parentElement","classList","contains","menuStyles","dropdownMenuWrapper","cx","styles","dropdown","selectProps","Control","MultiValue","NOOP","ValueContainer","MultiValueContainer","MenuList","WindowedMenuList","isDisabled","isClearable","isSearchable","action","_toConsumableArray","isRtl","theme","customTheme","getTestId","ComponentDefaultTestId","DROPDOWN","assign","SIZES","sizes","chipColors","DROPDOWN_CHIP_COLORS","menuPlacements","DROPDOWN_MENU_PLACEMENT","menuPositions","DROPDOWN_MENU_POSITION","createFilter","defaultProps","undefined","BOTTOM","ABSOLUTE","MEDIUM","defaultCustomStyles","DROPDOWN_ID","Dropdown$1"],"mappings":"wzCA6BA,IAAMA,EAAWC,GACf,SAAAC,EAgEEC,GACG,IA/DDC,EAASF,EAATE,UACAC,EAAsBH,EAAtBG,uBACAC,EAA2BJ,EAA3BI,4BACAC,EAA4BL,EAA5BK,6BACAC,EAAWN,EAAXM,YACAC,EAAQP,EAARO,SACAC,EAAQR,EAARQ,SACAC,EAAUT,EAAVS,WACAC,EAAWV,EAAXU,YACAC,EAAOX,EAAPW,QACAC,EAAMZ,EAANY,OACUC,EAAcb,EAAxBc,SACAC,EAAUf,EAAVe,WACAC,EAAOhB,EAAPgB,QACAC,EAAYjB,EAAZiB,aACOC,EAAWlB,EAAlBmB,MACAC,EAAgBpB,EAAhBoB,iBACAC,EAAerB,EAAfqB,gBACAC,EAAetB,EAAfsB,gBACAC,EAASvB,EAATuB,UACAC,EAAcxB,EAAdwB,eACAC,EAAczB,EAAdyB,eACAC,GAAa1B,EAAb0B,cACAC,GAAa3B,EAAb2B,cACAC,GAAY5B,EAAZ4B,aACAC,GAAa7B,EAAb6B,cACAC,GAAG9B,EAAH8B,IACAC,GAAI/B,EAAJ+B,KACAC,GAAYhC,EAAZgC,aACAC,GAAYjC,EAAZiC,aACAC,GAAclC,EAAdkC,eACAC,GAAanC,EAAbmC,cACAC,GAAgBpC,EAAhBoC,iBACAC,GAAWrC,EAAXqC,YACAC,GAAatC,EAAbsC,cACAC,GAAUvC,EAAVuC,WACAC,GAAQxC,EAARwC,SACAC,GAAEzC,EAAFyC,GACAC,GAAS1C,EAAT0C,UAASC,GAAA3C,EACT4C,MAAAA,QAAQ,IAAHD,IAAQA,GAAAE,GAAA7C,EACb8C,UAAAA,QAAY,IAAHD,IAAQA,GACDE,GAAoB/C,EAApCgD,eACAC,GAAcjD,EAAdiD,eACAC,GAAOlD,EAAPkD,QACAC,GAAanD,EAAbmD,cAAaC,GAAApD,EACbqD,kBAAAA,QAAiB,IAAAD,IAAIR,GAAKQ,GACPE,GAAuBtD,EAA1CuD,kBACAC,GAA2BxD,EAA3BwD,4BACAC,GAAgBzD,EAAhByD,iBACAC,GAAuB1D,EAAvB0D,wBACAC,GAAoC3D,EAApC2D,qCACAC,GAAc5D,EAAd4D,eACAC,GAAS7D,EAAT6D,UACAC,GAAS9D,EAAT8D,UACAC,GAAc/D,EAAd+D,eACAC,GAAShE,EAATgE,UAASC,GAAAjE,EACTkE,gBAAAA,QAAkB,IAAHD,IAAOA,GACtBE,GAAuBnE,EAAvBmE,wBACAC,GAAYpE,EAAZoE,aACAC,GAAYrE,EAAZqE,aACeC,GAAUtE,EAAzB,eAIIuE,GAAaC,IACbC,GACJrC,IAAqB+B,IAA2BO,SAASC,cAAcR,IACnES,GAAuBC,GAAQ,WACnC,OAAI5D,EACK6D,MAAMC,QAAQ9D,GACjBA,EAAa+D,KAAI,SAAAC,GAAE,OAAAC,EAAAA,EAAA,CAAA,EAAUD,GAAE,CAAA,EAAA,CAAEE,aAAa,GAAI,IAAID,EAAAA,KACjDjE,GAAY,CAAA,EAAA,CAAEkE,aAAa,IAG/BlE,CACT,GAAG,CAACA,IAEJmE,GAAgCC,EAAST,IAAwB,IAAGU,GAAAC,EAAAH,GAAA,GAAnDI,GAAWF,GAAA,GACtBG,GAAsBhE,GAAkBD,EACxCkE,GAAqB/D,IAAiBD,GACtCiE,KAAiBzE,EACjB0E,GAAkB1E,QAAAA,EAJToE,GAAA,GAKTO,GAAqBhB,GAAQ,WACjC,OAAIC,MAAMC,QAAQa,IACTA,GAAgBE,QAAO,SAACC,EAAKC,GAAM,OAAAd,EAAAA,EAAA,CAAA,EAAWa,GAAG,CAAA,EAAAE,EAAA,CAAA,EAAGD,EAAO7E,MAAQ6E,GAAS,GAAE,CAAE,GAElF,EACT,GAAG,CAACJ,KAEEM,GAAoBrB,GAAQ,WAChC,OACEb,IAAS,GAAAmC,OACN3F,EAAW,YAAc,GAAE,KAAA2F,OAAIvC,GAAcuC,KAAAA,OAC9CrB,MAAMC,QAAQa,IAAgB,aAAAO,OAAgBP,GAAgBZ,KAAI,SAAAoB,GAAC,OAAIA,EAAEC,KAAK,IAAEC,KAAK,OAAU,SAGpG,GAAE,CAACtC,GAAWxD,EAAUoF,GAAiBhC,KACpCzC,GAAQyB,GAAQgD,GAAkB1E,EAElCqF,GAAe1B,GAAQ,WAE3B,IAAM2B,EAAaC,EAAmB,CACpC1E,KAAAA,GACAD,IAAAA,GACA4B,wBAAAA,GACAa,WAAAA,GACAZ,qCAAAA,KAII+C,EAAerE,GAAYmE,GAG3BG,EAAeC,OAAOC,QAAQH,GAAcZ,QAAO,SAACgB,EAAWC,GAA8B,IAAAC,EAAAzB,EAAAwB,EAAA,GAA3BE,EAAWD,EAAA,GAAEE,EAAQF,EAAA,GAC3F,OAAA9B,EAAAA,EAAA,CAAA,EACK4B,GAAWb,CAAAA,EAAAA,EACbgB,GAAAA,GAAc,SAACE,EAAeC,GAC7B,IAAMC,EAAWb,EAAWS,GAAeT,EAAWS,GAAaE,EAAeC,GAASD,EAE3F,OAAOD,EAASG,EAAUD,EAC3B,IAEJ,GAAE,CAAE,GAEL,GAAIxE,GAAO,CACLE,IACFwE,EAA2BC,SAAQ,SAAAC,GACjC,IAAMC,EAAWd,EAAaa,GAC9Bb,EAAaa,GAAa,SAACH,EAAUD,GAAK,OAAAlC,EAAAA,EAAA,GACrCuC,EAASJ,EAAUD,IAAM,GAAA,CAC5BM,OAAQ,SAEZ,IAGF,IAAMC,EAAyBhB,EAAaiB,eAC5CjB,EAAaiB,eAAiB,SAACP,EAAUD,GAAK,OAAAlC,EAAAA,EAAA,GACzCyC,EAAuBN,EAAUD,IAAM,GAAA,CAC1CS,YAAa,IAEjB,CAEA,OAAOlB,CACT,GAAG,CAAC5E,GAAMD,GAAK4B,GAAyBC,GAAsCtB,GAAaO,GAAOE,KAE5FgF,GAAOC,GACX,SAAAC,GAAK,OACHC,EAAAC,cAACC,EAAaC,KAAKJ,EAAK,CAAEK,SAAUzG,GAAcvB,6BAA8BA,IAAgC,GAElH,CAACA,EAA8BuB,KAG3B0G,GAAoBP,GAAY,SAAAC,GAAK,OAAIC,EAAAC,cAACK,EAA0BH,KAAKJ,EAAK,CAAEjG,KAAMA,QAAU,CAACA,KAEjGyG,GAAST,GACb,SAAAC,GAAK,OACHC,EAAAC,cAACO,EAAeL,KAAKJ,EAAK,CAAEK,SAAU5C,GAAqBtF,uBAAwBA,IAA0B,GAE/G,CAACsF,GAAqBtF,IAGlBuI,GAAQX,GAAY,SAAAC,GAAK,OAAIC,EAAAC,cAACS,EAAWD,MAAKN,EAAA,CAAA,EAAKJ,EAAK,CAAE,aAAW,mBAAmB,GAAE,IAE1FY,GAAcb,GAClB,SAAAC,GAAK,OACHC,EAAAC,cAACW,EAAoBT,KACfJ,EAAK,CACTxH,SAAUA,EACV6H,SAAU3C,GACVoD,eAAgBlD,GAAgB,GAChCxF,4BAA6BA,IAEhC,GACD,CAACsF,GAAoBlF,EAAUoF,GAAiBxF,IAG5C2I,GAAiBhB,GAAY,SAAAC,GAAK,OAAIC,EAAAC,cAACc,EAAuBZ,KAAKJ,EAAK,CAAEjG,KAAMA,QAAU,CAACA,KAE3FiB,GAAiB6B,GAAQ,WAC7B,OAAO,SAAUoE,EAAaC,GACxBnG,IACFA,GAAqB8C,GAAmBoD,IAE1C,IAAME,EAAqBvD,GAAgBwD,QAAO,SAAApD,GAAM,OAAIA,EAAO7E,QAAU8H,KACzEpI,GACFA,EAAesI,EAAoBD,GAErC1D,GAAY2D,GAEf,GAAE,CAACtI,EAAgBkC,GAAsB6C,GAAiBC,KAErDwD,GAAcxE,GAClB,WAAA,MAAO,CACLe,gBAAAA,GACA0D,iBAAkBtG,GAClBuG,YAAazG,GACbY,wBAAAA,GACAC,qCAAAA,GACAY,WAAAA,GACAX,eAAAA,GACAO,wBAAAA,GACD,GACD,CACEyB,GACA5C,GACAF,GACAY,GACAC,GACAC,GACAO,KAmCEqF,GAAoBxH,GAAeyH,EAAcC,EAEjDC,GAAczE,EACdlD,GAAAA,IAAYkD,EAAA,CACd0E,YAAa5H,GACbC,aAAAA,IACIC,IAAkB,CAAEA,eAAAA,MAItB2H,GAAS3E,EAAAA,EACT,CAAA,GAAClD,IAAgB,CAAEhB,QAAAA,IACnB4B,IAAS,CACXkH,SAAS,IAIPvG,GAAoBwE,GACxB,SAAAgC,GAAS,IAAAC,EACDC,EAAkBF,EAAMG,OAC9B,OAAID,SAA8BD,QAAfA,EAAfC,EAAiBE,yBAAaH,IAA9BA,EAAgCI,UAAUC,SAASC,EAAWC,wBAG3DjH,IAA2BI,IAA2BC,GAC9D,GACD,CAACD,GAAyBC,GAAsCL,KAGlE,OACE2E,EAAAC,cAACsB,GAAiBpB,EAAA,CAChBlI,UAAWsK,EAAGC,EAAOC,SAAUxK,GAC/ByK,YAAatB,GACbV,WAAUzD,EAAAA,EAAA,CACRoD,kBAAAA,GACAR,KAAAA,GACAiB,eAAAA,GACAL,MAAAA,GACAF,OAAAA,GACAoC,QAAAA,EACAhC,YAAAA,IACIhG,IAAS,CACXiI,WAAYC,EACZC,eAAgBC,IAEd7I,IAAiB,CAAE8I,SAAUC,IAGnC3H,kBAAmBA,GACnBxB,KAAMA,GACNX,iBAAkBA,EAClBd,YAAaA,EACb6K,WAAY5K,EACZ6K,aAAc5K,GAAYe,EAC1B8J,cAAe7K,GAAYO,EAC3BP,SAAUA,EACV,gBAAeA,EACf,aAAY0F,GACZ,eAActC,GACd3C,aAAcA,EACdE,MAAOA,GACPV,WAAYA,EACZC,YAAaA,EACbC,QAASA,EACTC,OAAQA,EACRE,SAhGa,SAACkF,EAAQ+D,GAKxB,OAJIlJ,GACFA,EAAemF,EAAQ+D,GAGjBA,EAAMuB,QACZ,IAAK,gBACH,IAAMxC,EAAiBlG,GAAQmH,EAAM/D,OAASA,EAE1C/C,IACFA,GAAe6F,GAGZnD,IACHH,GAAW,GAAAW,OAAAoF,EAAK3F,IAAe,CAAEkD,KAEnC,MAGF,IAAK,QACC5F,IACFA,KAGGyC,IAC8BH,GAA7BhC,GAAyCoB,GAC5B,MAuErBf,UAAWA,GACXV,cAAeA,GACf9B,gBAAiBA,EACjBC,gBAAiBA,EACjBkK,MAAO1J,GACP2I,OAAQlE,GACRkF,MAAOC,EACPpJ,cAAeA,GACfF,iBAAkBqC,GAClB5C,cAAeA,GACfwC,aAAcA,GACd9B,YAAa/B,GAAY+B,GACzBC,SAAUA,GACVC,GAAIA,GACJ,cAAa6B,IAAcqH,EAAUC,EAAuBC,SAAUpJ,IACtEC,UAAWA,GACXW,kBAAmBA,GACnBpD,IAAKA,EACLuD,4BAA6BA,GAC7BC,iBAAkBA,GAClBK,UAAWA,GACXC,eAAgBA,GAChBG,gBAAiBA,GACjBE,aAAcA,IACVuF,GACAE,IAGV,IAGFjD,OAAOkF,OAAOhM,EAAU,CAEtBiC,KAAMgK,EACNC,MAAOD,EACPE,WAAYC,EACZC,eAAgBC,EAChBC,cAAeC,EACfC,aAAcA,IAGhBzM,EAAS0M,aAAe,CACtBtM,UAAW,GACXC,4BAAwBsM,EACxBpM,kCAA8BoM,EAC9BrM,iCAA6BqM,EAC7BnM,YAAa,GACbG,WAAYqK,EACZpK,YAAaoK,EACbjH,UAAWiH,EACXnK,QAASmK,EACTlK,OAAQkK,EACRhK,SAAUgK,EACV3H,cAAe2H,EACf/J,YAAY,EACZC,QAAS,GACTa,cAAe/B,EAASqM,eAAeO,OACvCrI,aAAcvE,EAASuM,cAAcM,SACrCvL,iBAAkB0J,EAClBvJ,WAAW,EACXQ,KAAMgK,EAAMa,OACZvK,YAAawK,EACbrK,SAAU,IACVQ,oBAAgByJ,EAChBhK,GAAIqK,EACJpK,WAAW,EACXW,uBAAmBoJ,EACnBlJ,mBAAmB,EACnBtD,SAAKwM,EACLjJ,6BAA6B,EAC7BE,yBAAyB,EACzBC,sCAAsC,EACtCC,eAAgB,GAChBrD,UAAU,EACVC,UAAU,EACVsD,WAAW,EACXC,oBAAgB0I,EAChBzI,eAAWyI,EACXrI,kBAAcqI,GA+PhB,IAAAM,EAAejN"}