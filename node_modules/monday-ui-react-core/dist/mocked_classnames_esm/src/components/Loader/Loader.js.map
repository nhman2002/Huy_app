{"version":3,"file":"Loader.js","sources":["../../../../../src/components/Loader/Loader.tsx"],"sourcesContent":["import React, { ForwardedRef, forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { LoaderColors, LoaderSize, LoaderSizes } from \"./LoaderConstants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./Loader.module.scss\";\n\nexport interface LoaderProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  svgClassName?: string;\n  className?: string;\n  /** The loader's size: `number` or `LoaderSizes` */\n  size?: LoaderSize;\n  color?: LoaderColors;\n  hasBackground?: boolean;\n  wrapperClassName?: string;\n}\n\nconst Loader: VibeComponent<LoaderProps, HTMLElement> & {\n  sizes?: typeof LoaderSizes;\n  colors?: typeof LoaderColors;\n} = forwardRef(\n  (\n    { svgClassName, className, wrapperClassName, size, color, hasBackground = false, id, \"data-testid\": dataTestId },\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const overrideClassName = backwardCompatibilityForProperties([className, svgClassName], \"\");\n\n    const sizeStyle = useMemo(() => {\n      if (typeof size === \"number\") {\n        return { width: size, height: size };\n      }\n      return undefined;\n    }, [size]);\n\n    return (\n      <div\n        className={cx(styles.loaderContainer, wrapperClassName)}\n        ref={ref}\n        role=\"alert\"\n        title=\"loading\"\n        style={sizeStyle}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.LOADER, id)}\n      >\n        <svg\n          className={cx(styles.circleLoaderSpinner, overrideClassName)}\n          viewBox=\"0 0 50 50\"\n          color={color}\n          aria-hidden\n        >\n          {hasBackground && (\n            <circle\n              className={styles.circleLoaderSpinnerBackground}\n              cx=\"25\"\n              cy=\"25\"\n              r=\"20\"\n              fill=\"none\"\n              strokeWidth=\"5\"\n            />\n          )}\n          <circle className={styles.circleLoaderSpinnerPath} cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" strokeWidth=\"5\" />\n        </svg>\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(Loader, {\n  sizes: LoaderSizes,\n  colors: LoaderColors\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","wrapperClassName","size","color","_ref$hasBackground","hasBackground","id","dataTestId","overrideClassName","backwardCompatibilityForProperties","className","svgClassName","sizeStyle","useMemo","width","height","_jsx","Object","assign","cx","styles","loaderContainer","role","title","style","getTestId","ComponentDefaultTestId","LOADER","children","_jsxs","circleLoaderSpinner","viewBox","circleLoaderSpinnerBackground","cy","r","fill","strokeWidth","circleLoaderSpinnerPath","sizes","LoaderSizes","colors","LoaderColors"],"mappings":"ugBAsBA,IAkDeA,EAAAA,EA/CXC,GACF,SAAAC,EAEEC,GACE,IAFyBC,EAAgBF,EAAhBE,iBAAkBC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAKC,EAAAL,EAAEM,cAAAA,OAAgB,IAAHD,GAAQA,EAAEE,EAAEP,EAAFO,GAAmBC,EAAUR,EAAzB,eAG/ES,EAAoBC,EAAmC,CAHpCV,EAATW,UAAFX,EAAZY,cAGsF,IAElFC,EAAYC,GAAQ,WACxB,GAAoB,iBAATX,EACT,MAAO,CAAEY,MAAOZ,EAAMa,OAAQb,EAGlC,GAAG,CAACA,IAEJ,OACEc,EAAA,MAAAC,OAAAC,OAAA,CACER,UAAWS,EAAGC,EAAOC,gBAAiBpB,GACtCD,IAAKA,EACLsB,KAAK,QACLC,MAAM,UACNC,MAAOZ,EACPN,GAAIA,EACS,cAAAC,GAAckB,EAAUC,EAAuBC,OAAQrB,IAAG,CAAAsB,SAEvEC,EACE,MAAAZ,OAAAC,OAAA,CAAAR,UAAWS,EAAGC,EAAOU,oBAAqBtB,GAC1CuB,QAAQ,YACR5B,MAAOA,EAGN,eAAA,GAAA,CAAAyB,SAAA,CAAAvB,GACCW,EACE,SAAA,CAAAN,UAAWU,EAAOY,8BAClBb,GAAG,KACHc,GAAG,KACHC,EAAE,KACFC,KAAK,OACLC,YAAY,MAGhBpB,EAAA,SAAA,CAAQN,UAAWU,EAAOiB,wBAAyBlB,GAAG,KAAKc,GAAG,KAAKC,EAAE,KAAKC,KAAK,OAAOC,YAAY,YAI1G,IAGqC,CACrCE,MAAOC,EACPC,OAAQC"}