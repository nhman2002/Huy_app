{"version":3,"file":"MenuButton.js","sources":["../../../../../src/components/MenuButton/MenuButton.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport { isForwardRef } from \"react-is\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MenuButtonComponentPosition, MenuButtonSize } from \"./MenuButtonConstants\";\nimport { AnimationType, DialogOffset, DialogPosition } from \"../../constants\";\nimport { HideShowEvent } from \"../Dialog/consts/dialog-show-hide-event\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { DialogSize } from \"../DialogContentContainer/DialogContentContainerConstants\";\nimport { Menu } from \"../Icon/Icons\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { MenuChild } from \"../Menu/Menu/MenuConstants\";\nimport styles from \"./MenuButton.module.scss\";\n\nconst TOOLTIP_SHOW_TRIGGER = [Tooltip.hideShowTriggers.MOUSE_ENTER];\nconst DIALOG_SHOW_TRIGGER = [HideShowEvent.CLICK, HideShowEvent.ENTER];\nconst EMPTY_ARRAY: HideShowEvent[] = [];\nconst MOVE_BY = { main: 8, secondary: 0 };\n\ninterface MenuButtonProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  componentClassName?: string;\n  /**\n   * Control the button's selected state\n   */\n  active?: boolean;\n  /**\n   *Class name to add to the button when the dialog is open\n   */\n  openDialogComponentClassName?: string;\n  /**\n   * Receives React Component\n   */\n  component?: () => JSX.Element;\n  size?: MenuButtonSize;\n  open?: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  zIndex?: number;\n  ariaLabel?: string;\n  closeDialogOnContentClick?: boolean;\n  /*\n    Class name to provide the element which wraps the popover/modal/dialog\n   */\n  dialogClassName?: string;\n  /**\n   * main - `dialogOffset.main` - main axis offset; `dialogOffset.secondary` secondary axis offset\n   */\n  dialogOffset?: DialogOffset;\n  dialogPaddingSize?: DialogSize;\n  dialogPosition?: DialogPosition;\n  dialogShowTriggerIgnoreClass?: string;\n  dialogHideTriggerIgnoreClass?: string;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  dialogContainerSelector?: string;\n  /**\n   * Dialog Alignment\n   */\n  startingEdge?: string;\n  /*\n    Callback function to be called when the menu is shown\n   */\n  onMenuShow?: () => void;\n  /*\n  Callback function to be called when the menu is shown\n */\n  onMenuHide?: () => void;\n  /**\n   * Text to be displayed after the icon\n   */\n  text?: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n  /**\n   Remove \"Tab\" key from the hide trigger\n   */\n  removeTabCloseTrigger?: boolean;\n  /**\n   is an array with the content of types:\n   CLICK, CLICK_OUTSIDE, ESCAPE_KEY, TAB_KEY, MOUSE_ENTER, MOUSE_LEAVE,\n   ENTER, MOUSE_DOWN, FOCUS, BLUR, CONTENT_CLICK\n   */\n  tooltipTriggers?: HideShowEvent | HideShowEvent[];\n  /**\n   * the disabled/tooltip position of the menu button - one of the MenuButton.dialogPositions\n   */\n  tooltipPosition?: DialogPosition;\n  /**\n   * Tooltip Element Wrapper ClassName\n   */\n  tooltipReferenceClassName?: string;\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * When the MenuButton is hidden hide the dialog and tooltip as well\n   */\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * @deprecated - use tooltipContent instead\n   */\n  disabledReason?: string;\n  children?: ElementContent;\n  /**\n   * Specifies whether to render the component before or after the text\n   */\n  componentPosition?: (typeof MenuButtonComponentPosition)[keyof typeof MenuButtonComponentPosition];\n  /**\n   * Element to be used as the trigger element for the Menu - default is button\n   */\n  triggerElement?: React.ElementType;\n}\n\nconst MenuButton: VibeComponent<MenuButtonProps> & {\n  sizes?: typeof MenuButtonSize;\n  paddingSizes?: typeof DialogContentContainer.sizes;\n  dialogPositions?: typeof DialogPosition;\n  hideTriggers?: typeof Dialog.hideShowTriggers;\n  componentPositions?: typeof MenuButtonComponentPosition;\n} = forwardRef(\n  (\n    {\n      id,\n      className,\n      // Backward compatibility for props naming\n      componentClassName,\n      openDialogComponentClassName,\n      children,\n      component = Menu,\n      componentPosition = MenuButton.componentPositions.START,\n      size = MenuButtonSize.SMALL,\n      open = false,\n      onClick = NOOP,\n      zIndex = null,\n      ariaLabel = \"Menu\",\n      closeDialogOnContentClick = false,\n      dialogOffset = MOVE_BY,\n      dialogPosition = Dialog.positions.BOTTOM_START,\n      dialogClassName,\n      dialogPaddingSize = DialogContentContainer.sizes.MEDIUM,\n      dialogShowTriggerIgnoreClass,\n      dialogHideTriggerIgnoreClass,\n      onMenuHide = NOOP,\n      onMenuShow = NOOP,\n      disabled = false,\n      text,\n      tooltipContent,\n      tooltipProps,\n      // Backward compatibility for props naming\n      disabledReason,\n      tooltipTriggers = [MenuButton.hideTriggers.MOUSE_LEAVE],\n      tooltipPosition = MenuButton.dialogPositions.RIGHT,\n      startingEdge = \"bottom\",\n      removeTabCloseTrigger = false,\n      tooltipReferenceClassName,\n      hideWhenReferenceHidden = false,\n      dialogContainerSelector,\n      active,\n      triggerElement: TriggerElement = \"button\",\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(open);\n    const isActive = active ?? isOpen;\n\n    const onMenuDidClose = useCallback(\n      (event: React.KeyboardEvent) => {\n        if (event && event.key === \"Escape\") {\n          setIsOpen(false);\n          const button = componentRef.current;\n          window.requestAnimationFrame(() => {\n            button.focus();\n          });\n        }\n      },\n      [componentRef, setIsOpen]\n    );\n\n    const onDialogDidHide = useCallback(\n      (event: DialogEvent, hideEvent: string) => {\n        setIsOpen(false);\n        onMenuHide();\n        const button = componentRef.current;\n        window.requestAnimationFrame(() => {\n          if (button && hideEvent === Dialog.hideShowTriggers.ESCAPE_KEY) {\n            button.focus();\n          }\n        });\n      },\n      [setIsOpen, onMenuHide, componentRef]\n    );\n\n    const onDialogDidShow = useCallback(() => {\n      setIsOpen(true);\n      onMenuShow();\n    }, [setIsOpen, onMenuShow]);\n\n    const [clonedChildren, hideTrigger] = useMemo(() => {\n      const triggers = new Set([\n        Dialog.hideShowTriggers.CLICK_OUTSIDE,\n        Dialog.hideShowTriggers.TAB_KEY,\n        Dialog.hideShowTriggers.ESCAPE_KEY\n      ]);\n\n      if (closeDialogOnContentClick) {\n        triggers.add(Dialog.hideShowTriggers.CONTENT_CLICK);\n        triggers.add(Dialog.hideShowTriggers.ENTER);\n      }\n\n      if (removeTabCloseTrigger) {\n        triggers.delete(Dialog.hideShowTriggers.TAB_KEY);\n      }\n      const childrenArr = React.Children.toArray(children) as MenuChild[];\n      const cloned = childrenArr.map(child => {\n        if (!React.isValidElement(child)) return null;\n\n        const newProps: { focusOnMount?: boolean; onClose?: (event: React.KeyboardEvent) => void } = {};\n        if (child.type && child.type.supportFocusOnMount) {\n          newProps.focusOnMount = true;\n          triggers.delete(Dialog.hideShowTriggers.ESCAPE_KEY);\n        }\n\n        if (child.type && child.type.isMenu) {\n          newProps.onClose = onMenuDidClose;\n        }\n\n        return React.cloneElement(child, newProps);\n      });\n      return [cloned, Array.from(triggers)];\n    }, [children, onMenuDidClose, closeDialogOnContentClick, removeTabCloseTrigger]);\n\n    const content = useMemo(() => {\n      if (clonedChildren.length === 0) return null;\n      return (\n        <DialogContentContainer size={dialogPaddingSize} type={DialogContentContainer.types.POPOVER}>\n          {clonedChildren}\n        </DialogContentContainer>\n      );\n    }, [clonedChildren, dialogPaddingSize]);\n\n    const computedDialogOffset = useMemo(\n      () => ({\n        ...MOVE_BY,\n        ...dialogOffset\n      }),\n      [dialogOffset]\n    );\n\n    const onMouseUp = (event: React.MouseEvent<HTMLElement>) => {\n      if (disabled) {\n        event.currentTarget.blur();\n        return;\n      }\n      onClick(event);\n    };\n\n    const Icon = component;\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case MenuButtonSize.XXS:\n        case MenuButtonSize.XS:\n          return 16;\n        case MenuButtonSize.SMALL:\n        case MenuButtonSize.MEDIUM:\n        case MenuButtonSize.LARGE:\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n    const icon = Icon ? <Icon size={iconSize.toString()} role=\"img\" aria-hidden=\"true\" /> : null;\n\n    useLayoutEffect(() => {\n      setIsOpen(open);\n    }, [open, setIsOpen]);\n\n    const overrideTooltipContent = backwardCompatibilityForProperties([tooltipContent, disabledReason]);\n    const overrideClassName = backwardCompatibilityForProperties([className, componentClassName]);\n\n    // Trigger element props, which are only relevant for \"button\" element, but might be needed for other elements e.g. Button\n    const triggerElementProps =\n      TriggerElement === \"button\"\n        ? {\n            ref: mergedRef\n          }\n        : {\n            active: isActive,\n            disabled: disabled,\n            ref: isForwardRef(TriggerElement) ? mergedRef : undefined\n          };\n\n    return (\n      <Tooltip\n        content={overrideTooltipContent}\n        position={tooltipPosition}\n        showTrigger={TOOLTIP_SHOW_TRIGGER}\n        hideTrigger={tooltipTriggers}\n        referenceWrapperClassName={tooltipReferenceClassName}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n        {...tooltipProps}\n      >\n        <Dialog\n          wrapperClassName={dialogClassName}\n          position={dialogPosition}\n          containerSelector={dialogContainerSelector}\n          startingEdge={startingEdge}\n          animationType={AnimationType.EXPAND}\n          content={content}\n          moveBy={computedDialogOffset}\n          showTrigger={disabled ? EMPTY_ARRAY : DIALOG_SHOW_TRIGGER}\n          hideTrigger={hideTrigger}\n          showTriggerIgnoreClass={dialogShowTriggerIgnoreClass}\n          hideTriggerIgnoreClass={dialogHideTriggerIgnoreClass}\n          useDerivedStateFromProps={true}\n          onDialogDidShow={onDialogDidShow}\n          onDialogDidHide={onDialogDidHide}\n          zIndex={zIndex}\n          isOpen={isOpen}\n          hideWhenReferenceHidden={hideWhenReferenceHidden}\n        >\n          <TriggerElement\n            id={id}\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_BUTTON, id)}\n            type=\"button\"\n            className={cx(styles.wrapper, overrideClassName, getStyle(styles, camelCase(`size-${size}`)), {\n              [styles.active]: isActive,\n              [getStyle(styles, openDialogComponentClassName)]: isOpen && openDialogComponentClassName,\n              [styles.disabled]: disabled,\n              [styles.text]: text\n            })}\n            aria-haspopup=\"true\"\n            aria-expanded={isOpen}\n            aria-label={!text && ariaLabel}\n            onMouseUp={onMouseUp}\n            aria-disabled={disabled}\n            {...triggerElementProps}\n          >\n            {componentPosition === MenuButton.componentPositions.START && icon}\n            {text && <span className={styles.innerText}>{text}</span>}\n            {componentPosition === MenuButton.componentPositions.END && icon}\n          </TriggerElement>\n        </Dialog>\n      </Tooltip>\n    );\n  }\n);\n\nexport default withStaticProps(MenuButton, {\n  sizes: MenuButtonSize,\n  paddingSizes: DialogContentContainer.sizes,\n  dialogPositions: Dialog.positions,\n  hideTriggers: Dialog.hideShowTriggers,\n  componentPositions: MenuButtonComponentPosition\n});\n"],"names":["TOOLTIP_SHOW_TRIGGER","Tooltip","hideShowTriggers","MOUSE_ENTER","DIALOG_SHOW_TRIGGER","HideShowEvent","CLICK","ENTER","EMPTY_ARRAY","MOVE_BY","main","secondary","MenuButton","forwardRef","_ref","ref","id","className","componentClassName","openDialogComponentClassName","children","_ref$component","component","Menu","_ref$componentPositio","componentPosition","componentPositions","START","_ref$size","size","MenuButtonSize","SMALL","_ref$open","open","_ref$onClick","onClick","NOOP","_ref$zIndex","zIndex","_ref$ariaLabel","ariaLabel","_ref$closeDialogOnCon","closeDialogOnContentClick","_ref$dialogOffset","dialogOffset","_ref$dialogPosition","dialogPosition","Dialog","positions","BOTTOM_START","dialogClassName","_ref$dialogPaddingSiz","dialogPaddingSize","DialogContentContainer","sizes","MEDIUM","dialogShowTriggerIgnoreClass","dialogHideTriggerIgnoreClass","_ref$onMenuHide","onMenuHide","_ref$onMenuShow","onMenuShow","_ref$disabled","disabled","text","tooltipContent","tooltipProps","disabledReason","_ref$tooltipTriggers","tooltipTriggers","hideTriggers","MOUSE_LEAVE","_ref$tooltipPosition","tooltipPosition","dialogPositions","RIGHT","_ref$startingEdge","startingEdge","_ref$removeTabCloseTr","removeTabCloseTrigger","tooltipReferenceClassName","_ref$hideWhenReferenc","hideWhenReferenceHidden","dialogContainerSelector","active","_ref$triggerElement","triggerElement","TriggerElement","dataTestId","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isActive","onMenuDidClose","useCallback","event","key","button","current","window","requestAnimationFrame","focus","onDialogDidHide","hideEvent","ESCAPE_KEY","onDialogDidShow","_useMemo","useMemo","triggers","Set","CLICK_OUTSIDE","TAB_KEY","add","CONTENT_CLICK","delete","React","Children","toArray","map","child","isValidElement","newProps","type","supportFocusOnMount","focusOnMount","isMenu","onClose","cloneElement","Array","from","_useMemo2","clonedChildren","hideTrigger","content","length","_jsx","types","POPOVER","computedDialogOffset","Object","assign","Icon","iconSize","XXS","XS","LARGE","BUTTON_ICON_SIZE","icon","role","useLayoutEffect","overrideTooltipContent","backwardCompatibilityForProperties","overrideClassName","triggerElementProps","isForwardRef","undefined","position","showTrigger","referenceWrapperClassName","wrapperClassName","containerSelector","animationType","AnimationType","EXPAND","moveBy","showTriggerIgnoreClass","hideTriggerIgnoreClass","useDerivedStateFromProps","_jsxs","getTestId","ComponentDefaultTestId","MENU_BUTTON","cx","styles","wrapper","getStyle","camelCase","concat","_defineProperty","onMouseUp","currentTarget","blur","innerText","END","withStaticProps","paddingSizes","MenuButtonComponentPosition"],"mappings":"oxCAsBA,IAAMA,EAAuB,CAACC,EAAQC,iBAAiBC,aACjDC,EAAsB,CAACC,EAAcC,MAAOD,EAAcE,OAC1DC,EAA+B,GAC/BC,EAAU,CAAEC,KAAM,EAAGC,UAAW,GAkGhCC,EAMFC,GACF,SAAAC,EAyCEC,GACE,IAxCAC,EAAEF,EAAFE,GACAC,EAASH,EAATG,UAEAC,EAAkBJ,EAAlBI,mBACAC,EAA4BL,EAA5BK,6BACAC,EAAQN,EAARM,SAAQC,EAAAP,EACRQ,UAAAA,OAAYC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAV,EAChBW,kBAAAA,OAAoBb,IAAHY,EAAGZ,EAAWc,mBAAmBC,MAAKH,EAAAI,EAAAd,EACvDe,KAAAA,OAAI,IAAAD,EAAGE,EAAeC,MAAKH,EAAAI,EAAAlB,EAC3BmB,KAAAA,OAAO,IAAHD,GAAQA,EAAAE,EAAApB,EACZqB,QAAAA,OAAUC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAvB,EACdwB,OAAAA,OAAS,IAAHD,EAAG,KAAIA,EAAAE,EAAAzB,EACb0B,UAAAA,OAAY,IAAHD,EAAG,OAAMA,EAAAE,EAAA3B,EAClB4B,0BAAAA,QAA4B,IAAHD,GAAQA,EAAAE,GAAA7B,EACjC8B,aAAAA,QAAenC,IAAHkC,GAAGlC,EAAOkC,GAAAE,GAAA/B,EACtBgC,eAAAA,QAAiBC,IAAHF,GAAGE,EAAOC,UAAUC,aAAYJ,GAC9CK,GAAepC,EAAfoC,gBAAeC,GAAArC,EACfsC,kBAAAA,QAAoBC,IAAHF,GAAGE,EAAuBC,MAAMC,OAAMJ,GACvDK,GAA4B1C,EAA5B0C,6BACAC,GAA4B3C,EAA5B2C,6BAA4BC,GAAA5C,EAC5B6C,WAAAA,QAAavB,IAAHsB,GAAGtB,EAAIsB,GAAAE,GAAA9C,EACjB+C,WAAAA,QAAazB,IAAHwB,GAAGxB,EAAIwB,GAAAE,GAAAhD,EACjBiD,SAAAA,QAAW,IAAHD,IAAQA,GAChBE,GAAIlD,EAAJkD,KACAC,GAAcnD,EAAdmD,eACAC,GAAYpD,EAAZoD,aAEAC,GAAcrD,EAAdqD,eAAcC,GAAAtD,EACduD,gBAAAA,QAAe,IAAAD,GAAG,CAACxD,EAAW0D,aAAaC,aAAYH,GAAAI,GAAA1D,EACvD2D,gBAAAA,QAAkB7D,IAAH4D,GAAG5D,EAAW8D,gBAAgBC,MAAKH,GAAAI,GAAA9D,EAClD+D,aAAAA,QAAe,IAAHD,GAAG,SAAQA,GAAAE,GAAAhE,EACvBiE,sBAAAA,QAAwB,IAAHD,IAAQA,GAC7BE,GAAyBlE,EAAzBkE,0BAAyBC,GAAAnE,EACzBoE,wBAAAA,QAA0B,IAAHD,IAAQA,GAC/BE,GAAuBrE,EAAvBqE,wBACAC,GAAMtE,EAANsE,OAAMC,GAAAvE,EACNwE,eAAgBC,QAAiB,IAAHF,GAAG,SAAQA,GAC1BG,GAAU1E,EAAzB,eAII2E,GAAeC,EAAO,MACtBC,GAAYC,EAAY7E,EAAK0E,IAEnCI,GAA4BC,EAAS7D,GAAK8D,GAAAC,EAAAH,GAAA,GAAnCI,GAAMF,GAAA,GAAEG,GAASH,GAAA,GAClBI,GAAWf,SAAAA,GAAUa,GAErBG,GAAiBC,GACrB,SAACC,GACC,GAAIA,GAAuB,WAAdA,EAAMC,IAAkB,CACnCL,IAAU,GACV,IAAMM,EAASf,GAAagB,QAC5BC,OAAOC,uBAAsB,WAC3BH,EAAOI,OACT,GACD,CACH,GACA,CAACnB,GAAcS,KAGXW,GAAkBR,GACtB,SAACC,EAAoBQ,GACnBZ,IAAU,GACVvC,KACA,IAAM6C,EAASf,GAAagB,QAC5BC,OAAOC,uBAAsB,WACvBH,GAAUM,IAAc/D,EAAO7C,iBAAiB6G,YAClDP,EAAOI,OAEX,GACD,GACD,CAACV,GAAWvC,GAAY8B,KAGpBuB,GAAkBX,GAAY,WAClCH,IAAU,GACVrC,IACF,GAAG,CAACqC,GAAWrC,KAEfoD,GAAsCC,GAAQ,WAC5C,IAAMC,EAAW,IAAIC,IAAI,CACvBrE,EAAO7C,iBAAiBmH,cACxBtE,EAAO7C,iBAAiBoH,QACxBvE,EAAO7C,iBAAiB6G,aA2B1B,OAxBIrE,KACFyE,EAASI,IAAIxE,EAAO7C,iBAAiBsH,eACrCL,EAASI,IAAIxE,EAAO7C,iBAAiBK,QAGnCwE,IACFoC,EAASM,OAAO1E,EAAO7C,iBAAiBoH,SAkBnC,CAhBaI,EAAMC,SAASC,QAAQxG,GAChByG,KAAI,SAAAC,GAC7B,IAAKJ,EAAMK,eAAeD,GAAQ,OAAO,KAEzC,IAAME,EAAuF,CAAA,EAU7F,OATIF,EAAMG,MAAQH,EAAMG,KAAKC,sBAC3BF,EAASG,cAAe,EACxBhB,EAASM,OAAO1E,EAAO7C,iBAAiB6G,aAGtCe,EAAMG,MAAQH,EAAMG,KAAKG,SAC3BJ,EAASK,QAAUjC,IAGdsB,EAAMY,aAAaR,EAAOE,EACnC,IACgBO,MAAMC,KAAKrB,GAC5B,GAAE,CAAC/F,EAAUgF,GAAgB1D,GAA2BqC,KAAuB0D,GAAAzC,EAAAiB,GAAA,GAhCzEyB,GAAcD,GAAA,GAAEE,GAAWF,GAAA,GAkC5BG,GAAU1B,GAAQ,WACtB,OAA8B,IAA1BwB,GAAeG,OAAqB,KAEtCC,EAACzF,iBAAuBxB,KAAMuB,GAAmB6E,KAAM5E,EAAuB0F,MAAMC,mBACjFN,KAGP,GAAG,CAACA,GAAgBtF,KAEd6F,GAAuB/B,GAC3B,WAAA,OAAMgC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EACD1I,GACAmC,GACH,GACF,CAACA,KAWGwG,GAAO9H,EACP+H,GAAWnC,GAAQ,WACvB,OAAQrF,GACN,KAAKC,EAAewH,IACpB,KAAKxH,EAAeyH,GAClB,OAAO,GACT,KAAKzH,EAAeC,MACpB,KAAKD,EAAeyB,OACpB,KAAKzB,EAAe0H,MAClB,OAAOC,EACT,QACE,OAAO,GAEb,GAAG,CAAC5H,IACE6H,GAAON,GAAON,EAACM,GAAI,CAACvH,KAAMwH,MAAqBM,KAAK,MAAK,cAAa,SAAY,KAExFC,GAAgB,WACd1D,GAAUjE,EACZ,GAAG,CAACA,EAAMiE,KAEV,IAAM2D,GAAyBC,EAAmC,CAAC7F,GAAgBE,KAC7E4F,GAAoBD,EAAmC,CAAC7I,EAAWC,IAGnE8I,GACe,WAAnBzE,GACI,CACExE,IAAK4E,IAEP,CACEP,OAAQe,GACRpC,SAAUA,GACVhD,IAAKkJ,EAAa1E,IAAkBI,QAAYuE,GAGxD,OACEpB,EAAC7I,EAAOiJ,OAAAC,OAAA,CACNP,QAASiB,GACTM,SAAU1F,GACV2F,YAAapK,EACb2I,YAAatE,GACbgG,0BAA2BrF,GAC3BE,wBAAyBA,IACrBhB,aAEJ4E,EAAC/F,EACCmG,OAAAC,OAAA,CAAAmB,iBAAkBpH,GAClBiH,SAAUrH,GACVyH,kBAAmBpF,GACnBN,aAAcA,GACd2F,cAAeC,EAAcC,OAC7B9B,QAASA,GACT+B,OAAQ1B,GACRmB,YAAarG,GAAWvD,EAAcJ,EACtCuI,YAAaA,GACbiC,uBAAwBpH,GACxBqH,uBAAwBpH,GACxBqH,0BAA0B,EAC1B9D,gBAAiBA,GACjBH,gBAAiBA,GACjBvE,OAAQA,EACR2D,OAAQA,GACRf,wBAAyBA,IAAuB,CAAA9D,SAEhD2J,EAACxF,kBACCvE,GAAIA,EAAE,cACOwE,IAAcwF,EAAUC,EAAuBC,YAAalK,GACzEiH,KAAK,SACLhH,UAAWkK,EAAGC,EAAOC,QAAStB,GAAmBuB,EAASF,EAAQG,EAAS,QAAAC,OAAS3J,KAAQ4J,EAAAA,EAAAA,EAAAA,EACzFL,CAAAA,EAAAA,EAAOhG,OAASe,IAChBmF,EAASF,EAAQjK,GAAgC8E,IAAU9E,GAC3DiK,EAAOrH,SAAWA,IAClBqH,EAAOpH,KAAOA,KACf,gBACY,OAAM,gBACLiC,GAAM,cACRjC,IAAQxB,EACrBkJ,UArFU,SAACpF,GACbvC,GACFuC,EAAMqF,cAAcC,OAGtBzJ,EAAQmE,IAiFa,gBAAAvC,IACXiG,GAEH,CAAA5I,SAAA,CAAAK,IAAsBb,EAAWc,mBAAmBC,OAAS+H,GAC7D1F,IAAQ8E,EAAA,OAAAI,OAAAC,OAAA,CAAMlI,UAAWmK,EAAOS,WAAY,CAAAzK,SAAA4C,MAC5CvC,IAAsBb,EAAWc,mBAAmBoK,KAAOpC,YAKtE,IAGaqC,EAAAA,EAAgBnL,EAAY,CACzC0C,MAAOxB,EACPkK,aAAc3I,EAAuBC,MACrCoB,gBAAiB3B,EAAOC,UACxBsB,aAAcvB,EAAO7C,iBACrBwB,mBAAoBuK"}