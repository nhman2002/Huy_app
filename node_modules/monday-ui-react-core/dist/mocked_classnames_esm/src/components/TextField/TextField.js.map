{"version":3,"file":"TextField.js","sources":["../../../../../src/components/TextField/TextField.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport useDebounceEvent from \"../../hooks/useDebounceEvent\";\nimport Icon from \"../Icon/Icon\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport Loader from \"../Loader/Loader\";\nimport Text from \"../Text/Text\";\nimport FieldLabel from \"../FieldLabel/FieldLabel\";\nimport {\n  FEEDBACK_CLASSES,\n  getActualSize,\n  SIZE_MAPPER,\n  TextFieldAriaLabel,\n  TextFieldFeedbackState,\n  TextFieldSize,\n  TextFieldTextType\n} from \"./TextFieldConstants\";\nimport { BASE_SIZES } from \"../../constants/sizes\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Clickable from \"../../components/Clickable/Clickable\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { VibeComponentProps, VibeComponent, withStaticProps } from \"../../types\";\nimport styles from \"./TextField.module.scss\";\n\nconst EMPTY_OBJECT = { primary: \"\", secondary: \"\", layout: \"\" };\n\ninterface TextFieldProps extends VibeComponentProps {\n  placeholder?: string;\n  /** See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete for all of the available options */\n  autoComplete?: string;\n  value?: string;\n  onChange?: (value: string, event: Pick<React.ChangeEvent, \"target\">) => void;\n  onBlur?: (event: React.FocusEvent) => void;\n  onFocus?: (event: React.FocusEvent) => void;\n  onKeyDown?: (event: React.KeyboardEvent) => void;\n  onWheel?: (event: React.WheelEvent) => void;\n  debounceRate?: number;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  readonly?: boolean;\n  setRef?: (node: HTMLElement) => void;\n  iconName?: string | React.FunctionComponent | null;\n  secondaryIconName?: string | React.FunctionComponent | null;\n  title?: string;\n  /** SIZES is exposed on the component itself */\n  size?: TextFieldSize;\n  /** Don't provide status for plain assistant text */\n  validation?: { status?: \"error\" | \"success\"; text?: string }; // TODO make common validation class?\n  wrapperClassName?: string;\n  onIconClick?: (icon: string | React.FunctionComponent | null) => void;\n  clearOnIconClick?: boolean;\n  labelIconName?: string | React.FunctionComponent | null;\n  showCharCount?: boolean;\n  inputAriaLabel?: string;\n  searchResultsContainerId?: string;\n  activeDescendant?: string;\n  /**  Icon names labels for a11y */\n  iconsNames?: {\n    layout: string;\n    primary: string;\n    secondary: string;\n  };\n  /** TEXT_TYPES is exposed on the component itself */\n  type?: TextFieldTextType;\n  maxLength?: number;\n  trim?: boolean;\n  /** ARIA role for container landmark */\n  role?: string;\n  /** adds required to the input element */\n  required?: boolean;\n  /** shows loading animation */\n  loading?: boolean;\n  /**\n   * @deprecated - use \"data-testid\" instead\n   */\n  dataTestId?: string;\n  requiredAsterisk?: boolean; // TODO: Deprecate in next major version.\n  secondaryDataTestId?: string;\n  tabIndex?: number;\n  name?: string;\n  underline?: boolean;\n}\n\nconst TextField: VibeComponent<TextFieldProps, unknown> & {\n  sizes?: typeof BASE_SIZES;\n  types?: typeof TextFieldTextType;\n  feedbacks?: typeof TextFieldFeedbackState;\n} = forwardRef(\n  (\n    {\n      className = \"\",\n      placeholder = \"\",\n      autoComplete = \"off\",\n      value,\n      onChange = NOOP,\n      onBlur = NOOP,\n      onFocus = NOOP,\n      onKeyDown = NOOP,\n      onWheel = NOOP,\n      debounceRate = 0,\n      autoFocus = false,\n      disabled = false,\n      readonly = false,\n      setRef = NOOP,\n      iconName,\n      secondaryIconName,\n      id = \"input\",\n      title = \"\",\n      size = TextField.sizes.SMALL,\n      validation = null,\n      wrapperClassName = \"\",\n      onIconClick = NOOP,\n      clearOnIconClick = false,\n      labelIconName,\n      showCharCount = false,\n      inputAriaLabel,\n      searchResultsContainerId = \"\",\n      activeDescendant = \"\",\n      iconsNames = EMPTY_OBJECT,\n      type = TextFieldTextType.TEXT,\n      maxLength = null,\n      trim = false,\n      role = \"\",\n      required = false,\n      loading = false,\n      requiredAsterisk = false,\n      dataTestId: backwardCompatibilityDataTestId,\n      \"data-testid\": dataTestId,\n      secondaryDataTestId,\n      tabIndex,\n      underline = false,\n      name\n    },\n    ref\n  ) => {\n    const overrideDataTestId = backwardCompatibilityForProperties(\n      [dataTestId, backwardCompatibilityDataTestId],\n      getTestId(ComponentDefaultTestId.TEXT_FIELD, id)\n    );\n    const inputRef = useRef(null);\n    const mergedRef = useMergeRef(ref, inputRef, setRef);\n\n    const onChangeCallback = useCallback(\n      (value: string) => {\n        onChange(value, { target: inputRef.current });\n      },\n      [onChange]\n    );\n\n    const { inputValue, onEventChanged, clearValue } = useDebounceEvent({\n      delay: debounceRate,\n      onChange: onChangeCallback,\n      initialStateValue: value,\n      trim\n    });\n\n    const currentStateIconName = useMemo(() => {\n      if (secondaryIconName) {\n        return inputValue ? secondaryIconName : iconName;\n      }\n      return iconName;\n    }, [iconName, secondaryIconName, inputValue]);\n\n    const onIconClickCallback = useCallback(() => {\n      if (disabled) {\n        return;\n      }\n\n      if (clearOnIconClick) {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        // Do it cause otherwise the value is not cleared in target object\n        inputRef.current.value = \"\";\n        clearValue();\n      }\n      onIconClick(currentStateIconName);\n    }, [inputRef, disabled, clearOnIconClick, onIconClick, currentStateIconName, clearValue]);\n\n    const validationClass = useMemo(() => {\n      if (!validation || !validation.status) {\n        return \"\";\n      }\n      return FEEDBACK_CLASSES[validation.status];\n    }, [validation]);\n\n    const hasIcon = iconName || secondaryIconName;\n    const shouldShowExtraText = showCharCount || (validation && validation.text);\n    const isSecondary = secondaryIconName === currentStateIconName;\n    const isPrimary = iconName === currentStateIconName;\n    const shouldFocusOnSecondaryIcon = secondaryIconName && isSecondary && !!inputValue;\n\n    useEffect(() => {\n      if (inputRef.current && autoFocus) {\n        const animationFrame = requestAnimationFrame(() => inputRef.current.focus());\n        return () => cancelAnimationFrame(animationFrame);\n      }\n    }, [inputRef, autoFocus]);\n\n    const isIconContainerClickable = onIconClick !== NOOP || clearOnIconClick;\n\n    return (\n      <div\n        className={cx(styles.textField, wrapperClassName, {\n          [styles.disabled]: disabled,\n          [styles.onlyUnderline]: underline\n        })}\n        role={role}\n        aria-busy={loading}\n      >\n        <div className={cx(styles.labelWrapper)}>\n          <FieldLabel\n            labelText={title}\n            icon={labelIconName}\n            iconLabel={iconsNames.layout}\n            labelFor={id}\n            requiredAsterisk={requiredAsterisk}\n          />\n          <div className={cx(styles.inputWrapper, SIZE_MAPPER[getActualSize(size)], validationClass)}>\n            {/*Programatical input (tabIndex={-1}) is working fine with aria-activedescendant attribute despite the rule*/}\n            {/*eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex*/}\n            <input\n              className={cx(className, styles.input, {\n                [styles.inputHasIcon]: !!hasIcon\n              })}\n              placeholder={placeholder}\n              autoComplete={autoComplete}\n              value={inputValue}\n              onChange={onEventChanged}\n              disabled={disabled}\n              readOnly={readonly}\n              ref={mergedRef}\n              type={type}\n              id={id}\n              data-testid={overrideDataTestId}\n              name={name}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              onKeyDown={onKeyDown}\n              onWheel={onWheel}\n              maxLength={maxLength}\n              role={searchResultsContainerId && \"combobox\"} // For voice reader\n              aria-label={inputAriaLabel || placeholder}\n              aria-invalid={validation && validation.status === \"error\"}\n              aria-owns={searchResultsContainerId}\n              aria-activedescendant={activeDescendant}\n              required={required}\n              tabIndex={tabIndex}\n            />\n            {loading && (\n              <div\n                className={cx(styles.loaderContainer, {\n                  [styles.loaderContainerHasIcon]: hasIcon\n                })}\n              >\n                <div className={cx(styles.loader)}>\n                  <Loader svgClassName={cx(styles.loaderSvg)} />\n                </div>\n              </div>\n            )}\n            <Clickable\n              className={cx(styles.iconContainer, {\n                [styles.iconContainerHasIcon]: hasIcon,\n                [styles.iconContainerActive]: isPrimary,\n                [styles.iconContainerClickable]: isIconContainerClickable\n              })}\n              onClick={onIconClickCallback}\n              tabIndex={onIconClick !== NOOP && inputValue && iconName.length && isPrimary ? \"0\" : \"-1\"}\n            >\n              <Icon\n                icon={iconName}\n                className={cx(styles.icon)}\n                clickable={false}\n                iconLabel={iconsNames.primary}\n                iconType={Icon.type.ICON_FONT}\n                ignoreFocusStyle\n                iconSize={size === TextField.sizes.SMALL ? \"16px\" : \"18px\"}\n              />\n            </Clickable>\n            <Clickable\n              className={cx(styles.iconContainer, {\n                [styles.iconContainerHasIcon]: hasIcon,\n                [styles.iconContainerActive]: isSecondary,\n                [styles.iconContainerClickable]: isIconContainerClickable\n              })}\n              onClick={onIconClickCallback}\n              tabIndex={!shouldFocusOnSecondaryIcon ? \"-1\" : \"0\"}\n              data-testid={secondaryDataTestId || getTestId(ComponentDefaultTestId.TEXT_FIELD_SECONDARY_BUTTON, id)}\n            >\n              <Icon\n                icon={secondaryIconName}\n                className={cx(styles.icon)}\n                clickable={false}\n                iconLabel={iconsNames.secondary}\n                iconType={Icon.type.ICON_FONT}\n                ignoreFocusStyle\n                iconSize={size === TextField.sizes.SMALL ? \"16px\" : \"18px\"}\n              />\n            </Clickable>\n          </div>\n          {shouldShowExtraText && (\n            <Text type={Text.types.TEXT2} color={Text.colors.SECONDARY} className={cx(styles.subTextContainer)}>\n              {validation && validation.text && (\n                <span className={cx(styles.subTextContainerStatus)}>{validation.text}</span>\n              )}\n              {showCharCount && (\n                <span className={cx(styles.counter)} aria-label={TextFieldAriaLabel.CHAR}>\n                  {(inputValue && inputValue.length) || 0}\n                </span>\n              )}\n            </Text>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(TextField, {\n  sizes: BASE_SIZES,\n  feedbacks: TextFieldFeedbackState,\n  types: TextFieldTextType\n});\n"],"names":["EMPTY_OBJECT","primary","secondary","layout","TextField","forwardRef","_ref","ref","_ref$className","className","_ref$placeholder","placeholder","_ref$autoComplete","autoComplete","value","_ref$onChange","onChange","NOOP","_ref$onBlur","onBlur","_ref$onFocus","onFocus","_ref$onKeyDown","onKeyDown","_ref$onWheel","onWheel","_ref$debounceRate","debounceRate","_ref$autoFocus","autoFocus","_ref$disabled","disabled","_ref$readonly","readonly","_ref$setRef","setRef","iconName","secondaryIconName","_ref$id","id","_ref$title","title","_ref$size","size","sizes","SMALL","_ref$validation","validation","_ref$wrapperClassName","wrapperClassName","_ref$onIconClick","onIconClick","_ref$clearOnIconClick","clearOnIconClick","labelIconName","_ref$showCharCount","showCharCount","inputAriaLabel","_ref$searchResultsCon","searchResultsContainerId","_ref$activeDescendant","activeDescendant","_ref$iconsNames","iconsNames","_ref$type","type","TextFieldTextType","TEXT","_ref$maxLength","maxLength","_ref$trim","trim","_ref$role","role","_ref$required","required","_ref$loading","loading","_ref$requiredAsterisk","requiredAsterisk","secondaryDataTestId","tabIndex","_ref$underline","underline","name","overrideDataTestId","backwardCompatibilityForProperties","dataTestId","getTestId","ComponentDefaultTestId","TEXT_FIELD","inputRef","useRef","mergedRef","useMergeRef","onChangeCallback","useCallback","target","current","_useDebounceEvent","useDebounceEvent","delay","initialStateValue","inputValue","onEventChanged","clearValue","currentStateIconName","useMemo","onIconClickCallback","focus","validationClass","status","FEEDBACK_CLASSES","hasIcon","shouldShowExtraText","text","isSecondary","isPrimary","shouldFocusOnSecondaryIcon","useEffect","animationFrame","requestAnimationFrame","cancelAnimationFrame","isIconContainerClickable","_jsx","Object","assign","cx","styles","textField","_defineProperty","onlyUnderline","children","_jsxs","labelWrapper","FieldLabel","labelText","icon","iconLabel","labelFor","inputWrapper","SIZE_MAPPER","getActualSize","input","inputHasIcon","readOnly","loaderContainer","loaderContainerHasIcon","loader","Loader","svgClassName","loaderSvg","Clickable","iconContainer","iconContainerHasIcon","iconContainerActive","iconContainerClickable","onClick","length","Icon","clickable","iconType","ICON_FONT","ignoreFocusStyle","iconSize","TEXT_FIELD_SECONDARY_BUTTON","Text","types","TEXT2","color","colors","SECONDARY","subTextContainer","subTextContainerStatus","counter","TextFieldAriaLabel","CHAR","withStaticProps","BASE_SIZES","feedbacks","TextFieldFeedbackState"],"mappings":"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"}