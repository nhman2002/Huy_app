{"version":3,"file":"ThemeProvider.js","sources":["../../../../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { FC, ReactElement, useEffect, useMemo, useState } from \"react\";\nimport { SystemTheme, Theme, ThemeColor } from \"./ThemeProviderConstants\";\nimport { generateRandomAlphaString, generateThemeCssOverride, shouldGenerateTheme } from \"./ThemeProviderUtils\";\nimport { withStaticProps } from \"../../types\";\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme to apply, consists of name - name of css class that will be added to the children, which should be unique - and the object of colors overrides for each system theme.\n   */\n  theme?: Theme;\n  /**\n   * The children to render with the theme\n   */\n  children: ReactElement;\n  /**\n   * String which adds up to theme name selector to make it more specific (in case if theme.name is colliding with some other class name)\n   */\n  themeClassSpecifier?: string;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> & {\n  systemThemes?: typeof SystemTheme;\n  colors?: typeof ThemeColor;\n} = ({ theme, children, themeClassSpecifier: customThemeClassSpecifier }) => {\n  const [stylesLoaded, setStylesLoaded] = useState(false);\n  const themeClassSpecifier = useMemo(\n    () => customThemeClassSpecifier || generateRandomAlphaString(),\n    [customThemeClassSpecifier]\n  );\n\n  useEffect(() => {\n    if (!shouldGenerateTheme(theme)) {\n      return;\n    }\n    if (document.getElementById(theme.name)) {\n      setStylesLoaded(true);\n      return;\n    }\n\n    const styleElement = document.createElement(\"style\");\n    styleElement.type = \"text/css\";\n    styleElement.id = theme.name;\n    const themeCssOverride = generateThemeCssOverride(theme, themeClassSpecifier);\n\n    try {\n      styleElement.appendChild(document.createTextNode(themeCssOverride));\n      document.head.appendChild(styleElement);\n      setStylesLoaded(true);\n    } catch (error) {\n      console.error(\"vibe ThemeProvider: error inserting theme-generated css - \", error);\n    }\n\n    return () => {\n      document.head.removeChild(styleElement);\n    };\n  }, [themeClassSpecifier, theme]);\n\n  if (!stylesLoaded && shouldGenerateTheme(theme)) {\n    // Waiting for styles to load before children render\n    return null;\n  }\n\n  // Pass the theme name as a class to the children - to scope the effect of the theme\n  return React.cloneElement(children, {\n    className: cx(theme?.name, themeClassSpecifier, children?.props?.className)\n  });\n};\n\nexport default withStaticProps(ThemeProvider, {\n  systemThemes: SystemTheme,\n  colors: ThemeColor\n});\n"],"names":["withStaticProps","_ref","theme","children","customThemeClassSpecifier","themeClassSpecifier","_useState","useState","_useState2","_slicedToArray","stylesLoaded","setStylesLoaded","useMemo","generateRandomAlphaString","useEffect","shouldGenerateTheme","document","getElementById","name","styleElement","createElement","type","id","themeCssOverride","generateThemeCssOverride","appendChild","createTextNode","head","error","console","removeChild","React","cloneElement","className","cx","_a","props","systemThemes","SystemTheme","colors","ThemeColor"],"mappings":"+aAqBA,IAgDeA,EAAAA,GA7CX,SAHeC,GAGyD,MAArEC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAA+BC,EAAyBH,EAA9CI,oBACtBC,EAAwCC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BH,EAAsBO,GAC1B,WAAA,OAAMR,GAA6BS,MACnC,CAACT,IA8BH,OA3BAU,GAAU,WACR,GAAKC,EAAoBb,GAAzB,CAGA,IAAIc,SAASC,eAAef,EAAMgB,MAAlC,CAKA,IAAMC,EAAeH,SAASI,cAAc,SAC5CD,EAAaE,KAAO,WACpBF,EAAaG,GAAKpB,EAAMgB,KACxB,IAAMK,EAAmBC,EAAyBtB,EAAOG,GAEzD,IACEc,EAAaM,YAAYT,SAASU,eAAeH,IACjDP,SAASW,KAAKF,YAAYN,GAC1BR,GAAgB,EAGjB,CAFC,MAAOiB,GACPC,QAAQD,MAAM,6DAA8DA,EAC7E,CAED,OAAO,WACLZ,SAASW,KAAKG,YAAYX,GAhB3B,CAFCR,GAAgB,EAFjB,CAsBH,GAAG,CAACN,EAAqBH,KAEpBQ,GAAgBK,EAAoBb,GAEhC,KAIF6B,EAAMC,aAAa7B,EAAU,CAClC8B,UAAWC,EAAGhC,aAAK,EAALA,EAAOgB,KAAMb,EAAsC,QAAjB8B,EAAAhC,aAAQ,EAARA,EAAUiC,aAAO,IAAAD,OAAA,EAAAA,EAAAF,YAErE,GAE8C,CAC5CI,aAAcC,EACdC,OAAQC"}